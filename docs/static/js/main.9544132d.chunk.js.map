{"version":3,"sources":["components/PokeBar.js","components/ListPoke.js","components/PokeCard.js","components/PokeList.js","components/PokeListWeather.js","components/API/index.js","components/PokedexHeader.js","App.js","serviceWorker.js","index.js"],"names":["PokeBar","getByTypeCat","home","Navbar","collapseOnSelect","expand","bg","variant","Brand","Toggle","aria-controls","Collapse","id","Nav","className","Link","ListPoke","title","filterTypes","ListGroup","Item","onClick","PokeCard","pokemonCard","Card","style","width","Body","Title","Name","Text","ATK","DEF","STA","href","PokeList","data","functionFilter","pokemons","useEffect","Container","fluid","Row","Col","xl","length","map","item","index","key","PokeListWeather","match","useState","pageTitle","setPageTitle","renderDetails","setRenderDetails","params","pgt","fetch","then","response","json","dados","catch","e","console","log","res","getPokesByName","pokeNum","Generation","typeOne","statTotal","PokedexHeader","Jumbotron","height","App","setPokemons","category","setCategory","to","getByWeatherCat","exact","path","type","array","v","push","Set","pokes","add","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.9544132d.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Nav, Navbar } from 'react-bootstrap'\r\n\r\nexport default function PokeBar({ getByTypeCat, home  }) {\r\n    return (\r\n        <>\r\n            <Navbar collapseOnSelect expand=\"md\" bg=\"dark\" variant=\"dark\">\r\n                <Navbar.Brand>PokeDex</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n    <Nav.Link>{home}</Nav.Link>\r\n                        <Nav.Link>{getByTypeCat}</Nav.Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { ListGroup } from 'react-bootstrap'\r\n\r\nexport default function ListPoke({ title, filterTypes }) {\r\n    return (\r\n        <ListGroup>\r\n            <ListGroup.Item className=\"btn list-group-item list-group-item-action\" onClick={() => {\r\n                filterTypes(title)\r\n            }}>{title}</ListGroup.Item>\r\n        </ListGroup>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Card } from 'react-bootstrap'\r\n\r\nexport default function PokeCard({pokemonCard}) {\r\n\r\n    return (\r\n        <Card className=\"m-2\" style={{ width: '18rem' }}>\r\n            <Card.Body>\r\n                <Card.Title> {pokemonCard.Name}</Card.Title>\r\n                <Card.Text>ATK: {pokemonCard.ATK}</Card.Text>\r\n                <Card.Text>DEF: {pokemonCard.DEF}</Card.Text>\r\n                <Card.Text>STA: {pokemonCard.STA}</Card.Text>\r\n                <Card.Link className=\"btn btn-danger\" href={`/pokemon/${pokemonCard.Name}`}>Mais Detalhes</Card.Link>\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { Col, Container, Row, Tab } from 'react-bootstrap'\r\nimport ListPoke from './ListPoke'\r\nimport PokeCard from './PokeCard'\r\n\r\nexport default function PokeList({ data, functionFilter, filterTypes, pokemons }) {\r\n    useEffect(() => {\r\n        functionFilter()\r\n    }, [])\r\n\r\n    return (\r\n            <Container className=\"bg-warning\" fluid=\"xs\" >\r\n                <Row className=\"p-2 m-0\" >\r\n                   \r\n                    <Col xl={2}>\r\n                        {data.length == 0 ? \"Carregando...\" : data.map((item, index) => {\r\n                        return <ListPoke filterTypes={filterTypes} title={item} key={index} />\r\n                    })}\r\n                    </Col>\r\n\r\n                        <Col className=\"d-flex flex-wrap\">\r\n                            {pokemons.length == 0 ? \"Selecione alguma categoria\" : pokemons.map((item, index) => {\r\n                                return <PokeCard pokemonCard={item} key={index} />\r\n                            })}\r\n                        </Col>\r\n                </Row>\r\n            </Container>\r\n    )\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Card, Col, Container, Row } from 'react-bootstrap';\r\nimport { filterByName } from './API';\r\n\r\nexport default function PokeListWeather({ match }) {\r\n    const [pageTitle, setPageTitle] = useState(\"...\")\r\n    const [renderDetails, setRenderDetails] = useState([])\r\n\r\n    useEffect(() => {\r\n        const { params } = match;\r\n        setPageTitle(params.id)\r\n        getPokesByName(params.id)\r\n\r\n    }, [])\r\n\r\n    function getPokesByName(pgt) {\r\n        filterByName(pgt)\r\n            .then(res => {\r\n                return setRenderDetails(res[0])\r\n            })\r\n    }\r\n\r\n    return (\r\n        <Container className=\"bg-warning\" fluid=\"xs\" >\r\n            <Row className=\"p-2 m-0\" >\r\n                <Col>\r\n                    <Card>\r\n                        <Card.Title>{pageTitle} </Card.Title>\r\n                        <Card.Body>\r\n                            <Card.Text>PokeNum: {renderDetails.pokeNum}</Card.Text>\r\n                            <Card.Text>Generation: {renderDetails.Generation} </Card.Text>\r\n                            <Card.Text>Tipo 1: {renderDetails.typeOne}</Card.Text>\r\n                            <Card.Text>ATK: {renderDetails.ATK}</Card.Text>\r\n                            <Card.Text>DEF: {renderDetails.DEF}</Card.Text>\r\n                            <Card.Text>STA: {renderDetails.STA}</Card.Text>\r\n                            <Card.Text>Status Total: {renderDetails.statTotal}</Card.Text>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\n","\r\nexport const getAllPokes = () => fetch('http://localhost:8088/getall')\r\n    .then(response => response.json())\r\n    .then((dados) => dados)\r\n    .catch((e) => console.log(e));\r\n\r\nexport const filterPokesByTypeOne = (typeOne) => fetch(`http://localhost:8088/${typeOne}`)\r\n    .then(response => response.json())\r\n    .then((dados) => dados)\r\n    .catch((e) => console.log(e));\r\n    \r\nexport const filterByName = (Name) => fetch(`http://localhost:8088/pokemon/${Name}`)\r\n    .then(response => response.json())\r\n    .then((dados) => dados)\r\n    .catch((e) => console.log(e));","import React from 'react'\r\nimport { Jumbotron } from 'react-bootstrap'\r\n\r\nexport default function PokedexHeader() {\r\n    return (\r\n        <Jumbotron style={{height: '90vh'}}>\r\n        <h1>PokeDex</h1>\r\n        <p>\r\n          Para entrar no Pokedex, clique no botão \"Categoria\"\r\n        </p>\r\n      </Jumbotron>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Link, Route, Switch } from \"react-router-dom\";\nimport { filterPokesByTypeOne, getAllPokes } from './components/API';\nimport PokeBar from './components/PokeBar';\nimport PokeList from './components/PokeList';\nimport PokeListWeather from './components/PokeListWeather';\nimport PokedexHeader from './components/PokedexHeader'\nfunction App() {\n  const [pokemons, setPokemons] = useState([]);\n  const [category, setCategory] = useState([]);\n  let all = [];\n\n  // function getAll() {\n  //   console.log(\"foi\");\n  //   getAllPokes().then(pokes => {\n  //     all = [pokes]\n  //     setPokemons(all)\n  //   }).catch(e => alert(e))\n  // }\n\n  // Filtrar as categorias Tipo Um dos pokemons\n  function getAllByCatOne() {\n    let category = new Set();\n    getAllPokes().then(pokes => pokes.map((v) => {\n      return category.add(v.typeOne)\n    })).then(() => {\n      setCategory([...category])\n    })\n  }\n\n  function filterTypes(type) {\n    let array = []\n    filterPokesByTypeOne(type)\n      .then(res => res.map((v) => {\n        return array.push(v)\n      })).then(() => {\n        setPokemons(array)\n      })\n  }\n\n  return (\n    <Router>\n      <PokeBar getByTypeCat={<Link className=\"btn btn-primary\" to=\"/categorias\">Categoria</Link>} home={<Link className=\"btn btn-primary\" to=\"/\">Home</Link>} getByWeatherCat={<Link to=\"/weather\">Tempo</Link>} />\n      <Switch>\n        <Route exact path=\"/categorias\">\n          <PokeList filterTypes={filterTypes} functionFilter={getAllByCatOne} data={category} pokemons={pokemons} />\n        </Route>\n        <Route exact path=\"/\">\n        <PokedexHeader />\n        </Route>\n        <Route exact path=\"/pokemon/:id\" component={PokeListWeather} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}