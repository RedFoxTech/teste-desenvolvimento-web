{"ast":null,"code":"import { useReducer, useRef, useMemo, useContext } from 'react';\nimport invariant from 'invariant';\nimport { useReduxContext as useDefaultReduxContext } from './useReduxContext';\nimport Subscription from '../utils/Subscription';\nimport { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect';\nimport { ReactReduxContext } from '../components/Context';\n\nvar refEquality = function refEquality(a, b) {\n  return a === b;\n};\n\nfunction useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub) {\n  var _useReducer = useReducer(function (s) {\n    return s + 1;\n  }, 0),\n      forceRender = _useReducer[1];\n\n  var subscription = useMemo(function () {\n    return new Subscription(store, contextSub);\n  }, [store, contextSub]);\n  var latestSubscriptionCallbackError = useRef();\n  var latestSelector = useRef();\n  var latestSelectedState = useRef();\n  var selectedState;\n\n  try {\n    if (selector !== latestSelector.current || latestSubscriptionCallbackError.current) {\n      selectedState = selector(store.getState());\n    } else {\n      selectedState = latestSelectedState.current;\n    }\n  } catch (err) {\n    var errorMessage = \"An error occurred while selecting the store state: \" + err.message + \".\";\n\n    if (latestSubscriptionCallbackError.current) {\n      errorMessage += \"\\nThe error may be correlated with this previous error:\\n\" + latestSubscriptionCallbackError.current.stack + \"\\n\\nOriginal stack trace:\";\n    }\n\n    throw new Error(errorMessage);\n  }\n\n  useIsomorphicLayoutEffect(function () {\n    latestSelector.current = selector;\n    latestSelectedState.current = selectedState;\n    latestSubscriptionCallbackError.current = undefined;\n  });\n  useIsomorphicLayoutEffect(function () {\n    function checkForUpdates() {\n      try {\n        var newSelectedState = latestSelector.current(store.getState());\n\n        if (equalityFn(newSelectedState, latestSelectedState.current)) {\n          return;\n        }\n\n        latestSelectedState.current = newSelectedState;\n      } catch (err) {\n        // we ignore all errors here, since when the component\n        // is re-rendered, the selectors are called again, and\n        // will throw again, if neither props nor store state\n        // changed\n        latestSubscriptionCallbackError.current = err;\n      }\n\n      forceRender({});\n    }\n\n    subscription.onStateChange = checkForUpdates;\n    subscription.trySubscribe();\n    checkForUpdates();\n    return function () {\n      return subscription.tryUnsubscribe();\n    };\n  }, [store, subscription]);\n  return selectedState;\n}\n/**\r\n * Hook factory, which creates a `useSelector` hook bound to a given context.\r\n *\r\n * @param {Function} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useSelector` hook bound to the specified context.\r\n */\n\n\nexport function createSelectorHook(context) {\n  if (context === void 0) {\n    context = ReactReduxContext;\n  }\n\n  var useReduxContext = context === ReactReduxContext ? useDefaultReduxContext : function () {\n    return useContext(context);\n  };\n  return function useSelector(selector, equalityFn) {\n    if (equalityFn === void 0) {\n      equalityFn = refEquality;\n    }\n\n    invariant(selector, \"You must pass a selector to useSelectors\");\n\n    var _useReduxContext = useReduxContext(),\n        store = _useReduxContext.store,\n        contextSub = _useReduxContext.subscription;\n\n    return useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub);\n  };\n}\n/**\r\n * A hook to access the redux store's state. This hook takes a selector function\r\n * as an argument. The selector is called with the store state.\r\n *\r\n * This hook takes an optional equality comparison function as the second parameter\r\n * that allows you to customize the way the selected state is compared to determine\r\n * whether the component needs to be re-rendered.\r\n *\r\n * @param {Function} selector the selector function\r\n * @param {Function=} equalityFn the function that will be used to determine equality\r\n *\r\n * @returns {any} the selected state\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useSelector } from 'react-redux'\r\n *\r\n * export const CounterComponent = () => {\r\n *   const counter = useSelector(state => state.counter)\r\n *   return <div>{counter}</div>\r\n * }\r\n */\n\nexport var useSelector = createSelectorHook();","map":{"version":3,"sources":["/Users/ccstorch/Apps/teste-desenvolvimento-web/front/node_modules/react-redux/es/hooks/useSelector.js"],"names":["useReducer","useRef","useMemo","useContext","invariant","useReduxContext","useDefaultReduxContext","Subscription","useIsomorphicLayoutEffect","ReactReduxContext","refEquality","a","b","useSelectorWithStoreAndSubscription","selector","equalityFn","store","contextSub","_useReducer","s","forceRender","subscription","latestSubscriptionCallbackError","latestSelector","latestSelectedState","selectedState","current","getState","err","errorMessage","message","stack","Error","undefined","checkForUpdates","newSelectedState","onStateChange","trySubscribe","tryUnsubscribe","createSelectorHook","context","useSelector","_useReduxContext"],"mappings":"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","sourcesContent":["import { useReducer, useRef, useMemo, useContext } from 'react';\nimport invariant from 'invariant';\nimport { useReduxContext as useDefaultReduxContext } from './useReduxContext';\nimport Subscription from '../utils/Subscription';\nimport { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect';\nimport { ReactReduxContext } from '../components/Context';\n\nvar refEquality = function refEquality(a, b) {\n  return a === b;\n};\n\nfunction useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub) {\n  var _useReducer = useReducer(function (s) {\n    return s + 1;\n  }, 0),\n      forceRender = _useReducer[1];\n\n  var subscription = useMemo(function () {\n    return new Subscription(store, contextSub);\n  }, [store, contextSub]);\n  var latestSubscriptionCallbackError = useRef();\n  var latestSelector = useRef();\n  var latestSelectedState = useRef();\n  var selectedState;\n\n  try {\n    if (selector !== latestSelector.current || latestSubscriptionCallbackError.current) {\n      selectedState = selector(store.getState());\n    } else {\n      selectedState = latestSelectedState.current;\n    }\n  } catch (err) {\n    var errorMessage = \"An error occurred while selecting the store state: \" + err.message + \".\";\n\n    if (latestSubscriptionCallbackError.current) {\n      errorMessage += \"\\nThe error may be correlated with this previous error:\\n\" + latestSubscriptionCallbackError.current.stack + \"\\n\\nOriginal stack trace:\";\n    }\n\n    throw new Error(errorMessage);\n  }\n\n  useIsomorphicLayoutEffect(function () {\n    latestSelector.current = selector;\n    latestSelectedState.current = selectedState;\n    latestSubscriptionCallbackError.current = undefined;\n  });\n  useIsomorphicLayoutEffect(function () {\n    function checkForUpdates() {\n      try {\n        var newSelectedState = latestSelector.current(store.getState());\n\n        if (equalityFn(newSelectedState, latestSelectedState.current)) {\n          return;\n        }\n\n        latestSelectedState.current = newSelectedState;\n      } catch (err) {\n        // we ignore all errors here, since when the component\n        // is re-rendered, the selectors are called again, and\n        // will throw again, if neither props nor store state\n        // changed\n        latestSubscriptionCallbackError.current = err;\n      }\n\n      forceRender({});\n    }\n\n    subscription.onStateChange = checkForUpdates;\n    subscription.trySubscribe();\n    checkForUpdates();\n    return function () {\n      return subscription.tryUnsubscribe();\n    };\n  }, [store, subscription]);\n  return selectedState;\n}\n/**\r\n * Hook factory, which creates a `useSelector` hook bound to a given context.\r\n *\r\n * @param {Function} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useSelector` hook bound to the specified context.\r\n */\n\n\nexport function createSelectorHook(context) {\n  if (context === void 0) {\n    context = ReactReduxContext;\n  }\n\n  var useReduxContext = context === ReactReduxContext ? useDefaultReduxContext : function () {\n    return useContext(context);\n  };\n  return function useSelector(selector, equalityFn) {\n    if (equalityFn === void 0) {\n      equalityFn = refEquality;\n    }\n\n    invariant(selector, \"You must pass a selector to useSelectors\");\n\n    var _useReduxContext = useReduxContext(),\n        store = _useReduxContext.store,\n        contextSub = _useReduxContext.subscription;\n\n    return useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub);\n  };\n}\n/**\r\n * A hook to access the redux store's state. This hook takes a selector function\r\n * as an argument. The selector is called with the store state.\r\n *\r\n * This hook takes an optional equality comparison function as the second parameter\r\n * that allows you to customize the way the selected state is compared to determine\r\n * whether the component needs to be re-rendered.\r\n *\r\n * @param {Function} selector the selector function\r\n * @param {Function=} equalityFn the function that will be used to determine equality\r\n *\r\n * @returns {any} the selected state\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useSelector } from 'react-redux'\r\n *\r\n * export const CounterComponent = () => {\r\n *   const counter = useSelector(state => state.counter)\r\n *   return <div>{counter}</div>\r\n * }\r\n */\n\nexport var useSelector = createSelectorHook();"]},"metadata":{},"sourceType":"module"}