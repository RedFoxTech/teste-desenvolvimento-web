{"ast":null,"code":"import 'whatwg-fetch';\nimport { API_URL } from '../.env';\nimport paths from './paths';\n\nconst getHeaders = () => {\n  return {\n    Accept: 'application/json',\n    'Content-Type': 'application/json'\n  };\n};\n\nconst getPath = (pathName, urlParams, queryParams) => {\n  let {\n    path\n  } = paths[pathName];\n\n  for (let key in urlParams) {\n    const value = urlParams[key];\n    path = path.replace(`:${key}`, value);\n  }\n\n  let queryParamsArray = [];\n\n  for (let key in queryParams) {\n    const value = queryParams[key];\n    queryParamsArray.push(key + '=' + value);\n    console.log(key, value);\n  }\n\n  if (!!queryParamsArray.length) {\n    path += '?' + queryParamsArray.join('&');\n  }\n\n  const finalPath = API_URL + path;\n  console.log(finalPath);\n  return finalPath;\n};\n\nconst callServer = (pathName, options) => {\n  let {\n    method\n  } = paths[pathName];\n  const {\n    urlParams,\n    queryParams,\n    ...customOptions\n  } = options;\n  const finalPath = getPath(pathName, urlParams || {}, queryParams || {});\n  const headers = getHeaders();\n  return new Promise((resolve, reject) => {\n    fetch(finalPath, {\n      method,\n      headers,\n      ...customOptions,\n      body: JSON.stringify(options.body)\n    }).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      resolve(json);\n    }).catch(function (ex) {\n      // alert(\n      // 'Occorreu um erro de comunicação com o servidor. Se o erro persistir entre em contato com o desenvolvedor.',\n      // )\n      resolve(ex);\n    });\n  });\n};\n\nexport const isError = response => {\n  return response instanceof Error || !!response.error;\n};\nexport default callServer;","map":{"version":3,"sources":["/Users/ccstorch/Apps/teste-desenvolvimento-web/front/src/api/callServer.js"],"names":["API_URL","paths","getHeaders","Accept","getPath","pathName","urlParams","queryParams","path","key","value","replace","queryParamsArray","push","console","log","length","join","finalPath","callServer","options","method","customOptions","headers","Promise","resolve","reject","fetch","body","JSON","stringify","then","response","json","catch","ex","isError","Error","error"],"mappings":"AAAA,OAAO,cAAP;AAEA,SAASA,OAAT,QAAwB,SAAxB;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAEA,MAAMC,UAAU,GAAG,MAAM;AACxB,SAAO;AACNC,IAAAA,MAAM,EAAE,kBADF;AAEN,oBAAgB;AAFV,GAAP;AAIA,CALD;;AAOA,MAAMC,OAAO,GAAG,CAACC,QAAD,EAAWC,SAAX,EAAsBC,WAAtB,KAAsC;AACrD,MAAI;AAAEC,IAAAA;AAAF,MAAWP,KAAK,CAACI,QAAD,CAApB;;AAEA,OAAK,IAAII,GAAT,IAAgBH,SAAhB,EAA2B;AAC1B,UAAMI,KAAK,GAAGJ,SAAS,CAACG,GAAD,CAAvB;AACAD,IAAAA,IAAI,GAAGA,IAAI,CAACG,OAAL,CAAc,IAAGF,GAAI,EAArB,EAAwBC,KAAxB,CAAP;AACA;;AAED,MAAIE,gBAAgB,GAAG,EAAvB;;AACA,OAAK,IAAIH,GAAT,IAAgBF,WAAhB,EAA6B;AAC5B,UAAMG,KAAK,GAAGH,WAAW,CAACE,GAAD,CAAzB;AACAG,IAAAA,gBAAgB,CAACC,IAAjB,CAAsBJ,GAAG,GAAG,GAAN,GAAYC,KAAlC;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYN,GAAZ,EAAiBC,KAAjB;AACA;;AACD,MAAI,CAAC,CAACE,gBAAgB,CAACI,MAAvB,EAA+B;AAC9BR,IAAAA,IAAI,IAAI,MAAMI,gBAAgB,CAACK,IAAjB,CAAsB,GAAtB,CAAd;AACA;;AAED,QAAMC,SAAS,GAAGlB,OAAO,GAAGQ,IAA5B;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYG,SAAZ;AACA,SAAOA,SAAP;AACA,CArBD;;AAuBA,MAAMC,UAAU,GAAG,CAACd,QAAD,EAAWe,OAAX,KAAuB;AACzC,MAAI;AAAEC,IAAAA;AAAF,MAAapB,KAAK,CAACI,QAAD,CAAtB;AACA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,WAAb;AAA0B,OAAGe;AAA7B,MAA+CF,OAArD;AAEA,QAAMF,SAAS,GAAGd,OAAO,CAACC,QAAD,EAAWC,SAAS,IAAI,EAAxB,EAA4BC,WAAW,IAAI,EAA3C,CAAzB;AACA,QAAMgB,OAAO,GAAGrB,UAAU,EAA1B;AAEA,SAAO,IAAIsB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvCC,IAAAA,KAAK,CAACT,SAAD,EAAY;AAChBG,MAAAA,MADgB;AAEhBE,MAAAA,OAFgB;AAGhB,SAAGD,aAHa;AAIhBM,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeV,OAAO,CAACQ,IAAvB;AAJU,KAAZ,CAAL,CAMEG,IANF,CAMO,UAASC,QAAT,EAAmB;AACxB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACA,KARF,EASEF,IATF,CASO,UAASE,IAAT,EAAe;AACpBR,MAAAA,OAAO,CAACQ,IAAD,CAAP;AACA,KAXF,EAYEC,KAZF,CAYQ,UAASC,EAAT,EAAa;AACnB;AACA;AACA;AACAV,MAAAA,OAAO,CAACU,EAAD,CAAP;AACA,KAjBF;AAkBA,GAnBM,CAAP;AAoBA,CA3BD;;AA6BA,OAAO,MAAMC,OAAO,GAAGJ,QAAQ,IAAI;AAClC,SAAOA,QAAQ,YAAYK,KAApB,IAA6B,CAAC,CAACL,QAAQ,CAACM,KAA/C;AACA,CAFM;AAIP,eAAenB,UAAf","sourcesContent":["import 'whatwg-fetch'\n\nimport { API_URL } from '../.env'\nimport paths from './paths'\n\nconst getHeaders = () => {\n\treturn {\n\t\tAccept: 'application/json',\n\t\t'Content-Type': 'application/json'\n\t}\n}\n\nconst getPath = (pathName, urlParams, queryParams) => {\n\tlet { path } = paths[pathName]\n\n\tfor (let key in urlParams) {\n\t\tconst value = urlParams[key]\n\t\tpath = path.replace(`:${key}`, value)\n\t}\n\n\tlet queryParamsArray = []\n\tfor (let key in queryParams) {\n\t\tconst value = queryParams[key]\n\t\tqueryParamsArray.push(key + '=' + value)\n\t\tconsole.log(key, value)\n\t}\n\tif (!!queryParamsArray.length) {\n\t\tpath += '?' + queryParamsArray.join('&')\n\t}\n\n\tconst finalPath = API_URL + path\n\tconsole.log(finalPath)\n\treturn finalPath\n}\n\nconst callServer = (pathName, options) => {\n\tlet { method } = paths[pathName]\n\tconst { urlParams, queryParams, ...customOptions } = options\n\n\tconst finalPath = getPath(pathName, urlParams || {}, queryParams || {})\n\tconst headers = getHeaders()\n\n\treturn new Promise((resolve, reject) => {\n\t\tfetch(finalPath, {\n\t\t\tmethod,\n\t\t\theaders,\n\t\t\t...customOptions,\n\t\t\tbody: JSON.stringify(options.body)\n\t\t})\n\t\t\t.then(function(response) {\n\t\t\t\treturn response.json()\n\t\t\t})\n\t\t\t.then(function(json) {\n\t\t\t\tresolve(json)\n\t\t\t})\n\t\t\t.catch(function(ex) {\n\t\t\t\t// alert(\n\t\t\t\t// 'Occorreu um erro de comunicação com o servidor. Se o erro persistir entre em contato com o desenvolvedor.',\n\t\t\t\t// )\n\t\t\t\tresolve(ex)\n\t\t\t})\n\t})\n}\n\nexport const isError = response => {\n\treturn response instanceof Error || !!response.error\n}\n\nexport default callServer\n"]},"metadata":{},"sourceType":"module"}