{"ast":null,"code":"import callServer, { isError } from './callServer';\nexport const handleError = (response, callback) => {\n  if (isError(response)) {\n    alert('Ocorreu um erro ao comunicar com o servidor.');\n    console.log(response);\n    callback(response);\n    return true;\n  }\n};\nexport const generateResourceApi = name => {\n  const self = {\n    getList(options) {\n      return new Promise((onSuccess, onError) => {\n        callServer('get' + name + 'List', options || {}).then(response => {\n          if (!handleError(response, onError)) onSuccess(response);\n        }).catch(error => {\n          handleError(error, onError);\n        });\n      });\n    },\n\n    get(id, options) {\n      return new Promise((onSuccess, onError) => {\n        callServer('get' + name, {\n          urlParams: {\n            id\n          },\n          ...(options || {})\n        }).then(response => {\n          if (!handleError(response, onError)) onSuccess(response);\n        }).catch(error => {\n          handleError(error, onError);\n        });\n      });\n    },\n\n    create(data, options) {\n      var options = options || {};\n      return new Promise((onSuccess, onError) => {\n        callServer('create' + name, {\n          body: { ...data\n          },\n          ...options\n        }).then(response => {\n          if (!handleError(response, onError)) onSuccess(response);\n        }).catch(error => {\n          handleError(error, onError);\n        });\n      });\n    },\n\n    update(data) {\n      return new Promise((onSuccess, onError) => {\n        callServer('update' + name, {\n          urlParams: {\n            id: data.id\n          },\n          body: { ...data\n          }\n        }).then(response => {\n          if (!handleError(response, onError)) onSuccess(response);\n        }).catch(error => {\n          handleError(error, onError);\n        });\n      });\n    },\n\n    save(data) {\n      return !!data.id ? self.update(data) : self.create(data);\n    },\n\n    delete(id) {\n      return new Promise((onSuccess, onError) => {\n        callServer('delete' + name, {\n          urlParams: {\n            id\n          }\n        }).then(response => {\n          if (!handleError(response, onError)) onSuccess(response);\n        }).catch(error => {\n          handleError(error, onError);\n        });\n      });\n    }\n\n  };\n  return self;\n};","map":{"version":3,"sources":["/Users/ccstorch/Apps/teste-desenvolvimento-web/front/src/api/resource.js"],"names":["callServer","isError","handleError","response","callback","alert","console","log","generateResourceApi","name","self","getList","options","Promise","onSuccess","onError","then","catch","error","get","id","urlParams","create","data","body","update","save","delete"],"mappings":"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","sourcesContent":["import callServer, {isError} from './callServer'\n\nexport const handleError = (response, callback) => {\n  if (isError(response)) {\n    alert('Ocorreu um erro ao comunicar com o servidor.')\n    console.log(response)\n    callback(response)\n    return true\n  }\n}\n\nexport const generateResourceApi = name => {\n  const self = {\n    getList(options) {\n      return new Promise((onSuccess, onError) => {\n        callServer('get' + name + 'List', options || {})\n          .then(response => {\n            if (!handleError(response, onError)) onSuccess(response)\n          })\n          .catch(error => {\n            handleError(error, onError)\n          })\n      })\n    },\n\n    get(id, options) {\n      return new Promise((onSuccess, onError) => {\n        callServer('get' + name, {urlParams: {id}, ...(options || {})})\n          .then(response => {\n            if (!handleError(response, onError)) onSuccess(response)\n          })\n          .catch(error => {\n            handleError(error, onError)\n          })\n      })\n    },\n\n    create(data, options) {\n      var options = options || {}\n      return new Promise((onSuccess, onError) => {\n        callServer('create' + name, {body: {...data}, ...options})\n          .then(response => {\n            if (!handleError(response, onError)) onSuccess(response)\n          })\n          .catch(error => {\n            handleError(error, onError)\n          })\n      })\n    },\n\n    update(data) {\n      return new Promise((onSuccess, onError) => {\n        callServer('update' + name, {urlParams: {id: data.id}, body: {...data}})\n          .then(response => {\n            if (!handleError(response, onError)) onSuccess(response)\n          })\n          .catch(error => {\n            handleError(error, onError)\n          })\n      })\n    },\n\n    save(data) {\n      return !!data.id ? self.update(data) : self.create(data)\n    },\n\n    delete(id) {\n      return new Promise((onSuccess, onError) => {\n        callServer('delete' + name, {urlParams: {id}})\n          .then(response => {\n            if (!handleError(response, onError)) onSuccess(response)\n          })\n          .catch(error => {\n            handleError(error, onError)\n          })\n      })\n    },\n  }\n\n  return self\n}\n"]},"metadata":{},"sourceType":"module"}