{"ast":null,"code":"/**\n * This action type will be dispatched when your history\n * receives a location change.\n */\nexport var LOCATION_CHANGE = '@@router/LOCATION_CHANGE';\nexport var onLocationChanged = function onLocationChanged(location, action) {\n  var isFirstRendering = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return {\n    type: LOCATION_CHANGE,\n    payload: {\n      location: location,\n      action: action,\n      isFirstRendering: isFirstRendering\n    }\n  };\n};\n/**\n * This action type will be dispatched by the history actions below.\n * If you're writing a middleware to watch for navigation events, be sure to\n * look for actions of this type.\n */\n\nexport var CALL_HISTORY_METHOD = '@@router/CALL_HISTORY_METHOD';\n\nvar updateLocation = function updateLocation(method) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return {\n      type: CALL_HISTORY_METHOD,\n      payload: {\n        method: method,\n        args: args\n      }\n    };\n  };\n};\n/**\n * These actions correspond to the history API.\n * The associated routerMiddleware will capture these events before they get to\n * your reducer and reissue them as the matching function on your history.\n */\n\n\nexport var push = updateLocation('push');\nexport var replace = updateLocation('replace');\nexport var go = updateLocation('go');\nexport var goBack = updateLocation('goBack');\nexport var goForward = updateLocation('goForward');\nexport var routerActions = {\n  push: push,\n  replace: replace,\n  go: go,\n  goBack: goBack,\n  goForward: goForward\n};","map":{"version":3,"sources":["/Users/ccstorch/Apps/teste-desenvolvimento-web/front/node_modules/connected-react-router/esm/actions.js"],"names":["LOCATION_CHANGE","onLocationChanged","location","action","isFirstRendering","arguments","length","undefined","type","payload","CALL_HISTORY_METHOD","updateLocation","method","_len","args","Array","_key","push","replace","go","goBack","goForward","routerActions"],"mappings":"AAAA;;;;AAIA,OAAO,IAAIA,eAAe,GAAG,0BAAtB;AACP,OAAO,IAAIC,iBAAiB,GAAG,SAASA,iBAAT,CAA2BC,QAA3B,EAAqCC,MAArC,EAA6C;AAC1E,MAAIC,gBAAgB,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,KAA3F;AACA,SAAO;AACLG,IAAAA,IAAI,EAAER,eADD;AAELS,IAAAA,OAAO,EAAE;AACPP,MAAAA,QAAQ,EAAEA,QADH;AAEPC,MAAAA,MAAM,EAAEA,MAFD;AAGPC,MAAAA,gBAAgB,EAAEA;AAHX;AAFJ,GAAP;AAQD,CAVM;AAWP;;;;;;AAMA,OAAO,IAAIM,mBAAmB,GAAG,8BAA1B;;AAEP,IAAIC,cAAc,GAAG,SAASA,cAAT,CAAwBC,MAAxB,EAAgC;AACnD,SAAO,YAAY;AACjB,SAAK,IAAIC,IAAI,GAAGR,SAAS,CAACC,MAArB,EAA6BQ,IAAI,GAAG,IAAIC,KAAJ,CAAUF,IAAV,CAApC,EAAqDG,IAAI,GAAG,CAAjE,EAAoEA,IAAI,GAAGH,IAA3E,EAAiFG,IAAI,EAArF,EAAyF;AACvFF,MAAAA,IAAI,CAACE,IAAD,CAAJ,GAAaX,SAAS,CAACW,IAAD,CAAtB;AACD;;AAED,WAAO;AACLR,MAAAA,IAAI,EAAEE,mBADD;AAELD,MAAAA,OAAO,EAAE;AACPG,QAAAA,MAAM,EAAEA,MADD;AAEPE,QAAAA,IAAI,EAAEA;AAFC;AAFJ,KAAP;AAOD,GAZD;AAaD,CAdD;AAeA;;;;;;;AAOA,OAAO,IAAIG,IAAI,GAAGN,cAAc,CAAC,MAAD,CAAzB;AACP,OAAO,IAAIO,OAAO,GAAGP,cAAc,CAAC,SAAD,CAA5B;AACP,OAAO,IAAIQ,EAAE,GAAGR,cAAc,CAAC,IAAD,CAAvB;AACP,OAAO,IAAIS,MAAM,GAAGT,cAAc,CAAC,QAAD,CAA3B;AACP,OAAO,IAAIU,SAAS,GAAGV,cAAc,CAAC,WAAD,CAA9B;AACP,OAAO,IAAIW,aAAa,GAAG;AACzBL,EAAAA,IAAI,EAAEA,IADmB;AAEzBC,EAAAA,OAAO,EAAEA,OAFgB;AAGzBC,EAAAA,EAAE,EAAEA,EAHqB;AAIzBC,EAAAA,MAAM,EAAEA,MAJiB;AAKzBC,EAAAA,SAAS,EAAEA;AALc,CAApB","sourcesContent":["/**\n * This action type will be dispatched when your history\n * receives a location change.\n */\nexport var LOCATION_CHANGE = '@@router/LOCATION_CHANGE';\nexport var onLocationChanged = function onLocationChanged(location, action) {\n  var isFirstRendering = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return {\n    type: LOCATION_CHANGE,\n    payload: {\n      location: location,\n      action: action,\n      isFirstRendering: isFirstRendering\n    }\n  };\n};\n/**\n * This action type will be dispatched by the history actions below.\n * If you're writing a middleware to watch for navigation events, be sure to\n * look for actions of this type.\n */\n\nexport var CALL_HISTORY_METHOD = '@@router/CALL_HISTORY_METHOD';\n\nvar updateLocation = function updateLocation(method) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return {\n      type: CALL_HISTORY_METHOD,\n      payload: {\n        method: method,\n        args: args\n      }\n    };\n  };\n};\n/**\n * These actions correspond to the history API.\n * The associated routerMiddleware will capture these events before they get to\n * your reducer and reissue them as the matching function on your history.\n */\n\n\nexport var push = updateLocation('push');\nexport var replace = updateLocation('replace');\nexport var go = updateLocation('go');\nexport var goBack = updateLocation('goBack');\nexport var goForward = updateLocation('goForward');\nexport var routerActions = {\n  push: push,\n  replace: replace,\n  go: go,\n  goBack: goBack,\n  goForward: goForward\n};"]},"metadata":{},"sourceType":"module"}