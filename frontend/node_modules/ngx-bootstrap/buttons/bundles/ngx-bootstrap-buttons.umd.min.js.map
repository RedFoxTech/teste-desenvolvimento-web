{"version":3,"sources":["ng://ngx-bootstrap/buttons/button-checkbox.directive.ts","ng://ngx-bootstrap/buttons/button-radio.directive.ts","ng://ngx-bootstrap/buttons/button-radio-group.directive.ts","ng://ngx-bootstrap/buttons/buttons.module.ts"],"names":["CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","ButtonCheckboxDirective","multi","this","btnCheckboxTrue","btnCheckboxFalse","state","onChange","Function","prototype","onTouched","onClick","isDisabled","toggle","value","ngOnInit","trueValue","Object","defineProperty","falseValue","writeValue","setDisabledState","registerOnChange","fn","registerOnTouched","Directive","args","selector","providers","Input","HostBinding","type","HostListener","RADIO_CONTROL_VALUE_ACCESSOR","ButtonRadioDirective","el","cdr","renderer","group","role","_hasFocus","_value","_disabled","disabled","undefined","controlOrGroupDisabled","isActive","btnRadio","toggleIfAllowed","canToggle","uncheckable","_onChange","onSpacePressed","event","preventDefault","focus","nativeElement","onFocus","onBlur","markForCheck","setAttribute","removeAttribute","ElementRef","ChangeDetectorRef","Renderer2","ButtonRadioGroupDirective","decorators","Optional","Inject","radioButtons","forEach","buttons","activeRadio","getActiveOrFocusedRadio","firstEnabled","find","r","selectNext","selectInDirection","selectPrevious","direction","buttonRadioDirectives","toArray","currentActiveIndex","indexOf","i","nextIndex","currentIndex","calcIndex","length","button","hasFocus","ContentChildren","ButtonsModule","forRoot","ngModule","NgModule","declarations","exports"],"mappings":"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","sourcesContent":["// tslint:disable:no-use-before-declare\nimport {\n  Directive,\n  forwardRef,\n  HostBinding,\n  HostListener,\n  Input,\n  OnInit,\n  Provider\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n// TODO: config: activeClass - Class to apply to the checked buttons\nexport const CHECKBOX_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(() => ButtonCheckboxDirective),\n  multi: true\n};\n\n/**\n * Add checkbox functionality to any element\n */\n@Directive({\n  selector: '[btnCheckbox]',\n  providers: [CHECKBOX_CONTROL_VALUE_ACCESSOR]\n})\nexport class ButtonCheckboxDirective implements ControlValueAccessor, OnInit {\n  /** Truthy value, will be set to ngModel */\n  @Input() btnCheckboxTrue = true;\n  /** Falsy value, will be set to ngModel */\n  @Input() btnCheckboxFalse = false;\n\n  @HostBinding('class.active')\n  @HostBinding('attr.aria-pressed')\n  state = false;\n\n  protected value: boolean | string;\n  protected isDisabled: boolean;\n\n  protected onChange = Function.prototype;\n  protected onTouched = Function.prototype;\n\n  // view -> model\n  @HostListener('click')\n  onClick(): void {\n    if (this.isDisabled) {\n      return;\n    }\n\n    this.toggle(!this.state);\n    this.onChange(this.value);\n  }\n\n  ngOnInit(): void {\n    this.toggle(this.trueValue === this.value);\n  }\n\n  protected get trueValue(): boolean {\n    return typeof this.btnCheckboxTrue !== 'undefined'\n      ? this.btnCheckboxTrue\n      : true;\n  }\n\n  protected get falseValue(): boolean {\n    return typeof this.btnCheckboxFalse !== 'undefined'\n      ? this.btnCheckboxFalse\n      : false;\n  }\n\n  toggle(state: boolean): void {\n    this.state = state;\n    this.value = this.state ? this.trueValue : this.falseValue;\n  }\n\n  // ControlValueAccessor\n  // model -> view\n  writeValue(value: boolean | string | null): void {\n    this.state = this.trueValue === value;\n    this.value = value ? this.trueValue : this.falseValue;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n  }\n\n  registerOnChange(fn: () => {}): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}): void {\n    this.onTouched = fn;\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  HostBinding,\n  HostListener,\n  Inject,\n  Input,\n  OnInit,\n  Optional,\n  Provider,\n  Renderer2\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ButtonRadioGroupDirective } from './button-radio-group.directive';\n\nexport const RADIO_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(() => ButtonRadioDirective),\n  multi: true\n};\n\n/**\n * Create radio buttons or groups of buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\n@Directive({\n  selector: '[btnRadio]',\n  providers: [RADIO_CONTROL_VALUE_ACCESSOR]\n})\nexport class ButtonRadioDirective implements ControlValueAccessor, OnInit {\n  onChange = Function.prototype;\n  onTouched = Function.prototype;\n\n  /** Radio button value, will be set to `ngModel` */\n  @Input() btnRadio: string;\n  /** If `true` — radio button can be unchecked */\n  @Input() uncheckable: boolean;\n  /** Current value of radio component or group */\n  @Input()\n  get value() {\n    return this.group ? this.group.value : this._value;\n  }\n\n  set value(value: null | string) {\n    if (this.group) {\n      this.group.value = value;\n\n      return;\n    }\n    this._value = value;\n  }\n  /** If `true` — radio button is disabled */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  set disabled(disabled: boolean) {\n    this.setDisabledState(disabled);\n  }\n\n  @HostBinding('attr.aria-disabled')\n  get controlOrGroupDisabled() {\n    return this.disabled || (this.group && this.group.disabled) ? true : undefined;\n  }\n\n  @HostBinding('class.disabled')\n  get hasDisabledClass() {\n    // Although the radio is disabled the active radio should still stand out.\n    // The disabled class will prevent this so don't add it on the active radio\n    return this.controlOrGroupDisabled && !this.isActive;\n  }\n\n  @HostBinding('class.active')\n  @HostBinding('attr.aria-checked')\n  get isActive(): boolean {\n    return this.btnRadio === this.value;\n  }\n\n  @HostBinding('attr.role') readonly role: string = 'radio';\n\n  @HostBinding('attr.tabindex')\n  get tabindex(): undefined | number {\n    if (this.controlOrGroupDisabled) {\n      // Disabled radio buttons should not receive focus\n      return undefined;\n    } else if (this.isActive || this.group == null) {\n      return 0;\n    } else {\n      return -1;\n    }\n  }\n\n  get hasFocus(): boolean {\n    return this._hasFocus;\n  }\n\n  private _value: null | string;\n  private _disabled: boolean;\n  private _hasFocus = false;\n\n  constructor(\n    private el: ElementRef,\n    private cdr: ChangeDetectorRef,\n    private renderer: Renderer2,\n    @Optional()\n    @Inject(forwardRef(() => ButtonRadioGroupDirective))\n    private group: ButtonRadioGroupDirective\n  ) {}\n\n  @HostListener('click')\n  toggleIfAllowed(): void {\n    if (!this.canToggle()) {\n      return;\n    }\n\n    this.value = this.uncheckable && this.btnRadio === this.value ? undefined : this.btnRadio;\n    this._onChange(this.value);\n  }\n\n  @HostListener('keydown.space', ['$event'])\n  onSpacePressed(event: KeyboardEvent) {\n    this.toggleIfAllowed();\n    event.preventDefault();\n  }\n\n  focus() {\n    this.el.nativeElement.focus();\n  }\n\n  @HostListener('focus')\n  onFocus() {\n    this._hasFocus = true;\n  }\n\n  @HostListener('blur')\n  onBlur() {\n    this._hasFocus = false;\n    this.onTouched();\n  }\n\n  canToggle(): boolean {\n    return !this.controlOrGroupDisabled && (this.uncheckable || this.btnRadio !== this.value);\n  }\n\n  ngOnInit(): void {\n    this.uncheckable = typeof this.uncheckable !== 'undefined';\n  }\n\n  _onChange(value: string): void {\n    if (this.group) {\n      this.group.value = value;\n\n      return;\n    }\n    this.onTouched();\n    this.onChange(value);\n  }\n\n  // ControlValueAccessor\n  // model -> view\n  writeValue(value: string): void {\n    this.value = value;\n    this.cdr.markForCheck();\n  }\n\n  registerOnChange(fn: () => {}): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(disabled: boolean): void {\n    this._disabled = disabled;\n    if (disabled) {\n      this.renderer.setAttribute(this.el.nativeElement, 'disabled', 'disabled');\n\n      return;\n    }\n    this.renderer.removeAttribute(this.el.nativeElement, 'disabled');\n  }\n}\n","import {\n  ChangeDetectorRef,\n  ContentChildren,\n  Directive,\n  forwardRef,\n  HostBinding,\n  HostListener,\n  Provider,\n  QueryList\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ButtonRadioDirective } from './button-radio.directive';\n\nexport const RADIO_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(() => ButtonRadioGroupDirective),\n  multi: true\n};\n\n/**\n * A group of radio buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\n@Directive({\n  selector: '[btnRadioGroup]',\n  providers: [RADIO_CONTROL_VALUE_ACCESSOR]\n})\nexport class ButtonRadioGroupDirective implements ControlValueAccessor {\n  onChange = Function.prototype;\n  onTouched = Function.prototype;\n\n  @HostBinding('attr.role') readonly role: string = 'radiogroup';\n\n  @ContentChildren(forwardRef(() => ButtonRadioDirective))\n  radioButtons: QueryList<ButtonRadioDirective>;\n\n  get value() {\n    return this._value;\n  }\n  set value(value: string | null) {\n    this._value = value;\n    this.onChange(value);\n  }\n\n  private _value: string | null;\n\n  private _disabled: boolean;\n\n  @HostBinding('attr.tabindex')\n  get tabindex(): null | number {\n    if (this._disabled) {\n      return null;\n    } else {\n      return 0;\n    }\n  }\n\n  constructor(private cdr: ChangeDetectorRef) {}\n\n  writeValue(value: string | null): void {\n    this._value = value;\n    this.cdr.markForCheck();\n  }\n\n  registerOnChange(fn: () => {}): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(disabled: boolean): void {\n    if (this.radioButtons) {\n      this._disabled = disabled;\n      this.radioButtons.forEach(buttons => {\n        buttons.setDisabledState(disabled);\n      });\n      this.cdr.markForCheck();\n    }\n  }\n\n  @HostListener('focus')\n  onFocus() {\n    if (this._disabled) {\n      return;\n    }\n    const activeRadio = this.getActiveOrFocusedRadio();\n    if (activeRadio) {\n      activeRadio.focus();\n    } else {\n      const firstEnabled = this.radioButtons.find(r => !r.disabled);\n      if (firstEnabled) {\n        firstEnabled.focus();\n      }\n    }\n  }\n\n  @HostListener('blur')\n  onBlur() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  @HostListener('keydown.ArrowRight', ['$event'])\n  @HostListener('keydown.ArrowDown', ['$event'])\n  selectNext(event: KeyboardEvent) {\n    this.selectInDirection('next');\n    event.preventDefault();\n  }\n\n  @HostListener('keydown.ArrowLeft', ['$event'])\n  @HostListener('keydown.ArrowUp', ['$event'])\n  selectPrevious(event: KeyboardEvent) {\n    this.selectInDirection('previous');\n    event.preventDefault();\n  }\n\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  private selectInDirection(direction: 'next' | 'previous') {\n    if (this._disabled) {\n      return;\n    }\n    function nextIndex(currentIndex: number, buttonRadioDirectives: ButtonRadioDirective[]) {\n      const step = direction === 'next' ? 1 : -1;\n      let calcIndex = (currentIndex + step) % buttonRadioDirectives.length;\n      if (calcIndex < 0) {\n        calcIndex = buttonRadioDirectives.length - 1;\n      }\n\n      return calcIndex;\n    }\n    const activeRadio = this.getActiveOrFocusedRadio();\n\n    if (activeRadio) {\n      const buttonRadioDirectives = this.radioButtons.toArray();\n      const currentActiveIndex = buttonRadioDirectives.indexOf(activeRadio);\n      for (\n        let i = nextIndex(currentActiveIndex, buttonRadioDirectives);\n        i !== currentActiveIndex;\n        i = nextIndex(i, buttonRadioDirectives)\n      ) {\n        if (buttonRadioDirectives[i].canToggle()) {\n          buttonRadioDirectives[i].toggleIfAllowed();\n          buttonRadioDirectives[i].focus();\n          break;\n        }\n      }\n    }\n  }\n\n  private getActiveOrFocusedRadio(): ButtonRadioDirective | undefined {\n    return this.radioButtons.find(button => button.isActive) || this.radioButtons.find(button => button.hasFocus);\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { ButtonCheckboxDirective } from './button-checkbox.directive';\nimport { ButtonRadioDirective } from './button-radio.directive';\nimport { ButtonRadioGroupDirective } from './button-radio-group.directive';\n\n@NgModule({\n  declarations: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective],\n  exports: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective]\n})\nexport class ButtonsModule {\n  static forRoot(): ModuleWithProviders<ButtonsModule> {\n    return { ngModule: ButtonsModule, providers: [] };\n  }\n}\n"]}