{"version":3,"sources":["ng://ngx-bootstrap/accordion/accordion.config.ts","ng://ngx-bootstrap/accordion/accordion.component.ts","ng://ngx-bootstrap/accordion/accordion-group.component.ts","ng://ngx-bootstrap/accordion/accordion.module.ts"],"names":["AccordionConfig","this","closeOthers","isAnimated","Injectable","args","providedIn","AccordionComponent","config","groups","Object","assign","prototype","closeOtherPanels","openGroup","forEach","group","isOpen","addGroup","push","removeGroup","index","indexOf","splice","Component","selector","template","host","[attr.aria-multiselectable]","role","class","style","Input","AccordionPanelComponent","accordion","isOpenChange","EventEmitter","_isOpen","defineProperty","value","_this","Promise","resolve","then","emit","catch","error","console","log","isBs3","ngOnInit","panelClass","ngOnDestroy","toggleOpen","isDisabled","decorators","type","Inject","Output","HostBinding","AccordionModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","CollapseModule","declarations","exports"],"mappings":"siBAKA,SAAAA,IAKEC,KAAAC,aAAuB,EAEvBD,KAAAE,YAAsB,6BAPvBC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,+HCiBZ,SAAAC,EAAYC,GANHP,KAAAE,YAAa,EAIZF,KAAAQ,OAAoC,GAG5CC,OAAOC,OAAOV,KAAMO,GA0BxB,OAvBED,EAAAK,UAAAC,iBAAA,SAAiBC,GACVb,KAAKC,aAIVD,KAAKQ,OAAOM,SAAO,SAAEC,GACfA,IAAUF,IACZE,EAAMC,QAAS,OAKrBV,EAAAK,UAAAM,SAAA,SAASF,GACPA,EAAMb,WAAaF,KAAKE,WACxBF,KAAKQ,OAAOU,KAAKH,IAGnBT,EAAAK,UAAAQ,YAAA,SAAYJ,OACJK,EAAQpB,KAAKQ,OAAOa,QAAQN,IACnB,IAAXK,GACFpB,KAAKQ,OAAOc,OAAOF,EAAO,wBA1C/BG,EAAAA,UAASnB,KAAA,CAAC,CACToB,SAAU,YACVC,SAAU,4BACVC,KAAM,CACJC,8BAA+B,cAC/BC,KAAM,UACNC,MAAO,cACPC,MAAO,+DAVF/B,yCAeNgC,EAAAA,2BAEAA,EAAAA,SA+BHzB,sBCkBE,SAAA0B,EAAwCC,GA7CxCjC,KAAAE,YAAa,EAYHF,KAAAkC,aAAsC,IAAIC,EAAAA,aA8B1CnC,KAAAoC,SAAU,EAIlBpC,KAAKiC,UAAYA,EAiBrB,OA/CExB,OAAA4B,eAEIL,EAAArB,UAAA,SAAM,KAFV,WAGE,OAAOX,KAAKoC,aAGd,SAAWE,GAAX,IAAAC,EAAAvC,KACMsC,IAAUtC,KAAKgB,SACbsB,GACFtC,KAAKiC,UAAUrB,iBAAiBZ,MAElCA,KAAKoC,QAAUE,EACfE,QAAQC,QAAQ,MAAMC,MAAI,WACxBH,EAAKL,aAAaS,KAAKL,MAEtBM,OAAK,SAAEC,GAENC,QAAQC,IAAIF,wCAKpBpC,OAAA4B,eAAIL,EAAArB,UAAA,QAAK,KAAT,WACE,OAAOqC,EAAAA,yCAUThB,EAAArB,UAAAsC,SAAA,WACEjD,KAAKkD,WAAalD,KAAKkD,YAAc,gBACrClD,KAAKiC,UAAUhB,SAASjB,OAG1BgC,EAAArB,UAAAwC,YAAA,WACEnD,KAAKiC,UAAUd,YAAYnB,OAG7BgC,EAAArB,UAAAyC,WAAA,WACOpD,KAAKqD,aACRrD,KAAKgB,QAAUhB,KAAKgB,6BAvEzBO,EAAAA,UAASnB,KAAA,CAAC,CACToB,SAAU,mCACVC,SAAA,oyBACAC,KAAM,CACJG,MAAO,QACPC,MAAO,+MAbFxB,EAAkBgD,WAAA,CAAA,CAAAC,KAgEZC,EAAAA,OAAMpD,KAAA,CAACE,yCA3CnByB,EAAAA,0BAMAA,EAAAA,0BAEAA,EAAAA,4BAEA0B,EAAAA,uBAIAC,EAAAA,YAAWtD,KAAA,CAAC,qBAAkB,CAAAmD,KAC9BxB,EAAAA,SA8CHC,sBC9EA,SAAA2B,KASA,OAHSA,EAAAC,QAAP,WACE,MAAO,CAAEC,SAAUF,EAAiBG,UAAW,yBAPlDC,EAAAA,SAAQ3D,KAAA,CAAC,CACR4D,QAAS,CAACC,EAAAA,aAAcC,EAAAA,gBACxBC,aAAc,CAAC7D,EAAoB0B,GACnCoC,QAAS,CAAC9D,EAAoB0B,OAMhC2B","sourcesContent":["import { Injectable } from '@angular/core';\n\n/**\n * Configuration service, provides default values for the AccordionComponent.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccordionConfig {\n  /** Whether the other panels should be closed when a panel is opened */\n  closeOthers: Boolean = false;\n  /** turn on/off animation */\n  isAnimated: Boolean = false;\n}\n","import { Component, Input } from '@angular/core';\nimport { AccordionPanelComponent } from './accordion-group.component';\nimport { AccordionConfig } from './accordion.config';\n\n/** Displays collapsible content panels for presenting information in a limited amount of space. */\n@Component({\n  selector: 'accordion',\n  template: `<ng-content></ng-content>`,\n  host: {\n    '[attr.aria-multiselectable]': 'closeOthers',\n    role: 'tablist',\n    class: 'panel-group',\n    style: 'display: block'\n  }\n})\nexport class AccordionComponent {\n  /** turn on/off animation */\n  @Input() isAnimated = false;\n  /** if `true` expanding one item will close all others */\n  @Input() closeOthers: boolean;\n\n  protected groups: AccordionPanelComponent[] = [];\n\n  constructor(config: AccordionConfig) {\n    Object.assign(this, config);\n  }\n\n  closeOtherPanels(openGroup: AccordionPanelComponent): void {\n    if (!this.closeOthers) {\n      return;\n    }\n\n    this.groups.forEach((group: AccordionPanelComponent) => {\n      if (group !== openGroup) {\n        group.isOpen = false;\n      }\n    });\n  }\n\n  addGroup(group: AccordionPanelComponent): void {\n    group.isAnimated = this.isAnimated;\n    this.groups.push(group);\n  }\n\n  removeGroup(group: AccordionPanelComponent): void {\n    const index = this.groups.indexOf(group);\n    if (index !== -1) {\n      this.groups.splice(index, 1);\n    }\n  }\n}\n","import {\n  Component, HostBinding, Inject, Input, OnDestroy, OnInit, Output, EventEmitter\n} from '@angular/core';\nimport { isBs3 } from 'ngx-bootstrap/utils';\nimport { AccordionComponent } from './accordion.component';\n\n/**\n * ### Accordion heading\n * Instead of using `heading` attribute on the `accordion-group`, you can use\n * an `accordion-heading` attribute on `any` element inside of a group that\n * will be used as group's header template.\n */\n@Component({\n  selector: 'accordion-group, accordion-panel',\n  templateUrl: './accordion-group.component.html',\n  host: {\n    class: 'panel',\n    style: 'display: block'\n  },\n  styleUrls: ['./accordion.scss']\n})\nexport class AccordionPanelComponent implements OnInit, OnDestroy {\n  /** turn on/off animation */\n  isAnimated = false;\n  /** Clickable text in accordion's group header, check `accordion heading` below for using html in header */\n  @Input() heading: string;\n  /** Provides an ability to use Bootstrap's contextual panel classes\n   * (`panel-primary`, `panel-success`, `panel-info`, etc...).\n   * List of all available classes [available here]\n   * (https://getbootstrap.com/docs/3.3/components/#panels-alternatives)\n   */\n  @Input() panelClass: string;\n  /** if <code>true</code> â€” disables accordion group */\n  @Input() isDisabled: boolean;\n  /** Emits when the opened state changes */\n  @Output() isOpenChange: EventEmitter<boolean> = new EventEmitter();\n\n  // Questionable, maybe .panel-open should be on child div.panel element?\n  /** Is accordion group open or closed. This property supports two-way binding */\n  @HostBinding('class.panel-open')\n  @Input()\n  get isOpen(): boolean {\n    return this._isOpen;\n  }\n\n  set isOpen(value: boolean) {\n    if (value !== this.isOpen) {\n      if (value) {\n        this.accordion.closeOtherPanels(this);\n      }\n      this._isOpen = value;\n      Promise.resolve(null).then(() => {\n        this.isOpenChange.emit(value);\n      })\n        .catch((error: Error) => {\n          /* tslint:disable: no-console */\n          console.log(error);\n        });\n    }\n  }\n\n  get isBs3(): boolean {\n    return isBs3();\n  }\n\n  protected _isOpen = false;\n  protected accordion: AccordionComponent;\n\n  constructor(@Inject(AccordionComponent) accordion: AccordionComponent) {\n    this.accordion = accordion;\n  }\n\n  ngOnInit(): void {\n    this.panelClass = this.panelClass || 'panel-default';\n    this.accordion.addGroup(this);\n  }\n\n  ngOnDestroy(): void {\n    this.accordion.removeGroup(this);\n  }\n\n  toggleOpen(): void {\n    if (!this.isDisabled) {\n      this.isOpen = !this.isOpen;\n    }\n  }\n}\n","/* tslint:disable: max-classes-per-file */\nimport { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { AccordionComponent } from './accordion.component';\nimport { AccordionPanelComponent } from './accordion-group.component';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\n\n@NgModule({\n  imports: [CommonModule, CollapseModule],\n  declarations: [AccordionComponent, AccordionPanelComponent],\n  exports: [AccordionComponent, AccordionPanelComponent]\n})\nexport class AccordionModule {\n  static forRoot(): ModuleWithProviders<AccordionModule> {\n    return { ngModule: AccordionModule, providers: [] };\n  }\n}\n"]}