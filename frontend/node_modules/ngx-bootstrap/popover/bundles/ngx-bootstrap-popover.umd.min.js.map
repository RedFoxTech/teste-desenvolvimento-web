{"version":3,"sources":["ng://ngx-bootstrap/popover/popover.config.ts","ng://ngx-bootstrap/popover/popover-container.component.ts","ng://ngx-bootstrap/popover/popover.directive.ts","ng://ngx-bootstrap/popover/popover.module.ts"],"names":["PopoverConfig","this","adaptivePosition","placement","triggers","outsideClick","delay","Injectable","args","providedIn","PopoverContainerComponent","config","Object","assign","defineProperty","prototype","isBs3","Component","selector","changeDetection","ChangeDetectionStrategy","OnPush","host","[attr.id]","[class]","[class.show]","[class.bs3]","role","style","template","Input","id","PopoverDirective","_config","_elementRef","_renderer","_viewContainerRef","cis","_positionService","popoverId","containerClass","_isInited","_popover","createLoader","provide","useValue","onShown","onHidden","window","nativeElement","addEventListener","focus","err","isShown","value","show","hide","setAriaDescribedBy","_ariaDescribedby","isOpen","instance","setAttribute","removeAttribute","_this","popover","_delayTimeoutId","setOptions","modifiers","flip","enabled","preventOverflow","showPopover","undefined","attach","to","container","position","attachment","content","context","popoverContext","title","popoverTitle","calcPosition","deletePositionElement","_componentRef","location","cancelDelayedTooltipShowing","_popoverCancelShowFn","_timer_1","timer","subscribe","parseTriggers","forEach","trigger","listen","close","unsubscribe","clearTimeout","toggle","ngOnInit","ngOnDestroy","dispose","Directive","exportAs","ElementRef","Renderer2","ViewContainerRef","ComponentLoaderFactory","PositioningService","Output","PopoverModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","declarations","exports","entryComponents"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n/**\n * Configuration service for the Popover directive.\n * You can inject this service, typically in your root component, and customize\n * the values of its properties in order to provide default values for all the\n * popovers used in the application.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class PopoverConfig {\n  /** sets disable adaptive position */\n  adaptivePosition = true;\n  /**\n   * Placement of a popover. Accepts: \"top\", \"bottom\", \"left\", \"right\", \"auto\"\n   */\n  placement = 'top';\n  /**\n   * Specifies events that should trigger. Supports a space separated list of\n   * event names.\n   */\n  triggers = 'click';\n\n  outsideClick = false;\n  /**\n   * A selector specifying the element the popover should be appended to.\n   */\n  container: string;\n  /** delay before showing the tooltip */\n  delay = 0;\n}\n","import { ChangeDetectionStrategy, Input, Component } from '@angular/core';\nimport { PopoverConfig } from './popover.config';\nimport { isBs3 } from 'ngx-bootstrap/utils';\n\n@Component({\n  selector: 'popover-container',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  // tslint:disable-next-line\n  host: {\n    '[attr.id]': 'popoverId',\n    '[class]':\n      '\"popover in popover-\" + placement + \" \" + \"bs-popover-\" + placement + \" \" + placement + \" \" + containerClass',\n    '[class.show]': '!isBs3',\n    '[class.bs3]': 'isBs3',\n    role: 'tooltip',\n    style: 'display:block;'\n  },\n  styles: [\n    `\n    :host.bs3.popover-top {\n      margin-bottom: 10px;\n    }\n    :host.bs3.popover.top>.arrow {\n      margin-left: -2px;\n    }\n    :host.bs3.popover.top {\n      margin-bottom: 10px;\n    }\n    :host.popover.bottom>.arrow {\n      margin-left: -4px;\n    }\n    :host.bs3.bs-popover-left {\n      margin-right: .5rem;\n    }\n    :host.bs3.bs-popover-right .arrow, :host.bs3.bs-popover-left .arrow{\n      margin: .3rem 0;\n    }\n    `\n  ],\n  templateUrl: './popover-container.component.html'\n})\nexport class PopoverContainerComponent {\n  @Input() placement: string;\n  @Input() title: string;\n  containerClass: string;\n  popoverId: string;\n\n  get isBs3(): boolean {\n    return isBs3();\n  }\n\n  constructor(config: PopoverConfig) {\n    Object.assign(this, config);\n  }\n}\n","import {\n  Directive, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output,\n  Renderer2, TemplateRef, ViewContainerRef\n} from '@angular/core';\nimport { PopoverConfig } from './popover.config';\nimport { ComponentLoader, ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\nimport { PopoverContainerComponent } from './popover-container.component';\nimport { PositioningService } from 'ngx-bootstrap/positioning';\nimport { timer } from 'rxjs';\nimport { parseTriggers, Trigger } from 'ngx-bootstrap/utils';\n\nlet id = 0;\n\n/**\n * A lightweight, extensible directive for fancy popover creation.\n */\n@Directive({selector: '[popover]', exportAs: 'bs-popover'})\nexport class PopoverDirective implements OnInit, OnDestroy {\n  /** unique id popover - use for aria-describedby */\n  popoverId = id++;\n  /** sets disable adaptive position */\n  @Input() adaptivePosition: boolean;\n  /**\n   * Content to be displayed as popover.\n   */\n  /* tslint:disable-next-line: no-any */\n  @Input() popover: string | TemplateRef<any>;\n  /**\n   * Context to be used if popover is a template.\n   */\n  /* tslint:disable-next-line: no-any */\n  @Input() popoverContext: any;\n  /**\n   * Title of a popover.\n   */\n  @Input() popoverTitle: string;\n  /**\n   * Placement of a popover. Accepts: \"top\", \"bottom\", \"left\", \"right\"\n   */\n  @Input() placement: 'top' | 'bottom' | 'left' | 'right' | 'auto' | 'top left' | 'top right' |\n    'right top' | 'right bottom' | 'bottom right' | 'bottom left' | 'left bottom' | 'left top';\n  /**\n   * Close popover on outside click\n   */\n  @Input() outsideClick = false;\n  /**\n   * Specifies events that should trigger. Supports a space separated list of\n   * event names.\n   */\n  @Input() triggers: string;\n  /**\n   * A selector specifying the element the popover should be appended to.\n   */\n  @Input() container: string;\n\n  /**\n   * Css class for popover container\n   */\n  @Input() containerClass = '';\n\n  /**\n   * Returns whether or not the popover is currently being shown\n   */\n  @Input()\n  get isOpen(): boolean {\n    return this._popover.isShown;\n  }\n\n  set isOpen(value: boolean) {\n    if (value) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n\n  /**\n   * Delay before showing the tooltip\n   */\n  @Input() delay: number;\n\n  /**\n   * Emits an event when the popover is shown\n   */\n  /* tslint:disable-next-line: no-any */\n  @Output() onShown: EventEmitter<any>;\n  /**\n   * Emits an event when the popover is hidden\n   */\n  /* tslint:disable-next-line: no-any */\n  @Output() onHidden: EventEmitter<any>;\n\n  protected _popoverCancelShowFn: Function;\n\n  protected _delayTimeoutId: number | any;\n\n  private _popover: ComponentLoader<PopoverContainerComponent>;\n  private _isInited = false;\n  private _ariaDescribedby: string;\n\n  constructor(\n    _config: PopoverConfig,\n    private _elementRef: ElementRef,\n    private _renderer: Renderer2,\n    _viewContainerRef: ViewContainerRef,\n    cis: ComponentLoaderFactory,\n    private _positionService: PositioningService\n  ) {\n    this._popover = cis\n      .createLoader<PopoverContainerComponent>(\n        _elementRef,\n        _viewContainerRef,\n        _renderer\n      )\n      .provide({provide: PopoverConfig, useValue: _config});\n\n    Object.assign(this, _config);\n\n    this.onShown = this._popover.onShown;\n    this.onHidden = this._popover.onHidden;\n\n    // fix: no focus on button on Mac OS #1795\n    if (typeof window !== 'undefined') {\n      _elementRef.nativeElement.addEventListener('click', function () {\n        try {\n          _elementRef.nativeElement.focus();\n        } catch (err) {\n          return;\n        }\n      });\n    }\n  }\n\n  /**\n   * Set attribute aria-describedBy for element directive and\n   * set id for the popover\n   */\n  setAriaDescribedBy(): void {\n    this._ariaDescribedby = this.isOpen ? `ngx-popover-${this.popoverId}` : null;\n    if (this._ariaDescribedby) {\n      this._popover.instance.popoverId = this._ariaDescribedby;\n      this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-describedby', this._ariaDescribedby);\n    } else {\n      this._renderer.removeAttribute(this._elementRef.nativeElement, 'aria-describedby');\n    }\n  }\n\n  /**\n   * Opens an element’s popover. This is considered a “manual” triggering of\n   * the popover.\n   */\n  show(): void {\n    if (this._popover.isShown || !this.popover || this._delayTimeoutId) {\n      return;\n    }\n\n    this._positionService.setOptions({\n      modifiers: {\n        flip: {\n          enabled: this.adaptivePosition\n        },\n        preventOverflow: {\n          enabled: this.adaptivePosition\n        }\n      }\n    });\n\n    const showPopover = () => {\n      if (this._delayTimeoutId) {\n        this._delayTimeoutId = undefined;\n      }\n\n      this._popover\n        .attach(PopoverContainerComponent)\n        .to(this.container)\n        .position({attachment: this.placement})\n        .show({\n          content: this.popover,\n          context: this.popoverContext,\n          placement: this.placement,\n          title: this.popoverTitle,\n          containerClass: this.containerClass\n        });\n\n      if (!this.adaptivePosition) {\n        this._positionService.calcPosition();\n        this._positionService.deletePositionElement(this._popover._componentRef.location);\n      }\n\n      this.isOpen = true;\n      this.setAriaDescribedBy();\n    };\n\n    const cancelDelayedTooltipShowing = () => {\n      if (this._popoverCancelShowFn) {\n        this._popoverCancelShowFn();\n      }\n    };\n\n    if (this.delay) {\n      const _timer = timer(this.delay).subscribe(() => {\n        showPopover();\n        cancelDelayedTooltipShowing();\n      });\n\n      if (this.triggers) {\n        parseTriggers(this.triggers)\n          .forEach((trigger: Trigger) => {\n            this._popoverCancelShowFn = this._renderer.listen(\n              this._elementRef.nativeElement,\n              trigger.close,\n              () => {\n                _timer.unsubscribe();\n                cancelDelayedTooltipShowing();\n              }\n            );\n          });\n      }\n    } else {\n      showPopover();\n    }\n  }\n\n  /**\n   * Closes an element’s popover. This is considered a “manual” triggering of\n   * the popover.\n   */\n  hide(): void {\n    if (this._delayTimeoutId) {\n      clearTimeout(this._delayTimeoutId);\n      this._delayTimeoutId = undefined;\n    }\n\n    if (this.isOpen) {\n      this._popover.hide();\n      this.setAriaDescribedBy();\n      this.isOpen = false;\n    }\n  }\n\n  /**\n   * Toggles an element’s popover. This is considered a “manual” triggering of\n   * the popover.\n   */\n  toggle(): void {\n    if (this.isOpen) {\n      return this.hide();\n    }\n\n    this.show();\n  }\n\n  ngOnInit(): void {\n    // fix: seems there are an issue with `routerLinkActive`\n    // which result in duplicated call ngOnInit without call to ngOnDestroy\n    // read more: https://github.com/valor-software/ngx-bootstrap/issues/1885\n    if (this._isInited) {\n      return;\n    }\n    this._isInited = true;\n\n    this._popover.listen({\n      triggers: this.triggers,\n      outsideClick: this.outsideClick,\n      show: () => this.show(),\n      hide: () => this.hide()\n    });\n  }\n\n  ngOnDestroy(): void {\n    this._popover.dispose();\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\nimport { PositioningService } from 'ngx-bootstrap/positioning';\nimport { PopoverDirective } from './popover.directive';\nimport { PopoverContainerComponent } from './popover-container.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PopoverDirective, PopoverContainerComponent],\n  exports: [PopoverDirective],\n  entryComponents: [PopoverContainerComponent]\n})\nexport class PopoverModule {\n  static forRoot(): ModuleWithProviders<PopoverModule> {\n    return {\n      ngModule: PopoverModule,\n      providers: [ComponentLoaderFactory, PositioningService]\n    };\n  }\n}\n"]}