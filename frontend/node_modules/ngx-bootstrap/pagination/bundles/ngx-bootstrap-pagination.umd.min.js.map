{"version":3,"sources":["ng://ngx-bootstrap/pagination/pagination.config.ts","ng://ngx-bootstrap/pagination/pager.component.ts","ng://ngx-bootstrap/pagination/pagination.component.ts","ng://ngx-bootstrap/pagination/pagination.module.ts"],"names":["PaginationConfig","this","main","maxSize","itemsPerPage","boundaryLinks","directionLinks","firstText","previousText","nextText","lastText","pageBtnClass","rotate","pager","align","Injectable","args","providedIn","PAGER_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","PagerComponent","multi","elementRef","paginationConfig","changeDetection","numPages","EventEmitter","pageChanged","onChange","Function","prototype","onTouched","inited","_page","config","configureOptions","Object","assign","defineProperty","_itemsPerPage","v","totalPages","calculateTotalPages","_totalItems","_totalPages","emit","selectPage","page","value","_previous","markForCheck","ngOnInit","window","classMap","nativeElement","getAttribute","pages","getPages","writeValue","getText","key","noPrevious","noNext","registerOnChange","fn","registerOnTouched","event","preventDefault","disabled","target","blur","makePage","num","text","active","number","currentPage","startPage","endPage","isMaxSized","Math","max","floor","ceil","min","toString","push","previousPageSet","unshift","nextPageSet","totalItems","Component","selector","template","providers","ElementRef","ChangeDetectorRef","Input","Output","PAGINATION_CONTROL_VALUE_ACCESSOR","PaginationComponent","PaginationModule","forRoot","ngModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["// todo: split\nimport { Injectable } from '@angular/core';\n\nimport { ConfigModel, PagerModel } from './models';\n\n/** Provides default values for Pagination and pager components */\n@Injectable({\n  providedIn: 'root'\n})\nexport class PaginationConfig {\n  main: ConfigModel = {\n    maxSize: void 0,\n    itemsPerPage: 10,\n    boundaryLinks: false,\n    directionLinks: true,\n    firstText: 'First',\n    previousText: 'Previous',\n    nextText: 'Next',\n    lastText: 'Last',\n    pageBtnClass: '',\n    rotate: true\n  };\n  pager: PagerModel = {\n    itemsPerPage: 15,\n    previousText: '« Previous',\n    nextText: 'Next »',\n    pageBtnClass: '',\n    align: true\n  };\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnInit,\n  Output,\n  Provider\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { PageChangedEvent } from './pagination.component';\nimport { PaginationConfig } from './pagination.config';\n\nimport { ConfigModel, PagesModel } from './models';\n\nexport const PAGER_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(() => PagerComponent),\n  multi: true\n};\n\n@Component({\n  selector: 'pager',\n  templateUrl: './pager.component.html',\n  providers: [PAGER_CONTROL_VALUE_ACCESSOR]\n})\nexport class PagerComponent implements ControlValueAccessor, OnInit {\n  config: ConfigModel;\n  /** if `true` aligns each link to the sides of pager */\n  @Input() align: boolean;\n  /** limit number for page links in pager */\n  @Input() maxSize: number;\n  /** if false first and last buttons will be hidden */\n  @Input() boundaryLinks: boolean;\n  /** if false previous and next buttons will be hidden */\n  @Input() directionLinks: boolean;\n  // labels\n  /** first button text */\n  @Input() firstText: string;\n  /** previous button text */\n  @Input() previousText: string;\n  /** next button text */\n  @Input() nextText: string;\n  /** last button text */\n  @Input() lastText: string;\n  /** if true current page will in the middle of pages list */\n  @Input() rotate: boolean;\n  // css\n  /** add class to <code><li\\></code> */\n  @Input() pageBtnClass: string;\n\n  /** if true pagination component will be disabled */\n  @Input() disabled: boolean;\n\n  /** fired when total pages count changes, $event:number equals to total pages count */\n  @Output() numPages: EventEmitter<number> = new EventEmitter<number>();\n  /** fired when page was changed, $event:{page, itemsPerPage} equals to\n   * object with current page index and number of items per page\n   */\n  @Output()\n  pageChanged: EventEmitter<PageChangedEvent> = new EventEmitter<PageChangedEvent>();\n\n  /** maximum number of items per page. If value less than 1 will display all items on one page */\n  @Input()\n  get itemsPerPage(): number {\n    return this._itemsPerPage;\n  }\n\n  set itemsPerPage(v: number) {\n    this._itemsPerPage = v;\n    this.totalPages = this.calculateTotalPages();\n  }\n\n  /** total number of items in all pages */\n  @Input()\n  get totalItems(): number {\n    return this._totalItems;\n  }\n\n  set totalItems(v: number) {\n    this._totalItems = v;\n    this.totalPages = this.calculateTotalPages();\n  }\n\n  get totalPages(): number {\n    return this._totalPages;\n  }\n\n  set totalPages(v: number) {\n    this._totalPages = v;\n    this.numPages.emit(v);\n    if (this.inited) {\n      this.selectPage(this.page);\n    }\n  }\n\n  set page(value: number) {\n    const _previous = this._page;\n    this._page = value > this.totalPages ? this.totalPages : value || 1;\n    this.changeDetection.markForCheck();\n\n    if (_previous === this._page || typeof _previous === 'undefined') {\n      return;\n    }\n\n    this.pageChanged.emit({\n      page: this._page,\n      itemsPerPage: this.itemsPerPage\n    });\n  }\n\n  get page(): number {\n    return this._page;\n  }\n\n  onChange = Function.prototype;\n  onTouched = Function.prototype;\n\n  classMap: string;\n  pages: PagesModel[];\n\n  protected _itemsPerPage: number;\n  protected _totalItems: number;\n  protected _totalPages: number;\n  protected inited = false;\n  protected _page = 1;\n\n  constructor(private elementRef: ElementRef,\n              paginationConfig: PaginationConfig,\n              private changeDetection: ChangeDetectorRef) {\n    this.elementRef = elementRef;\n    if (!this.config) {\n      this.configureOptions(\n        Object.assign({}, paginationConfig.main, paginationConfig.pager)\n      );\n    }\n  }\n\n  configureOptions(config: ConfigModel): void {\n    this.config = Object.assign({}, config);\n  }\n\n  ngOnInit(): void {\n    if (typeof window !== 'undefined') {\n      this.classMap = this.elementRef.nativeElement.getAttribute('class') || '';\n    }\n    // watch for maxSize\n    this.maxSize =\n      typeof this.maxSize !== 'undefined' ? this.maxSize : this.config.maxSize;\n    this.rotate =\n      typeof this.rotate !== 'undefined' ? this.rotate : this.config.rotate;\n    this.boundaryLinks =\n      typeof this.boundaryLinks !== 'undefined'\n        ? this.boundaryLinks\n        : this.config.boundaryLinks;\n    this.directionLinks =\n      typeof this.directionLinks !== 'undefined'\n        ? this.directionLinks\n        : this.config.directionLinks;\n    this.pageBtnClass =\n      typeof this.pageBtnClass !== 'undefined'\n        ? this.pageBtnClass\n        : this.config.pageBtnClass;\n\n    // base class\n    this.itemsPerPage =\n      typeof this.itemsPerPage !== 'undefined'\n        ? this.itemsPerPage\n        : this.config.itemsPerPage;\n    this.totalPages = this.calculateTotalPages();\n    // this class\n    this.pages = this.getPages(this.page, this.totalPages);\n    this.inited = true;\n  }\n\n  writeValue(value: number): void {\n    this.page = value;\n    this.pages = this.getPages(this.page, this.totalPages);\n  }\n\n  getText(key: string): string {\n    // tslint:disable-next-line:no-any\n    return (this as any)[`${key}Text`] || (this as any).config[`${key}Text`];\n  }\n\n  noPrevious(): boolean {\n    return this.page === 1;\n  }\n\n  noNext(): boolean {\n    return this.page === this.totalPages;\n  }\n\n  registerOnChange(fn: () => {}): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}): void {\n    this.onTouched = fn;\n  }\n\n  selectPage(page: number, event?: Event): void {\n    if (event) {\n      event.preventDefault();\n    }\n\n    if (!this.disabled) {\n      if (event && event.target) {\n        // tslint:disable-next-line:no-any\n        const target: any = event.target;\n        target.blur();\n      }\n      this.writeValue(page);\n      this.onChange(this.page);\n    }\n  }\n\n  // Create page object used in template\n  protected makePage(num: number,\n                     text: string,\n                     active: boolean): { number: number; text: string; active: boolean } {\n    return {text, number: num, active};\n  }\n\n  protected getPages(currentPage: number, totalPages: number): PagesModel[] {\n    const pages: PagesModel[] = [];\n\n    // Default page limits\n    let startPage = 1;\n    let endPage = totalPages;\n    const isMaxSized =\n      typeof this.maxSize !== 'undefined' && this.maxSize < totalPages;\n\n    // recompute if maxSize\n    if (isMaxSized) {\n      if (this.rotate) {\n        // Current page is displayed in the middle of the visible ones\n        startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);\n        endPage = startPage + this.maxSize - 1;\n\n        // Adjust if limit is exceeded\n        if (endPage > totalPages) {\n          endPage = totalPages;\n          startPage = endPage - this.maxSize + 1;\n        }\n      } else {\n        // Visible pages are paginated with maxSize\n        startPage =\n          (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;\n\n        // Adjust last page if limit is exceeded\n        endPage = Math.min(startPage + this.maxSize - 1, totalPages);\n      }\n    }\n\n    // Add page number links\n    for (let num = startPage; num <= endPage; num++) {\n      const page = this.makePage(num, num.toString(), num === currentPage);\n      pages.push(page);\n    }\n\n    // Add links to move between page sets\n    if (isMaxSized && !this.rotate) {\n      if (startPage > 1) {\n        const previousPageSet = this.makePage(startPage - 1, '...', false);\n        pages.unshift(previousPageSet);\n      }\n\n      if (endPage < totalPages) {\n        const nextPageSet = this.makePage(endPage + 1, '...', false);\n        pages.push(nextPageSet);\n      }\n    }\n\n    return pages;\n  }\n\n  // base class\n  protected calculateTotalPages(): number {\n    const totalPages =\n      this.itemsPerPage < 1\n        ? 1\n        : Math.ceil(this.totalItems / this.itemsPerPage);\n\n    return Math.max(totalPages || 0, 1);\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnInit,\n  Output,\n  Provider, TemplateRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { PaginationConfig } from './pagination.config';\nimport { ConfigModel, PagesModel, PaginationLinkContext, PaginationNumberLinkContext } from './models';\n\nexport interface PageChangedEvent {\n  itemsPerPage: number;\n  page: number;\n}\n\nexport const PAGINATION_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(() => PaginationComponent),\n  multi: true\n};\n\n@Component({\n  selector: 'pagination',\n  templateUrl: './pagination.component.html',\n  providers: [PAGINATION_CONTROL_VALUE_ACCESSOR]\n})\nexport class PaginationComponent implements ControlValueAccessor, OnInit {\n  config: ConfigModel;\n  /** if `true` aligns each link to the sides of pager */\n  @Input() align: boolean;\n  /** limit number for page links in pager */\n  @Input() maxSize: number;\n  /** if false first and last buttons will be hidden */\n  @Input() boundaryLinks: boolean;\n  /** if false previous and next buttons will be hidden */\n  @Input() directionLinks: boolean;\n  // labels\n  /** first button text */\n  @Input() firstText: string;\n  /** previous button text */\n  @Input() previousText: string;\n  /** next button text */\n  @Input() nextText: string;\n  /** last button text */\n  @Input() lastText: string;\n  /** if true current page will in the middle of pages list */\n  @Input() rotate: boolean;\n  // css\n  /** add class to <code><li\\></code> */\n  @Input() pageBtnClass: string;\n  /** if true pagination component will be disabled */\n  @Input() disabled: boolean;\n  /** custom template for page link */\n  @Input() customPageTemplate: TemplateRef<PaginationNumberLinkContext>;\n  /** custom template for next link */\n  @Input() customNextTemplate: TemplateRef<PaginationLinkContext>;\n  /** custom template for previous link */\n  @Input() customPreviousTemplate: TemplateRef<PaginationLinkContext>;\n  /** custom template for first link */\n  @Input() customFirstTemplate: TemplateRef<PaginationLinkContext>;\n  /** custom template for last link */\n  @Input() customLastTemplate: TemplateRef<PaginationLinkContext>;\n\n  /** fired when total pages count changes, $event:number equals to total pages count */\n  @Output() numPages: EventEmitter<number> = new EventEmitter<number>();\n  /** fired when page was changed, $event:{page, itemsPerPage} equals to object\n   * with current page index and number of items per page\n   */\n  @Output()\n  pageChanged = new EventEmitter<PageChangedEvent>();\n\n  /** maximum number of items per page. If value less than 1 will display all items on one page */\n  @Input()\n  get itemsPerPage(): number {\n    return this._itemsPerPage;\n  }\n\n  set itemsPerPage(v: number) {\n    this._itemsPerPage = v;\n    this.totalPages = this.calculateTotalPages();\n  }\n\n  /** total number of items in all pages */\n  @Input()\n  get totalItems(): number {\n    return this._totalItems;\n  }\n\n  set totalItems(v: number) {\n    this._totalItems = v;\n    this.totalPages = this.calculateTotalPages();\n  }\n\n  get totalPages(): number {\n    return this._totalPages;\n  }\n\n  set totalPages(v: number) {\n    this._totalPages = v;\n    this.numPages.emit(v);\n    if (this.inited) {\n      this.selectPage(this.page);\n    }\n  }\n\n  set page(value: number) {\n    const _previous = this._page;\n    this._page = value > this.totalPages ? this.totalPages : value || 1;\n    this.changeDetection.markForCheck();\n\n    if (_previous === this._page || typeof _previous === 'undefined') {\n      return;\n    }\n\n    this.pageChanged.emit({\n      page: this._page,\n      itemsPerPage: this.itemsPerPage\n    });\n  }\n\n  get page(): number {\n    return this._page;\n  }\n\n  onChange = Function.prototype;\n  onTouched = Function.prototype;\n\n  classMap: string;\n  pages: PagesModel[];\n\n  protected _itemsPerPage: number;\n  protected _totalItems: number;\n  protected _totalPages: number;\n  protected inited = false;\n  protected _page = 1;\n\n  constructor(\n    private elementRef: ElementRef,\n    paginationConfig: PaginationConfig,\n    private changeDetection: ChangeDetectorRef\n  ) {\n    this.elementRef = elementRef;\n    if (!this.config) {\n      this.configureOptions(paginationConfig.main);\n    }\n  }\n\n  configureOptions(config: ConfigModel): void {\n    this.config = Object.assign({}, config);\n  }\n\n  ngOnInit(): void {\n    if (typeof window !== 'undefined') {\n      this.classMap = this.elementRef.nativeElement.getAttribute('class') || '';\n    }\n    // watch for maxSize\n    this.maxSize =\n      typeof this.maxSize !== 'undefined' ? this.maxSize : this.config.maxSize;\n    this.rotate =\n      typeof this.rotate !== 'undefined' ? this.rotate : this.config.rotate;\n    this.boundaryLinks =\n      typeof this.boundaryLinks !== 'undefined'\n        ? this.boundaryLinks\n        : this.config.boundaryLinks;\n    this.directionLinks =\n      typeof this.directionLinks !== 'undefined'\n        ? this.directionLinks\n        : this.config.directionLinks;\n    this.pageBtnClass =\n      typeof this.pageBtnClass !== 'undefined'\n        ? this.pageBtnClass\n        : this.config.pageBtnClass;\n\n    // base class\n    this.itemsPerPage =\n      typeof this.itemsPerPage !== 'undefined'\n        ? this.itemsPerPage\n        : this.config.itemsPerPage;\n    this.totalPages = this.calculateTotalPages();\n    // this class\n    this.pages = this.getPages(this.page, this.totalPages);\n    this.inited = true;\n  }\n\n  writeValue(value: number): void {\n    this.page = value;\n    this.pages = this.getPages(this.page, this.totalPages);\n  }\n\n  getText(key: string): string {\n    // tslint:disable-next-line:no-any\n    return (this as any)[`${key}Text`] || (this as any).config[`${key}Text`];\n  }\n\n  noPrevious(): boolean {\n    return this.page === 1;\n  }\n\n  noNext(): boolean {\n    return this.page === this.totalPages;\n  }\n\n  registerOnChange(fn: () => {}): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}): void {\n    this.onTouched = fn;\n  }\n\n  selectPage(page: number, event?: Event): void {\n    if (event) {\n      event.preventDefault();\n    }\n\n    if (!this.disabled) {\n      if (event && event.target) {\n        // tslint:disable-next-line:no-any\n        const target: any = event.target;\n        target.blur();\n      }\n      this.writeValue(page);\n      this.onChange(this.page);\n    }\n  }\n\n  // Create page object used in template\n  protected makePage(\n    num: number,\n    text: string,\n    active: boolean\n  ): { number: number; text: string; active: boolean } {\n    return { text, number: num, active };\n  }\n\n  protected getPages(currentPage: number, totalPages: number): PagesModel[] {\n    const pages: PagesModel[] = [];\n\n    // Default page limits\n    let startPage = 1;\n    let endPage = totalPages;\n    const isMaxSized =\n      typeof this.maxSize !== 'undefined' && this.maxSize < totalPages;\n\n    // recompute if maxSize\n    if (isMaxSized) {\n      if (this.rotate) {\n        // Current page is displayed in the middle of the visible ones\n        startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);\n        endPage = startPage + this.maxSize - 1;\n\n        // Adjust if limit is exceeded\n        if (endPage > totalPages) {\n          endPage = totalPages;\n          startPage = endPage - this.maxSize + 1;\n        }\n      } else {\n        // Visible pages are paginated with maxSize\n        startPage =\n          (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;\n\n        // Adjust last page if limit is exceeded\n        endPage = Math.min(startPage + this.maxSize - 1, totalPages);\n      }\n    }\n\n    // Add page number links\n    for (let num = startPage; num <= endPage; num++) {\n      const page = this.makePage(num, num.toString(), num === currentPage);\n      pages.push(page);\n    }\n\n    // Add links to move between page sets\n    if (isMaxSized && !this.rotate) {\n      if (startPage > 1) {\n        const previousPageSet = this.makePage(startPage - 1, '...', false);\n        pages.unshift(previousPageSet);\n      }\n\n      if (endPage < totalPages) {\n        const nextPageSet = this.makePage(endPage + 1, '...', false);\n        pages.push(nextPageSet);\n      }\n    }\n\n    return pages;\n  }\n\n  // base class\n  protected calculateTotalPages(): number {\n    const totalPages =\n      this.itemsPerPage < 1\n        ? 1\n        : Math.ceil(this.totalItems / this.itemsPerPage);\n\n    return Math.max(totalPages || 0, 1);\n  }\n// tslint:disable-next-line:max-file-line-count\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { PagerComponent } from './pager.component';\nimport { PaginationComponent } from './pagination.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PagerComponent, PaginationComponent],\n  exports: [PagerComponent, PaginationComponent]\n})\nexport class PaginationModule {\n  static forRoot(): ModuleWithProviders<PaginationModule> {\n    return { ngModule: PaginationModule, providers: [] };\n  }\n}\n"]}