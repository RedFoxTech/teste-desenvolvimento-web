{"version":3,"sources":["ng://ngx-bootstrap/rating/rating.config.ts","ng://ngx-bootstrap/rating/rating.component.ts","ng://ngx-bootstrap/rating/rating.module.ts"],"names":["RatingConfig","this","ariaLabel","Injectable","args","providedIn","RATING_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","RatingComponent","multi","changeDetection","config","max","onHover","EventEmitter","onLeave","onChange","Function","prototype","onTouched","Object","assign","onKeydown","event","indexOf","which","preventDefault","stopPropagation","sign","rate","value","ngOnInit","titles","length","range","buildTemplateObjects","writeValue","Math","round","preValue","markForCheck","enter","readonly","emit","reset","registerOnChange","fn","registerOnTouched","result","i","push","index","title","Component","selector","template","providers","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","Input","Output","HostListener","RatingModule","forRoot","ngModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n/** Default values provider for rating */\n@Injectable({\n  providedIn: 'root'\n})\nexport class RatingConfig {\n  /** aria label for rating */\n  ariaLabel = 'rating';\n}\n","import {\n  Component,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnInit,\n  Output,\n  forwardRef, TemplateRef, ChangeDetectionStrategy, ChangeDetectorRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { AccessorContent, RatingResults } from './models';\nimport { RatingConfig } from './rating.config';\n\nexport const RATING_CONTROL_VALUE_ACCESSOR: AccessorContent = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(() => RatingComponent),\n  multi: true\n};\n\n@Component({\n  selector: 'rating',\n  templateUrl: './rating.component.html',\n  providers: [RATING_CONTROL_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RatingComponent implements ControlValueAccessor, OnInit {\n  /** number of icons */\n  @Input() max = 5;\n  /** if true will not react on any user events */\n  @Input() readonly: boolean;\n  /** array of icons titles, default: ([\"one\", \"two\", \"three\", \"four\", \"five\"]) */\n  @Input() titles: string[];\n  /** custom template for icons */\n  // tslint:disable-next-line:no-any\n  @Input() customTemplate: TemplateRef<any>;\n  /** fired when icon selected, $event:number equals to selected rating */\n  @Output() onHover: EventEmitter<number> = new EventEmitter();\n  /** fired when icon selected, $event:number equals to previous rating value */\n  @Output() onLeave: EventEmitter<number> = new EventEmitter();\n\n  // tslint:disable-next-line:no-any\n  onChange: any = Function.prototype;\n  // tslint:disable-next-line:no-any\n  onTouched: any = Function.prototype;\n  /** aria label for rating */\n  ariaLabel: string;\n  range: RatingResults[];\n  value: number;\n  protected preValue: number;\n\n  constructor(private changeDetection: ChangeDetectorRef,\n              config: RatingConfig) {\n    Object.assign(this, config);\n  }\n\n  @HostListener('keydown', ['$event'])\n  onKeydown(event: KeyboardEvent): void {\n    /* tslint:disable-next-line: deprecation */\n    if ([37, 38, 39, 40].indexOf(event.which) === -1) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n    /* tslint:disable-next-line: deprecation */\n    const sign = event.which === 38 || event.which === 39 ? 1 : -1;\n    this.rate(this.value + sign);\n  }\n\n  ngOnInit(): void {\n    this.max = typeof this.max !== 'undefined' ? this.max : 5;\n    this.titles =\n      typeof this.titles !== 'undefined' && this.titles.length > 0\n        ? this.titles\n        : [];\n    this.range = this.buildTemplateObjects(this.max);\n  }\n\n  // model -> view\n  writeValue(value: number): void {\n    if (value % 1 !== value) {\n      this.value = Math.round(value);\n      this.preValue = value;\n      this.changeDetection.markForCheck();\n\n      return;\n    }\n\n    this.preValue = value;\n    this.value = value;\n    this.changeDetection.markForCheck();\n  }\n\n  enter(value: number): void {\n    if (!this.readonly) {\n      this.value = value;\n      this.changeDetection.markForCheck();\n      this.onHover.emit(value);\n    }\n  }\n\n  reset(): void {\n    this.value = Math.round(this.preValue);\n    this.changeDetection.markForCheck();\n    this.onLeave.emit(this.value);\n  }\n\n  registerOnChange(fn: (_: number) => {}): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}): void {\n    this.onTouched = fn;\n  }\n\n  rate(value: number): void {\n    if (!this.readonly && value >= 0 && value <= this.range.length) {\n      this.writeValue(value);\n      this.onChange(value);\n    }\n  }\n\n  protected buildTemplateObjects(max: number): RatingResults[] {\n    const result: RatingResults[] = [];\n    for (let i = 0; i < max; i++) {\n      result.push({\n          index: i,\n          title: this.titles[i] || i + 1\n        });\n    }\n\n    return result;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { RatingComponent } from './rating.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [RatingComponent],\n  exports: [RatingComponent]\n})\nexport class RatingModule {\n  static forRoot(): ModuleWithProviders<RatingModule> {\n    return {\n      ngModule: RatingModule,\n      providers: []\n    };\n  }\n}\n"]}