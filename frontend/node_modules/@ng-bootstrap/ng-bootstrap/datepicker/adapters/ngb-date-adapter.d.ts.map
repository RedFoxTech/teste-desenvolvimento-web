{"version":3,"file":"ngb-date-adapter.d.ts","sources":["ngb-date-adapter.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { NgbDateStruct } from '../ngb-date-struct';\r\nexport declare function NGB_DATEPICKER_DATE_ADAPTER_FACTORY(): NgbDateStructAdapter;\r\n/**\r\n * An abstract service that does the conversion between the internal datepicker `NgbDateStruct` model and\r\n * any provided user date model `D`, ex. a string, a native date, etc.\r\n *\r\n * The adapter is used **only** for conversion when binding datepicker to a form control,\r\n * ex. `[(ngModel)]=\"userDateModel\"`. Here `userDateModel` can be of any type.\r\n *\r\n * The default datepicker implementation assumes we use `NgbDateStruct` as a user model.\r\n *\r\n * See the [date format overview](#/components/datepicker/overview#date-model) for more details\r\n * and the [custom adapter demo](#/components/datepicker/examples#adapter) for an example.\r\n */\r\nexport declare abstract class NgbDateAdapter<D> {\r\n    /**\r\n     * Converts a user-model date of type `D` to an `NgbDateStruct` for internal use.\r\n     */\r\n    abstract fromModel(value: D | null): NgbDateStruct | null;\r\n    /**\r\n     * Converts an internal `NgbDateStruct` date to a user-model date of type `D`.\r\n     */\r\n    abstract toModel(date: NgbDateStruct | null): D | null;\r\n}\r\nexport declare class NgbDateStructAdapter extends NgbDateAdapter<NgbDateStruct> {\r\n    /**\r\n     * Converts a NgbDateStruct value into NgbDateStruct value\r\n     */\r\n    fromModel(date: NgbDateStruct | null): NgbDateStruct | null;\r\n    /**\r\n     * Converts a NgbDateStruct value into NgbDateStruct value\r\n     */\r\n    toModel(date: NgbDateStruct | null): NgbDateStruct | null;\r\n}\r\n"]}