{"version":3,"file":"datepicker.d.ts","sources":["datepicker.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { TranslationWidth } from '@angular/common';\r\nimport { NgbCalendar } from './ngb-calendar';\r\nimport { NgbDate } from './ngb-date';\r\nimport { NgbDatepickerService } from './datepicker-service';\r\nimport { DatepickerViewModel, NavigationEvent } from './datepicker-view-model';\r\nimport { DayTemplateContext } from './datepicker-day-template-context';\r\nimport { NgbDatepickerConfig } from './datepicker-config';\r\nimport { NgbDateAdapter } from './adapters/ngb-date-adapter';\r\nimport { NgbDateStruct } from './ngb-date-struct';\r\nimport { NgbDatepickerI18n } from './datepicker-i18n';\r\n/**\r\n * An event emitted right before the navigation happens and the month displayed by the datepicker changes.\r\n */\r\nexport interface NgbDatepickerNavigateEvent {\r\n    /**\r\n     * The currently displayed month.\r\n     */\r\n    current: {\r\n        year: number;\r\n        month: number;\r\n    } | null;\r\n    /**\r\n     * The month we're navigating to.\r\n     */\r\n    next: {\r\n        year: number;\r\n        month: number;\r\n    };\r\n    /**\r\n     * Calling this function will prevent navigation from happening.\r\n     *\r\n     * @since 4.1.0\r\n     */\r\n    preventDefault: () => void;\r\n}\r\n/**\r\n * An interface that represents the readonly public state of the datepicker.\r\n *\r\n * Accessible via the `datepicker.state` getter\r\n *\r\n * @since 5.2.0\r\n */\r\nexport interface NgbDatepickerState {\r\n    /**\r\n     * The earliest date that can be displayed or selected\r\n     */\r\n    readonly minDate: NgbDate | null;\r\n    /**\r\n     * The latest date that can be displayed or selected\r\n     */\r\n    readonly maxDate: NgbDate | null;\r\n    /**\r\n     * The first visible date of currently displayed months\r\n     */\r\n    readonly firstDate: NgbDate;\r\n    /**\r\n     * The last visible date of currently displayed months\r\n     */\r\n    readonly lastDate: NgbDate;\r\n    /**\r\n     * The date currently focused by the datepicker\r\n     */\r\n    readonly focusedDate: NgbDate;\r\n    /**\r\n     * First dates of months currently displayed by the datepicker\r\n     *\r\n     * @since 5.3.0\r\n     */\r\n    readonly months: NgbDate[];\r\n}\r\n/**\r\n * A directive that marks the content template that customizes the way datepicker months are displayed\r\n *\r\n * @since 5.3.0\r\n */\r\nexport declare class NgbDatepickerContent {\r\n    templateRef: TemplateRef<any>;\r\n    constructor(templateRef: TemplateRef<any>);\r\n}\r\n/**\r\n * A highly configurable component that helps you with selecting calendar dates.\r\n *\r\n * `NgbDatepicker` is meant to be displayed inline on a page or put inside a popup.\r\n */\r\nexport declare class NgbDatepicker implements OnDestroy, OnChanges, OnInit, ControlValueAccessor {\r\n    private _service;\r\n    private _calendar;\r\n    i18n: NgbDatepickerI18n;\r\n    private _elementRef;\r\n    private _ngbDateAdapter;\r\n    private _ngZone;\r\n    static ngAcceptInputType_autoClose: boolean | string;\r\n    static ngAcceptInputType_navigation: string;\r\n    static ngAcceptInputType_outsideDays: string;\r\n    static ngAcceptInputType_weekdays: boolean | number;\r\n    model: DatepickerViewModel;\r\n    private _defaultDayTemplate;\r\n    private _contentEl;\r\n    contentTemplate: NgbDatepickerContent;\r\n    private _controlValue;\r\n    private _destroyed$;\r\n    private _publicState;\r\n    private _showWeekdays;\r\n    /**\r\n     * The reference to a custom template for the day.\r\n     *\r\n     * Allows to completely override the way a day 'cell' in the calendar is displayed.\r\n     *\r\n     * See [`DayTemplateContext`](#/components/datepicker/api#DayTemplateContext) for the data you get inside.\r\n     */\r\n    dayTemplate: TemplateRef<DayTemplateContext>;\r\n    /**\r\n     * The callback to pass any arbitrary data to the template cell via the\r\n     * [`DayTemplateContext`](#/components/datepicker/api#DayTemplateContext)'s `data` parameter.\r\n     *\r\n     * `current` is the month that is currently displayed by the datepicker.\r\n     *\r\n     * @since 3.3.0\r\n     */\r\n    dayTemplateData: (date: NgbDate, current?: {\r\n        year: number;\r\n        month: number;\r\n    }) => any;\r\n    /**\r\n     * The number of months to display.\r\n     */\r\n    displayMonths: number;\r\n    /**\r\n     * The first day of the week.\r\n     *\r\n     * With default calendar we use ISO 8601: 'weekday' is 1=Mon ... 7=Sun.\r\n     */\r\n    firstDayOfWeek: number;\r\n    /**\r\n     * The reference to the custom template for the datepicker footer.\r\n     *\r\n     * @since 3.3.0\r\n     */\r\n    footerTemplate: TemplateRef<any>;\r\n    /**\r\n     * The callback to mark some dates as disabled.\r\n     *\r\n     * It is called for each new date when navigating to a different month.\r\n     *\r\n     * `current` is the month that is currently displayed by the datepicker.\r\n     */\r\n    markDisabled: (date: NgbDate, current?: {\r\n        year: number;\r\n        month: number;\r\n    }) => boolean;\r\n    /**\r\n     * The latest date that can be displayed or selected.\r\n     *\r\n     * If not provided, 'year' select box will display 10 years after the current month.\r\n     */\r\n    maxDate: NgbDateStruct;\r\n    /**\r\n     * The earliest date that can be displayed or selected.\r\n     *\r\n     * If not provided, 'year' select box will display 10 years before the current month.\r\n     */\r\n    minDate: NgbDateStruct;\r\n    /**\r\n     * Navigation type.\r\n     *\r\n     * * `\"select\"` - select boxes for month and navigation arrows\r\n     * * `\"arrows\"` - only navigation arrows\r\n     * * `\"none\"` - no navigation visible at all\r\n     */\r\n    navigation: 'select' | 'arrows' | 'none';\r\n    /**\r\n     * The way of displaying days that don't belong to the current month.\r\n     *\r\n     * * `\"visible\"` - days are visible\r\n     * * `\"hidden\"` - days are hidden, white space preserved\r\n     * * `\"collapsed\"` - days are collapsed, so the datepicker height might change between months\r\n     *\r\n     * For the 2+ months view, days in between months are never shown.\r\n     */\r\n    outsideDays: 'visible' | 'collapsed' | 'hidden';\r\n    /**\r\n     * If `true`, weekdays will be displayed.\r\n     *\r\n     * @deprecated 9.1.0, please use 'weekdays' instead\r\n     */\r\n    set showWeekdays(weekdays: boolean);\r\n    get showWeekdays(): boolean;\r\n    /**\r\n     * If `true`, week numbers will be displayed.\r\n     */\r\n    showWeekNumbers: boolean;\r\n    /**\r\n     * The date to open calendar with.\r\n     *\r\n     * With the default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\r\n     * If nothing or invalid date is provided, calendar will open with current month.\r\n     *\r\n     * You could use `navigateTo(date)` method as an alternative.\r\n     */\r\n    startDate: {\r\n        year: number;\r\n        month: number;\r\n        day?: number;\r\n    };\r\n    /**\r\n     * The way weekdays should be displayed.\r\n     *\r\n     * * `true` - weekdays are displayed using default width\r\n     * * `false` - weekdays are not displayed\r\n     * * `TranslationWidth` - weekdays are displayed using specified width\r\n     *\r\n     * @since 9.1.0\r\n     */\r\n    weekdays: TranslationWidth | boolean;\r\n    /**\r\n     * An event emitted right before the navigation happens and displayed month changes.\r\n     *\r\n     * See [`NgbDatepickerNavigateEvent`](#/components/datepicker/api#NgbDatepickerNavigateEvent) for the payload info.\r\n     */\r\n    navigate: EventEmitter<NgbDatepickerNavigateEvent>;\r\n    /**\r\n     * An event emitted when user selects a date using keyboard or mouse.\r\n     *\r\n     * The payload of the event is currently selected `NgbDate`.\r\n     *\r\n     * @since 5.2.0\r\n     */\r\n    dateSelect: EventEmitter<NgbDate>;\r\n    onChange: (_: any) => void;\r\n    onTouched: () => void;\r\n    constructor(_service: NgbDatepickerService, _calendar: NgbCalendar, i18n: NgbDatepickerI18n, config: NgbDatepickerConfig, cd: ChangeDetectorRef, _elementRef: ElementRef<HTMLElement>, _ngbDateAdapter: NgbDateAdapter<any>, _ngZone: NgZone);\r\n    /**\r\n     *  Returns the readonly public state of the datepicker\r\n     *\r\n     * @since 5.2.0\r\n     */\r\n    get state(): NgbDatepickerState;\r\n    /**\r\n     *  Returns the calendar service used in the specific datepicker instance.\r\n     *\r\n     *  @since 5.3.0\r\n     */\r\n    get calendar(): NgbCalendar;\r\n    /**\r\n     *  Focuses on given date.\r\n     */\r\n    focusDate(date?: NgbDateStruct | null): void;\r\n    /**\r\n     *  Selects focused date.\r\n     */\r\n    focusSelect(): void;\r\n    focus(): void;\r\n    /**\r\n     * Navigates to the provided date.\r\n     *\r\n     * With the default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\r\n     * If nothing or invalid date provided calendar will open current month.\r\n     *\r\n     * Use the `[startDate]` input as an alternative.\r\n     */\r\n    navigateTo(date?: {\r\n        year: number;\r\n        month: number;\r\n        day?: number;\r\n    }): void;\r\n    ngAfterViewInit(): void;\r\n    ngOnDestroy(): void;\r\n    ngOnInit(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    onDateSelect(date: NgbDate): void;\r\n    onNavigateDateSelect(date: NgbDate): void;\r\n    onNavigateEvent(event: NavigationEvent): void;\r\n    registerOnChange(fn: (value: any) => any): void;\r\n    registerOnTouched(fn: () => any): void;\r\n    setDisabledState(disabled: boolean): void;\r\n    writeValue(value: any): void;\r\n}\r\n"]}