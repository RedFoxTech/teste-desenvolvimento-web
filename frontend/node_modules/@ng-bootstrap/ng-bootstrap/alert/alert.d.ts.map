{"version":3,"file":"alert.d.ts","sources":["alert.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, Renderer2, ElementRef, OnChanges, OnInit, SimpleChanges, NgZone } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { NgbAlertConfig } from './alert-config';\r\n/**\r\n * Alert is a component to provide contextual feedback messages for user.\r\n *\r\n * It supports several alert types and can be dismissed.\r\n */\r\nexport declare class NgbAlert implements OnInit, OnChanges {\r\n    private _renderer;\r\n    private _element;\r\n    private _zone;\r\n    /**\r\n     * If `true`, alert closing will be animated.\r\n     *\r\n     * Animation is triggered only when clicked on the close button (×)\r\n     * or via the `.close()` function\r\n     *\r\n     * @since 8.0.0\r\n     */\r\n    animation: boolean;\r\n    /**\r\n     * If `true`, alert can be dismissed by the user.\r\n     *\r\n     * The close button (×) will be displayed and you can be notified\r\n     * of the event with the `(close)` output.\r\n     */\r\n    dismissible: boolean;\r\n    /**\r\n     * Type of the alert.\r\n     *\r\n     * Bootstrap provides styles for the following types: `'success'`, `'info'`, `'warning'`, `'danger'`, `'primary'`,\r\n     * `'secondary'`, `'light'` and `'dark'`.\r\n     */\r\n    type: string;\r\n    /**\r\n     * An event emitted when the close button is clicked. It has no payload and only relevant for dismissible alerts.\r\n     *\r\n     * @since 8.0.0\r\n     */\r\n    closed: EventEmitter<void>;\r\n    constructor(config: NgbAlertConfig, _renderer: Renderer2, _element: ElementRef, _zone: NgZone);\r\n    /**\r\n     * Triggers alert closing programmatically (same as clicking on the close button (×)).\r\n     *\r\n     * The returned observable will emit and be completed once the closing transition has finished.\r\n     * If the animations are turned off this happens synchronously.\r\n     *\r\n     * Alternatively you could listen or subscribe to the `(closed)` output\r\n     *\r\n     * @since 8.0.0\r\n     */\r\n    close(): Observable<void>;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    ngOnInit(): void;\r\n}\r\n"]}