{"version":3,"file":"rating.d.ts","sources":["rating.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, EventEmitter, OnChanges, OnInit, SimpleChanges, TemplateRef } from '@angular/core';\r\nimport { NgbRatingConfig } from './rating-config';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\n/**\r\n * The context for the custom star display template defined in the `starTemplate`.\r\n */\r\nexport interface StarTemplateContext {\r\n    /**\r\n     * The star fill percentage, an integer in the `[0, 100]` range.\r\n     */\r\n    fill: number;\r\n    /**\r\n     * Index of the star, starts with `0`.\r\n     */\r\n    index: number;\r\n}\r\n/**\r\n * A directive that helps visualising and interacting with a star rating bar.\r\n */\r\nexport declare class NgbRating implements ControlValueAccessor, OnInit, OnChanges {\r\n    private _changeDetectorRef;\r\n    contexts: StarTemplateContext[];\r\n    disabled: boolean;\r\n    nextRate: number;\r\n    /**\r\n     * The maximal rating that can be given.\r\n     */\r\n    max: number;\r\n    /**\r\n     * The current rating. Could be a decimal value like `3.75`.\r\n     */\r\n    rate: number;\r\n    /**\r\n     * If `true`, the rating can't be changed.\r\n     */\r\n    readonly: boolean;\r\n    /**\r\n     * If `true`, the rating can be reset to `0` by mouse clicking currently set rating.\r\n     */\r\n    resettable: boolean;\r\n    /**\r\n     * The template to override the way each star is displayed.\r\n     *\r\n     * Alternatively put an `<ng-template>` as the only child of your `<ngb-rating>` element\r\n     */\r\n    starTemplate: TemplateRef<StarTemplateContext>;\r\n    starTemplateFromContent: TemplateRef<StarTemplateContext>;\r\n    /**\r\n     * An event emitted when the user is hovering over a given rating.\r\n     *\r\n     * Event payload equals to the rating being hovered over.\r\n     */\r\n    hover: EventEmitter<number>;\r\n    /**\r\n     * An event emitted when the user stops hovering over a given rating.\r\n     *\r\n     * Event payload equals to the rating of the last item being hovered over.\r\n     */\r\n    leave: EventEmitter<number>;\r\n    /**\r\n     * An event emitted when the user selects a new rating.\r\n     *\r\n     * Event payload equals to the newly selected rating.\r\n     */\r\n    rateChange: EventEmitter<number>;\r\n    onChange: (_: any) => void;\r\n    onTouched: () => void;\r\n    constructor(config: NgbRatingConfig, _changeDetectorRef: ChangeDetectorRef);\r\n    ariaValueText(): string;\r\n    isInteractive(): boolean;\r\n    enter(value: number): void;\r\n    handleBlur(): void;\r\n    handleClick(value: number): void;\r\n    handleKeyDown(event: KeyboardEvent): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    ngOnInit(): void;\r\n    registerOnChange(fn: (value: any) => any): void;\r\n    registerOnTouched(fn: () => any): void;\r\n    reset(): void;\r\n    setDisabledState(isDisabled: boolean): void;\r\n    update(value: number, internalChange?: boolean): void;\r\n    writeValue(value: any): void;\r\n    private _updateState;\r\n}\r\n"]}