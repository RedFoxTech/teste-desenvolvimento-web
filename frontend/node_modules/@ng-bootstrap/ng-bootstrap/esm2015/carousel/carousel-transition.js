import { reflow } from '../util/util';
/**
 * Defines the carousel slide transition direction.
 */
export var NgbSlideEventDirection;
(function (NgbSlideEventDirection) {
    NgbSlideEventDirection["LEFT"] = "left";
    NgbSlideEventDirection["RIGHT"] = "right";
})(NgbSlideEventDirection || (NgbSlideEventDirection = {}));
const isBeingAnimated = ({ classList }) => {
    return classList.contains('carousel-item-left') || classList.contains('carousel-item-right');
};
const ɵ0 = isBeingAnimated;
const removeDirectionClasses = (classList) => {
    classList.remove('carousel-item-left');
    classList.remove('carousel-item-right');
};
const ɵ1 = removeDirectionClasses;
const removeClasses = (classList) => {
    removeDirectionClasses(classList);
    classList.remove('carousel-item-prev');
    classList.remove('carousel-item-next');
};
const ɵ2 = removeClasses;
export const ngbCarouselTransitionIn = (element, animation, { direction }) => {
    const { classList } = element;
    if (!animation) {
        removeDirectionClasses(classList);
        removeClasses(classList);
        classList.add('active');
        return;
    }
    if (isBeingAnimated(element)) {
        // Revert the transition
        removeDirectionClasses(classList);
    }
    else {
        // For the 'in' transition, a 'pre-class' is applied to the element to ensure its visibility
        classList.add('carousel-item-' + (direction === NgbSlideEventDirection.LEFT ? 'next' : 'prev'));
        reflow(element);
        classList.add('carousel-item-' + direction);
    }
    return () => {
        removeClasses(classList);
        classList.add('active');
    };
};
export const ngbCarouselTransitionOut = (element, animation, { direction }) => {
    const { classList } = element;
    if (!animation) {
        removeDirectionClasses(classList);
        removeClasses(classList);
        classList.remove('active');
        return;
    }
    //  direction is left or right, depending on the way the slide goes out.
    if (isBeingAnimated(element)) {
        // Revert the transition
        removeDirectionClasses(classList);
    }
    else {
        classList.add('carousel-item-' + direction);
    }
    return () => {
        removeClasses(classList);
        classList.remove('active');
    };
};
export { ɵ0, ɵ1, ɵ2 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwtdHJhbnNpdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi9zcmMvIiwic291cmNlcyI6WyJjYXJvdXNlbC9jYXJvdXNlbC10cmFuc2l0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFFcEM7O0dBRUc7QUFDSCxNQUFNLENBQU4sSUFBWSxzQkFHWDtBQUhELFdBQVksc0JBQXNCO0lBQ2hDLHVDQUFhLENBQUE7SUFDYix5Q0FBZSxDQUFBO0FBQ2pCLENBQUMsRUFIVyxzQkFBc0IsS0FBdEIsc0JBQXNCLFFBR2pDO0FBSUQsTUFBTSxlQUFlLEdBQUcsQ0FBQyxFQUFDLFNBQVMsRUFBYyxFQUFFLEVBQUU7SUFDbkQsT0FBTyxTQUFTLENBQUMsUUFBUSxDQUFDLG9CQUFvQixDQUFDLElBQUksU0FBUyxDQUFDLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBQy9GLENBQUMsQ0FBQzs7QUFFRixNQUFNLHNCQUFzQixHQUFHLENBQUMsU0FBdUIsRUFBRSxFQUFFO0lBQ3pELFNBQVMsQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUN2QyxTQUFTLENBQUMsTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFDMUMsQ0FBQyxDQUFDOztBQUVGLE1BQU0sYUFBYSxHQUFHLENBQUMsU0FBdUIsRUFBRSxFQUFFO0lBQ2hELHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2xDLFNBQVMsQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUN2QyxTQUFTLENBQUMsTUFBTSxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDekMsQ0FBQyxDQUFDOztBQUVGLE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUNoQyxDQUFDLE9BQW9CLEVBQUUsU0FBa0IsRUFBRSxFQUFDLFNBQVMsRUFBaUIsRUFBRSxFQUFFO0lBQ3hFLE1BQU0sRUFBQyxTQUFTLEVBQUMsR0FBRyxPQUFPLENBQUM7SUFFNUIsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUNkLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2xDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN6QixTQUFTLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3hCLE9BQU87S0FDUjtJQUVELElBQUksZUFBZSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQzVCLHdCQUF3QjtRQUN4QixzQkFBc0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUNuQztTQUFNO1FBQ0wsNEZBQTRGO1FBQzVGLFNBQVMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEdBQUcsQ0FBQyxTQUFTLEtBQUssc0JBQXNCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDaEcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2hCLFNBQVMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEdBQUcsU0FBUyxDQUFDLENBQUM7S0FDN0M7SUFFRCxPQUFPLEdBQUcsRUFBRTtRQUNWLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN6QixTQUFTLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzFCLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVOLE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUNqQyxDQUFDLE9BQW9CLEVBQUUsU0FBa0IsRUFBRSxFQUFDLFNBQVMsRUFBaUIsRUFBRSxFQUFFO0lBQ3hFLE1BQU0sRUFBQyxTQUFTLEVBQUMsR0FBRyxPQUFPLENBQUM7SUFFNUIsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUNkLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2xDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN6QixTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzNCLE9BQU87S0FDUjtJQUVELHdFQUF3RTtJQUN4RSxJQUFJLGVBQWUsQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUM1Qix3QkFBd0I7UUFDeEIsc0JBQXNCLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDbkM7U0FBTTtRQUNMLFNBQVMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEdBQUcsU0FBUyxDQUFDLENBQUM7S0FDN0M7SUFFRCxPQUFPLEdBQUcsRUFBRTtRQUNWLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN6QixTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzdCLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TmdiVHJhbnNpdGlvblN0YXJ0Rm59IGZyb20gJy4uL3V0aWwvdHJhbnNpdGlvbi9uZ2JUcmFuc2l0aW9uJztcclxuaW1wb3J0IHtyZWZsb3d9IGZyb20gJy4uL3V0aWwvdXRpbCc7XHJcblxyXG4vKipcclxuICogRGVmaW5lcyB0aGUgY2Fyb3VzZWwgc2xpZGUgdHJhbnNpdGlvbiBkaXJlY3Rpb24uXHJcbiAqL1xyXG5leHBvcnQgZW51bSBOZ2JTbGlkZUV2ZW50RGlyZWN0aW9uIHtcclxuICBMRUZUID0gJ2xlZnQnLFxyXG4gIFJJR0hUID0gJ3JpZ2h0J1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE5nYkNhcm91c2VsQ3R4IHsgZGlyZWN0aW9uOiAnbGVmdCcgfCAncmlnaHQnOyB9XHJcblxyXG5jb25zdCBpc0JlaW5nQW5pbWF0ZWQgPSAoe2NsYXNzTGlzdH06IEhUTUxFbGVtZW50KSA9PiB7XHJcbiAgcmV0dXJuIGNsYXNzTGlzdC5jb250YWlucygnY2Fyb3VzZWwtaXRlbS1sZWZ0JykgfHwgY2xhc3NMaXN0LmNvbnRhaW5zKCdjYXJvdXNlbC1pdGVtLXJpZ2h0Jyk7XHJcbn07XHJcblxyXG5jb25zdCByZW1vdmVEaXJlY3Rpb25DbGFzc2VzID0gKGNsYXNzTGlzdDogRE9NVG9rZW5MaXN0KSA9PiB7XHJcbiAgY2xhc3NMaXN0LnJlbW92ZSgnY2Fyb3VzZWwtaXRlbS1sZWZ0Jyk7XHJcbiAgY2xhc3NMaXN0LnJlbW92ZSgnY2Fyb3VzZWwtaXRlbS1yaWdodCcpO1xyXG59O1xyXG5cclxuY29uc3QgcmVtb3ZlQ2xhc3NlcyA9IChjbGFzc0xpc3Q6IERPTVRva2VuTGlzdCkgPT4ge1xyXG4gIHJlbW92ZURpcmVjdGlvbkNsYXNzZXMoY2xhc3NMaXN0KTtcclxuICBjbGFzc0xpc3QucmVtb3ZlKCdjYXJvdXNlbC1pdGVtLXByZXYnKTtcclxuICBjbGFzc0xpc3QucmVtb3ZlKCdjYXJvdXNlbC1pdGVtLW5leHQnKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBuZ2JDYXJvdXNlbFRyYW5zaXRpb25JbjogTmdiVHJhbnNpdGlvblN0YXJ0Rm48TmdiQ2Fyb3VzZWxDdHg+ID1cclxuICAgIChlbGVtZW50OiBIVE1MRWxlbWVudCwgYW5pbWF0aW9uOiBib29sZWFuLCB7ZGlyZWN0aW9ufTogTmdiQ2Fyb3VzZWxDdHgpID0+IHtcclxuICAgICAgY29uc3Qge2NsYXNzTGlzdH0gPSBlbGVtZW50O1xyXG5cclxuICAgICAgaWYgKCFhbmltYXRpb24pIHtcclxuICAgICAgICByZW1vdmVEaXJlY3Rpb25DbGFzc2VzKGNsYXNzTGlzdCk7XHJcbiAgICAgICAgcmVtb3ZlQ2xhc3NlcyhjbGFzc0xpc3QpO1xyXG4gICAgICAgIGNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGlzQmVpbmdBbmltYXRlZChlbGVtZW50KSkge1xyXG4gICAgICAgIC8vIFJldmVydCB0aGUgdHJhbnNpdGlvblxyXG4gICAgICAgIHJlbW92ZURpcmVjdGlvbkNsYXNzZXMoY2xhc3NMaXN0KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBGb3IgdGhlICdpbicgdHJhbnNpdGlvbiwgYSAncHJlLWNsYXNzJyBpcyBhcHBsaWVkIHRvIHRoZSBlbGVtZW50IHRvIGVuc3VyZSBpdHMgdmlzaWJpbGl0eVxyXG4gICAgICAgIGNsYXNzTGlzdC5hZGQoJ2Nhcm91c2VsLWl0ZW0tJyArIChkaXJlY3Rpb24gPT09IE5nYlNsaWRlRXZlbnREaXJlY3Rpb24uTEVGVCA/ICduZXh0JyA6ICdwcmV2JykpO1xyXG4gICAgICAgIHJlZmxvdyhlbGVtZW50KTtcclxuICAgICAgICBjbGFzc0xpc3QuYWRkKCdjYXJvdXNlbC1pdGVtLScgKyBkaXJlY3Rpb24pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgIHJlbW92ZUNsYXNzZXMoY2xhc3NMaXN0KTtcclxuICAgICAgICBjbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcclxuICAgICAgfTtcclxuICAgIH07XHJcblxyXG5leHBvcnQgY29uc3QgbmdiQ2Fyb3VzZWxUcmFuc2l0aW9uT3V0OiBOZ2JUcmFuc2l0aW9uU3RhcnRGbjxOZ2JDYXJvdXNlbEN0eD4gPVxyXG4gICAgKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBhbmltYXRpb246IGJvb2xlYW4sIHtkaXJlY3Rpb259OiBOZ2JDYXJvdXNlbEN0eCkgPT4ge1xyXG4gICAgICBjb25zdCB7Y2xhc3NMaXN0fSA9IGVsZW1lbnQ7XHJcblxyXG4gICAgICBpZiAoIWFuaW1hdGlvbikge1xyXG4gICAgICAgIHJlbW92ZURpcmVjdGlvbkNsYXNzZXMoY2xhc3NMaXN0KTtcclxuICAgICAgICByZW1vdmVDbGFzc2VzKGNsYXNzTGlzdCk7XHJcbiAgICAgICAgY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyAgZGlyZWN0aW9uIGlzIGxlZnQgb3IgcmlnaHQsIGRlcGVuZGluZyBvbiB0aGUgd2F5IHRoZSBzbGlkZSBnb2VzIG91dC5cclxuICAgICAgaWYgKGlzQmVpbmdBbmltYXRlZChlbGVtZW50KSkge1xyXG4gICAgICAgIC8vIFJldmVydCB0aGUgdHJhbnNpdGlvblxyXG4gICAgICAgIHJlbW92ZURpcmVjdGlvbkNsYXNzZXMoY2xhc3NMaXN0KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjbGFzc0xpc3QuYWRkKCdjYXJvdXNlbC1pdGVtLScgKyBkaXJlY3Rpb24pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgIHJlbW92ZUNsYXNzZXMoY2xhc3NMaXN0KTtcclxuICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcclxuICAgICAgfTtcclxuICAgIH07XHJcbiJdfQ==