{"version":3,"file":"tooltip.d.ts","sources":["tooltip.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, OnInit, OnDestroy, Injector, Renderer2, ElementRef, TemplateRef, ViewContainerRef, ComponentFactoryResolver, NgZone, ChangeDetectorRef, ApplicationRef, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { PlacementArray } from '../util/positioning';\r\nimport { NgbTooltipConfig } from './tooltip-config';\r\nexport declare class NgbTooltipWindow {\r\n    animation: boolean;\r\n    id: string;\r\n    tooltipClass: string;\r\n}\r\n/**\r\n * A lightweight and extensible directive for fancy tooltip creation.\r\n */\r\nexport declare class NgbTooltip implements OnInit, OnDestroy, OnChanges {\r\n    private _elementRef;\r\n    private _renderer;\r\n    private _ngZone;\r\n    private _document;\r\n    private _changeDetector;\r\n    static ngAcceptInputType_autoClose: boolean | string;\r\n    /**\r\n     * If `true`, tooltip opening and closing will be animated.\r\n     *\r\n     * @since 8.0.0\r\n     */\r\n    animation: boolean;\r\n    /**\r\n     * Indicates whether the tooltip should be closed on `Escape` key and inside/outside clicks:\r\n     *\r\n     * * `true` - closes on both outside and inside clicks as well as `Escape` presses\r\n     * * `false` - disables the autoClose feature (NB: triggers still apply)\r\n     * * `\"inside\"` - closes on inside clicks as well as Escape presses\r\n     * * `\"outside\"` - closes on outside clicks (sometimes also achievable through triggers)\r\n     * as well as `Escape` presses\r\n     *\r\n     * @since 3.0.0\r\n     */\r\n    autoClose: boolean | 'inside' | 'outside';\r\n    /**\r\n     * The preferred placement of the tooltip.\r\n     *\r\n     * Possible values are `\"top\"`, `\"top-left\"`, `\"top-right\"`, `\"bottom\"`, `\"bottom-left\"`,\r\n     * `\"bottom-right\"`, `\"left\"`, `\"left-top\"`, `\"left-bottom\"`, `\"right\"`, `\"right-top\"`,\r\n     * `\"right-bottom\"`\r\n     *\r\n     * Accepts an array of strings or a string with space separated possible values.\r\n     *\r\n     * The default order of preference is `\"auto\"` (same as the sequence above).\r\n     *\r\n     * Please see the [positioning overview](#/positioning) for more details.\r\n     */\r\n    placement: PlacementArray;\r\n    /**\r\n     * Specifies events that should trigger the tooltip.\r\n     *\r\n     * Supports a space separated list of event names.\r\n     * For more details see the [triggers demo](#/components/tooltip/examples#triggers).\r\n     */\r\n    triggers: string;\r\n    /**\r\n     * A selector specifying the element the tooltip should be appended to.\r\n     *\r\n     * Currently only supports `\"body\"`.\r\n     */\r\n    container: string;\r\n    /**\r\n     * If `true`, tooltip is disabled and won't be displayed.\r\n     *\r\n     * @since 1.1.0\r\n     */\r\n    disableTooltip: boolean;\r\n    /**\r\n     * An optional class applied to the tooltip window element.\r\n     *\r\n     * @since 3.2.0\r\n     */\r\n    tooltipClass: string;\r\n    /**\r\n     * The opening delay in ms. Works only for \"non-manual\" opening triggers defined by the `triggers` input.\r\n     *\r\n     * @since 4.1.0\r\n     */\r\n    openDelay: number;\r\n    /**\r\n     * The closing delay in ms. Works only for \"non-manual\" opening triggers defined by the `triggers` input.\r\n     *\r\n     * @since 4.1.0\r\n     */\r\n    closeDelay: number;\r\n    /**\r\n     * An event emitted when the tooltip opening animation has finished. Contains no payload.\r\n     */\r\n    shown: EventEmitter<any>;\r\n    /**\r\n     * An event emitted when the tooltip closing animation has finished. Contains no payload.\r\n     */\r\n    hidden: EventEmitter<any>;\r\n    private _ngbTooltip;\r\n    private _ngbTooltipWindowId;\r\n    private _popupService;\r\n    private _windowRef;\r\n    private _unregisterListenersFn;\r\n    private _zoneSubscription;\r\n    constructor(_elementRef: ElementRef<HTMLElement>, _renderer: Renderer2, injector: Injector, componentFactoryResolver: ComponentFactoryResolver, viewContainerRef: ViewContainerRef, config: NgbTooltipConfig, _ngZone: NgZone, _document: any, _changeDetector: ChangeDetectorRef, applicationRef: ApplicationRef);\r\n    /**\r\n     * The string content or a `TemplateRef` for the content to be displayed in the tooltip.\r\n     *\r\n     * If the content if falsy, the tooltip won't open.\r\n     */\r\n    set ngbTooltip(value: string | TemplateRef<any> | null | undefined);\r\n    get ngbTooltip(): string | TemplateRef<any> | null | undefined;\r\n    /**\r\n     * Opens the tooltip.\r\n     *\r\n     * This is considered to be a \"manual\" triggering.\r\n     * The `context` is an optional value to be injected into the tooltip template when it is created.\r\n     */\r\n    open(context?: any): void;\r\n    /**\r\n     * Closes the tooltip.\r\n     *\r\n     * This is considered to be a \"manual\" triggering of the tooltip.\r\n     */\r\n    close(): void;\r\n    /**\r\n     * Toggles the tooltip.\r\n     *\r\n     * This is considered to be a \"manual\" triggering of the tooltip.\r\n     */\r\n    toggle(): void;\r\n    /**\r\n     * Returns `true`, if the popover is currently shown.\r\n     */\r\n    isOpen(): boolean;\r\n    ngOnInit(): void;\r\n    ngOnChanges({ tooltipClass }: SimpleChanges): void;\r\n    ngOnDestroy(): void;\r\n}\r\n"]}