{"version":3,"file":"timepicker.d.ts","sources":["timepicker.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { NgbTime } from './ngb-time';\r\nimport { NgbTimepickerConfig } from './timepicker-config';\r\nimport { NgbTimeAdapter } from './ngb-time-adapter';\r\nimport { NgbTimepickerI18n } from './timepicker-i18n';\r\n/**\r\n * A directive that helps with wth picking hours, minutes and seconds.\r\n */\r\nexport declare class NgbTimepicker implements ControlValueAccessor, OnChanges {\r\n    private readonly _config;\r\n    private _ngbTimeAdapter;\r\n    private _cd;\r\n    i18n: NgbTimepickerI18n;\r\n    static ngAcceptInputType_size: string;\r\n    disabled: boolean;\r\n    model: NgbTime;\r\n    private _hourStep;\r\n    private _minuteStep;\r\n    private _secondStep;\r\n    /**\r\n     * Whether to display 12H or 24H mode.\r\n     */\r\n    meridian: boolean;\r\n    /**\r\n     * If `true`, the spinners above and below inputs are visible.\r\n     */\r\n    spinners: boolean;\r\n    /**\r\n     * If `true`, it is possible to select seconds.\r\n     */\r\n    seconds: boolean;\r\n    /**\r\n     * The number of hours to add/subtract when clicking hour spinners.\r\n     */\r\n    set hourStep(step: number);\r\n    get hourStep(): number;\r\n    /**\r\n     * The number of minutes to add/subtract when clicking minute spinners.\r\n     */\r\n    set minuteStep(step: number);\r\n    get minuteStep(): number;\r\n    /**\r\n     * The number of seconds to add/subtract when clicking second spinners.\r\n     */\r\n    set secondStep(step: number);\r\n    get secondStep(): number;\r\n    /**\r\n     * If `true`, the timepicker is readonly and can't be changed.\r\n     */\r\n    readonlyInputs: boolean;\r\n    /**\r\n     * The size of inputs and buttons.\r\n     */\r\n    size: 'small' | 'medium' | 'large';\r\n    constructor(_config: NgbTimepickerConfig, _ngbTimeAdapter: NgbTimeAdapter<any>, _cd: ChangeDetectorRef, i18n: NgbTimepickerI18n);\r\n    onChange: (_: any) => void;\r\n    onTouched: () => void;\r\n    writeValue(value: any): void;\r\n    registerOnChange(fn: (value: any) => any): void;\r\n    registerOnTouched(fn: () => any): void;\r\n    setDisabledState(isDisabled: boolean): void;\r\n    changeHour(step: number): void;\r\n    changeMinute(step: number): void;\r\n    changeSecond(step: number): void;\r\n    updateHour(newVal: string): void;\r\n    updateMinute(newVal: string): void;\r\n    updateSecond(newVal: string): void;\r\n    toggleMeridian(): void;\r\n    formatInput(input: HTMLInputElement): void;\r\n    formatHour(value?: number): string;\r\n    formatMinSec(value?: number): string;\r\n    handleBlur(): void;\r\n    get isSmallSize(): boolean;\r\n    get isLargeSize(): boolean;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    private propagateModelChange;\r\n}\r\n"]}