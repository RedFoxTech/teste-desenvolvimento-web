{"version":3,"file":"ngb-time-adapter.d.ts","sources":["ngb-time-adapter.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { NgbTimeStruct } from './ngb-time-struct';\r\nexport declare function NGB_DATEPICKER_TIME_ADAPTER_FACTORY(): NgbTimeStructAdapter;\r\n/**\r\n * An abstract service that does the conversion between the internal timepicker `NgbTimeStruct` model and\r\n * any provided user time model `T`, ex. a string, a native date, etc.\r\n *\r\n * The adapter is used **only** for conversion when binding timepicker to a form control,\r\n * ex. `[(ngModel)]=\"userTimeModel\"`. Here `userTimeModel` can be of any type.\r\n *\r\n * The default timepicker implementation assumes we use `NgbTimeStruct` as a user model.\r\n *\r\n * See the [custom time adapter demo](#/components/timepicker/examples#adapter) for an example.\r\n *\r\n * @since 2.2.0\r\n */\r\nexport declare abstract class NgbTimeAdapter<T> {\r\n    /**\r\n     * Converts a user-model time of type `T` to an `NgbTimeStruct` for internal use.\r\n     */\r\n    abstract fromModel(value: T | null): NgbTimeStruct | null;\r\n    /**\r\n     * Converts an internal `NgbTimeStruct` time to a user-model time of type `T`.\r\n     */\r\n    abstract toModel(time: NgbTimeStruct | null): T | null;\r\n}\r\nexport declare class NgbTimeStructAdapter extends NgbTimeAdapter<NgbTimeStruct> {\r\n    /**\r\n     * Converts a NgbTimeStruct value into NgbTimeStruct value\r\n     */\r\n    fromModel(time: NgbTimeStruct | null): NgbTimeStruct | null;\r\n    /**\r\n     * Converts a NgbTimeStruct value into NgbTimeStruct value\r\n     */\r\n    toModel(time: NgbTimeStruct | null): NgbTimeStruct | null;\r\n}\r\n"]}