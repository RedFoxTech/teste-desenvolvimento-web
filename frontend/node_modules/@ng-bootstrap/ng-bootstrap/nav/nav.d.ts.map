{"version":3,"file":"nav.d.ts","sources":["nav.d.ts"],"names":[],"mappingssourcesContent":["import { AfterContentChecked, AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit, QueryList, SimpleChanges, TemplateRef } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { NgbNavConfig } from './nav-config';\r\n/**\r\n * Context passed to the nav content template.\r\n *\r\n * See [this demo](#/components/nav/examples#keep-content) as the example.\r\n *\r\n * @since 5.2.0\r\n */\r\nexport interface NgbNavContentContext {\r\n    /**\r\n     * If `true`, current nav content is visible and active\r\n     */\r\n    $implicit: boolean;\r\n}\r\n/**\r\n * This directive must be used to wrap content to be displayed in the nav.\r\n *\r\n * @since 5.2.0\r\n */\r\nexport declare class NgbNavContent {\r\n    templateRef: TemplateRef<any>;\r\n    constructor(templateRef: TemplateRef<any>);\r\n}\r\n/**\r\n * The directive used to group nav link and related nav content. As well as set nav identifier and some options.\r\n *\r\n * @since 5.2.0\r\n */\r\nexport declare class NgbNavItem implements AfterContentChecked, OnInit {\r\n    elementRef: ElementRef<any>;\r\n    private _nav;\r\n    /**\r\n     * If `true`, non-active current nav item content will be removed from DOM\r\n     * Otherwise it will just be hidden\r\n     */\r\n    destroyOnHide: any;\r\n    /**\r\n     * If `true`, the current nav item is disabled and can't be toggled by user.\r\n     *\r\n     * Nevertheless disabled nav can be selected programmatically via the `.select()` method and the `[activeId]` binding.\r\n     */\r\n    disabled: boolean;\r\n    /**\r\n     * The id used for the DOM elements.\r\n     * Must be unique inside the document in case you have multiple `ngbNav`s on the page.\r\n     *\r\n     * Autogenerated as `ngb-nav-XXX` if not provided.\r\n     */\r\n    domId: string;\r\n    /**\r\n     * The id used as a model for active nav.\r\n     * It can be anything, but must be unique inside one `ngbNav`.\r\n     *\r\n     * The only limitation is that it is not possible to have the `''` (empty string) as id,\r\n     * because ` ngbNavItem `, `ngbNavItem=''` and `[ngbNavItem]=\"''\"` are indistinguishable\r\n     */\r\n    _id: any;\r\n    /**\r\n     * An event emitted when the fade in transition is finished on the related nav content\r\n     *\r\n     * @since 8.0.0\r\n     */\r\n    shown: EventEmitter<void>;\r\n    /**\r\n     * An event emitted when the fade out transition is finished on the related nav content\r\n     *\r\n     * @since 8.0.0\r\n     */\r\n    hidden: EventEmitter<void>;\r\n    contentTpl: NgbNavContent | null;\r\n    contentTpls: QueryList<NgbNavContent>;\r\n    constructor(nav: any, elementRef: ElementRef<any>);\r\n    ngAfterContentChecked(): void;\r\n    ngOnInit(): void;\r\n    get active(): boolean;\r\n    get id(): any;\r\n    get panelDomId(): string;\r\n    isPanelInDom(): boolean;\r\n}\r\n/**\r\n * A nav directive that helps with implementing tabbed navigation components.\r\n *\r\n * @since 5.2.0\r\n */\r\nexport declare class NgbNav implements AfterContentInit, OnDestroy {\r\n    role: string;\r\n    private _cd;\r\n    private _document;\r\n    static ngAcceptInputType_orientation: string;\r\n    static ngAcceptInputType_roles: boolean | string;\r\n    /**\r\n     * The id of the nav that should be active\r\n     *\r\n     * You could also use the `.select()` method and the `(navChange)` event\r\n     */\r\n    activeId: any;\r\n    /**\r\n     * The event emitted after the active nav changes\r\n     * The payload of the event is the newly active nav id\r\n     *\r\n     * If you want to prevent nav change, you should use `(navChange)` event\r\n     */\r\n    activeIdChange: EventEmitter<any>;\r\n    /**\r\n     * If `true`, nav change will be animated.\r\n     *\r\n     * @since 8.0.0\r\n     */\r\n    animation: boolean;\r\n    /**\r\n     * If `true`, non-active nav content will be removed from DOM\r\n     * Otherwise it will just be hidden\r\n     */\r\n    destroyOnHide: any;\r\n    /**\r\n     * The orientation of navs.\r\n     *\r\n     * Using `vertical` will also add the `aria-orientation` attribute\r\n     */\r\n    orientation: 'horizontal' | 'vertical';\r\n    /**\r\n     * Role attribute generating strategy:\r\n     * - `false` - no role attributes will be generated\r\n     * - `'tablist'` - 'tablist', 'tab' and 'tabpanel' will be generated (default)\r\n     */\r\n    roles: 'tablist' | false;\r\n    /**\r\n     * Keyboard support for nav focus/selection using arrow keys.\r\n     *\r\n     * * `false` - no keyboard support.\r\n     * * `true` - navs will be focused using keyboard arrow keys\r\n     * * `'changeWithArrows'` -  nav will be selected using keyboard arrow keys\r\n     *\r\n     * See the [list of available keyboard shortcuts](#/components/nav/overview#keyboard-shortcuts).\r\n     *\r\n     * @since 6.1.0\r\n   */\r\n    keyboard: boolean | 'changeWithArrows';\r\n    /**\r\n     * An event emitted when the fade in transition is finished for one of the items.\r\n     *\r\n     * Payload of the event is the nav id that was just shown.\r\n     *\r\n     * @since 8.0.0\r\n     */\r\n    shown: EventEmitter<any>;\r\n    /**\r\n     * An event emitted when the fade out transition is finished for one of the items.\r\n     *\r\n     * Payload of the event is the nav id that was just hidden.\r\n     *\r\n     * @since 8.0.0\r\n     */\r\n    hidden: EventEmitter<any>;\r\n    items: QueryList<NgbNavItem>;\r\n    links: QueryList<NgbNavLink>;\r\n    destroy$: Subject<void>;\r\n    navItemChange$: Subject<NgbNavItem | null>;\r\n    constructor(role: string, config: NgbNavConfig, _cd: ChangeDetectorRef, _document: any);\r\n    /**\r\n     * The nav change event emitted right before the nav change happens on user click.\r\n     *\r\n     * This event won't be emitted if nav is changed programmatically via `[activeId]` or `.select()`.\r\n     *\r\n     * See [`NgbNavChangeEvent`](#/components/nav/api#NgbNavChangeEvent) for payload details.\r\n     */\r\n    navChange: EventEmitter<NgbNavChangeEvent<any>>;\r\n    click(item: NgbNavItem): void;\r\n    onKeyDown(event: KeyboardEvent): void;\r\n    /**\r\n     * Selects the nav with the given id and shows its associated pane.\r\n     * Any other nav that was previously selected becomes unselected and its associated pane is hidden.\r\n     */\r\n    select(id: any): void;\r\n    ngAfterContentInit(): void;\r\n    ngOnChanges({ activeId }: SimpleChanges): void;\r\n    ngOnDestroy(): void;\r\n    private _updateActiveId;\r\n    private _notifyItemChanged;\r\n    private _getItemById;\r\n}\r\n/**\r\n * A directive to put on the nav link.\r\n *\r\n * @since 5.2.0\r\n */\r\nexport declare class NgbNavLink {\r\n    role: string;\r\n    navItem: NgbNavItem;\r\n    nav: NgbNav;\r\n    elRef: ElementRef;\r\n    constructor(role: string, navItem: NgbNavItem, nav: NgbNav, elRef: ElementRef);\r\n    hasNavItemClass(): boolean;\r\n}\r\n/**\r\n * The payload of the change event emitted right before the nav change happens on user click.\r\n *\r\n * This event won't be emitted if nav is changed programmatically via `[activeId]` or `.select()`.\r\n *\r\n * @since 5.2.0\r\n */\r\nexport interface NgbNavChangeEvent<T = any> {\r\n    /**\r\n     * Id of the currently active nav.\r\n     */\r\n    activeId: T;\r\n    /**\r\n     * Id of the newly selected nav.\r\n     */\r\n    nextId: T;\r\n    /**\r\n     * Function that will prevent nav change if called.\r\n     */\r\n    preventDefault: () => void;\r\n}\r\n"]}