{"version":3,"file":"carousel.d.ts","sources":["carousel.d.ts"],"names":[],"mappingssourcesContent":["import { AfterContentChecked, AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy, QueryList, TemplateRef, AfterViewInit } from '@angular/core';\r\nimport { NgbCarouselConfig } from './carousel-config';\r\nimport { NgbSlideEventDirection } from './carousel-transition';\r\n/**\r\n * A directive that wraps the individual carousel slide.\r\n */\r\nexport declare class NgbSlide {\r\n    tplRef: TemplateRef<any>;\r\n    /**\r\n     * Slide id that must be unique for the entire document.\r\n     *\r\n     * If not provided, will be generated in the `ngb-slide-xx` format.\r\n     */\r\n    id: string;\r\n    /**\r\n     * An event emitted when the slide transition is finished\r\n     *\r\n     * @since 8.0.0\r\n     */\r\n    slid: EventEmitter<NgbSingleSlideEvent>;\r\n    constructor(tplRef: TemplateRef<any>);\r\n}\r\n/**\r\n * Carousel is a component to easily create and control slideshows.\r\n *\r\n * Allows to set intervals, change the way user interacts with the slides and provides a programmatic API.\r\n */\r\nexport declare class NgbCarousel implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy {\r\n    private _platformId;\r\n    private _ngZone;\r\n    private _cd;\r\n    private _container;\r\n    slides: QueryList<NgbSlide>;\r\n    NgbSlideEventSource: typeof NgbSlideEventSource;\r\n    private _destroy$;\r\n    private _interval$;\r\n    private _mouseHover$;\r\n    private _focused$;\r\n    private _pauseOnHover$;\r\n    private _pauseOnFocus$;\r\n    private _pause$;\r\n    private _wrap$;\r\n    /**\r\n     * A flag to enable/disable the animations.\r\n     *\r\n     * @since 8.0.0\r\n     */\r\n    animation: boolean;\r\n    /**\r\n     * The slide id that should be displayed **initially**.\r\n     *\r\n     * For subsequent interactions use methods `select()`, `next()`, etc. and the `(slide)` output.\r\n     */\r\n    activeId: string;\r\n    /**\r\n     * Time in milliseconds before the next slide is shown.\r\n     */\r\n    set interval(value: number);\r\n    get interval(): number;\r\n    /**\r\n     * If `true`, will 'wrap' the carousel by switching from the last slide back to the first.\r\n     */\r\n    set wrap(value: boolean);\r\n    get wrap(): boolean;\r\n    /**\r\n     * If `true`, allows to interact with carousel using keyboard 'arrow left' and 'arrow right'.\r\n     */\r\n    keyboard: boolean;\r\n    /**\r\n     * If `true`, will pause slide switching when mouse cursor hovers the slide.\r\n     *\r\n     * @since 2.2.0\r\n     */\r\n    set pauseOnHover(value: boolean);\r\n    get pauseOnHover(): boolean;\r\n    /**\r\n     * If `true`, will pause slide switching when the focus is inside the carousel.\r\n     */\r\n    set pauseOnFocus(value: boolean);\r\n    get pauseOnFocus(): boolean;\r\n    /**\r\n     * If `true`, 'previous' and 'next' navigation arrows will be visible on the slide.\r\n     *\r\n     * @since 2.2.0\r\n     */\r\n    showNavigationArrows: boolean;\r\n    /**\r\n     * If `true`, navigation indicators at the bottom of the slide will be visible.\r\n     *\r\n     * @since 2.2.0\r\n     */\r\n    showNavigationIndicators: boolean;\r\n    /**\r\n     * An event emitted just before the slide transition starts.\r\n     *\r\n     * See [`NgbSlideEvent`](#/components/carousel/api#NgbSlideEvent) for payload details.\r\n     */\r\n    slide: EventEmitter<NgbSlideEvent>;\r\n    /**\r\n     * An event emitted right after the slide transition is completed.\r\n     *\r\n     * See [`NgbSlideEvent`](#/components/carousel/api#NgbSlideEvent) for payload details.\r\n     *\r\n     * @since 8.0.0\r\n     */\r\n    slid: EventEmitter<NgbSlideEvent>;\r\n    private _transitionIds;\r\n    set mouseHover(value: boolean);\r\n    get mouseHover(): boolean;\r\n    set focused(value: boolean);\r\n    get focused(): boolean;\r\n    constructor(config: NgbCarouselConfig, _platformId: any, _ngZone: NgZone, _cd: ChangeDetectorRef, _container: ElementRef);\r\n    arrowLeft(): void;\r\n    arrowRight(): void;\r\n    ngAfterContentInit(): void;\r\n    ngAfterContentChecked(): void;\r\n    ngAfterViewInit(): void;\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * Navigates to a slide with the specified identifier.\r\n     */\r\n    select(slideId: string, source?: NgbSlideEventSource): void;\r\n    /**\r\n     * Navigates to the previous slide.\r\n     */\r\n    prev(source?: NgbSlideEventSource): void;\r\n    /**\r\n     * Navigates to the next slide.\r\n     */\r\n    next(source?: NgbSlideEventSource): void;\r\n    /**\r\n     * Pauses cycling through the slides.\r\n     */\r\n    pause(): void;\r\n    /**\r\n     * Restarts cycling through the slides from left to right.\r\n     */\r\n    cycle(): void;\r\n    /**\r\n     * Set the focus on the carousel.\r\n     */\r\n    focus(): void;\r\n    private _cycleToSelected;\r\n    private _getSlideEventDirection;\r\n    private _getSlideById;\r\n    private _getSlideIdxById;\r\n    private _getNextSlide;\r\n    private _getPrevSlide;\r\n    private _getSlideElement;\r\n}\r\n/**\r\n * A slide change event emitted right after the slide transition is completed.\r\n */\r\nexport interface NgbSlideEvent {\r\n    /**\r\n     * The previous slide id.\r\n     */\r\n    prev: string;\r\n    /**\r\n     * The current slide id.\r\n     */\r\n    current: string;\r\n    /**\r\n     * The slide event direction.\r\n     *\r\n     * Possible values are `'left' | 'right'`.\r\n     */\r\n    direction: NgbSlideEventDirection;\r\n    /**\r\n     * Whether the pause() method was called (and no cycle() call was done afterwards).\r\n     *\r\n     * @since 5.1.0\r\n     */\r\n    paused: boolean;\r\n    /**\r\n     * Source triggering the slide change event.\r\n     *\r\n     * Possible values are `'timer' | 'arrowLeft' | 'arrowRight' | 'indicator'`\r\n     *\r\n     * @since 5.1.0\r\n     */\r\n    source?: NgbSlideEventSource;\r\n}\r\n/**\r\n * A slide change event emitted right after the slide transition is completed.\r\n *\r\n * @since 8.0.0\r\n */\r\nexport interface NgbSingleSlideEvent {\r\n    /**\r\n     * true if the slide is shown, false otherwise\r\n     */\r\n    isShown: boolean;\r\n    /**\r\n     * The slide event direction.\r\n     *\r\n     * Possible values are `'left' | 'right'`.\r\n     */\r\n    direction: NgbSlideEventDirection;\r\n    /**\r\n     * Source triggering the slide change event.\r\n     *\r\n     * Possible values are `'timer' | 'arrowLeft' | 'arrowRight' | 'indicator'`\r\n     *\r\n     */\r\n    source?: NgbSlideEventSource;\r\n}\r\nexport declare enum NgbSlideEventSource {\r\n    TIMER = \"timer\",\r\n    ARROW_LEFT = \"arrowLeft\",\r\n    ARROW_RIGHT = \"arrowRight\",\r\n    INDICATOR = \"indicator\"\r\n}\r\nexport declare const NGB_CAROUSEL_DIRECTIVES: (typeof NgbSlide | typeof NgbCarousel)[];\r\n"]}