{"version":3,"file":"checkbox.d.ts","sources":["checkbox.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { NgbButtonLabel } from './label';\r\n/**\r\n * Allows to easily create Bootstrap-style checkbox buttons.\r\n *\r\n * Integrates with forms, so the value of a checked button is bound to the underlying form control\r\n * either in a reactive or template-driven way.\r\n */\r\nexport declare class NgbCheckBox implements ControlValueAccessor {\r\n    private _label;\r\n    private _cd;\r\n    static ngAcceptInputType_disabled: boolean | '';\r\n    checked: any;\r\n    /**\r\n     * If `true`, the checkbox button will be disabled\r\n     */\r\n    disabled: boolean;\r\n    /**\r\n     * The form control value when the checkbox is checked.\r\n     */\r\n    valueChecked: boolean;\r\n    /**\r\n     * The form control value when the checkbox is unchecked.\r\n     */\r\n    valueUnChecked: boolean;\r\n    onChange: (_: any) => void;\r\n    onTouched: () => void;\r\n    set focused(isFocused: boolean);\r\n    constructor(_label: NgbButtonLabel, _cd: ChangeDetectorRef);\r\n    onInputChange($event: any): void;\r\n    registerOnChange(fn: (value: any) => any): void;\r\n    registerOnTouched(fn: () => any): void;\r\n    setDisabledState(isDisabled: boolean): void;\r\n    writeValue(value: any): void;\r\n}\r\n"]}