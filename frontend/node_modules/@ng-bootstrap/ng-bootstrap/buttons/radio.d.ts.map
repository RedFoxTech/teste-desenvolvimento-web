{"version":3,"file":"radio.d.ts","sources":["radio.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, ElementRef, OnDestroy, Renderer2 } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { NgbButtonLabel } from './label';\r\n/**\r\n * Allows to easily create Bootstrap-style radio buttons.\r\n *\r\n * Integrates with forms, so the value of a checked button is bound to the underlying form control\r\n * either in a reactive or template-driven way.\r\n */\r\nexport declare class NgbRadioGroup implements ControlValueAccessor {\r\n    private _radios;\r\n    private _value;\r\n    private _disabled;\r\n    get disabled(): boolean;\r\n    set disabled(isDisabled: boolean);\r\n    /**\r\n     * Name of the radio group applied to radio input elements.\r\n     *\r\n     * Will be applied to all radio input elements inside the group,\r\n     * unless [`NgbRadio`](#/components/buttons/api#NgbRadio)'s specify names themselves.\r\n     *\r\n     * If not provided, will be generated in the `ngb-radio-xx` format.\r\n     */\r\n    name: string;\r\n    onChange: (_: any) => void;\r\n    onTouched: () => void;\r\n    onRadioChange(radio: NgbRadio): void;\r\n    onRadioValueUpdate(): void;\r\n    register(radio: NgbRadio): void;\r\n    registerOnChange(fn: (value: any) => any): void;\r\n    registerOnTouched(fn: () => any): void;\r\n    setDisabledState(isDisabled: boolean): void;\r\n    unregister(radio: NgbRadio): void;\r\n    writeValue(value: any): void;\r\n    private _updateRadiosValue;\r\n    private _updateRadiosDisabled;\r\n}\r\n/**\r\n * A directive that marks an input of type \"radio\" as a part of the\r\n * [`NgbRadioGroup`](#/components/buttons/api#NgbRadioGroup).\r\n */\r\nexport declare class NgbRadio implements OnDestroy {\r\n    private _group;\r\n    private _label;\r\n    private _renderer;\r\n    private _element;\r\n    private _cd;\r\n    static ngAcceptInputType_disabled: boolean | '';\r\n    private _checked;\r\n    private _disabled;\r\n    private _value;\r\n    /**\r\n     * The value for the 'name' property of the input element.\r\n     *\r\n     * All inputs of the radio group should have the same name. If not specified,\r\n     * the name of the enclosing group is used.\r\n     */\r\n    name: string;\r\n    /**\r\n     * The form control value when current radio button is checked.\r\n     */\r\n    set value(value: any);\r\n    /**\r\n     * If `true`, current radio button will be disabled.\r\n     */\r\n    set disabled(isDisabled: boolean);\r\n    set focused(isFocused: boolean);\r\n    get checked(): boolean;\r\n    get disabled(): boolean;\r\n    get value(): any;\r\n    get nameAttr(): string;\r\n    constructor(_group: NgbRadioGroup, _label: NgbButtonLabel, _renderer: Renderer2, _element: ElementRef<HTMLInputElement>, _cd: ChangeDetectorRef);\r\n    ngOnDestroy(): void;\r\n    onChange(): void;\r\n    updateValue(value: any): void;\r\n    updateDisabled(): void;\r\n}\r\n"]}