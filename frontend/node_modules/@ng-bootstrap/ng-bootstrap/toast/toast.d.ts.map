{"version":3,"file":"toast.d.ts","sources":["toast.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterContentInit, EventEmitter, OnChanges, SimpleChanges, TemplateRef, ElementRef, NgZone } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { NgbToastConfig } from './toast-config';\r\n/**\r\n * This directive allows the usage of HTML markup or other directives\r\n * inside of the toast's header.\r\n *\r\n * @since 5.0.0\r\n */\r\nexport declare class NgbToastHeader {\r\n}\r\n/**\r\n * Toasts provide feedback messages as notifications to the user.\r\n * Goal is to mimic the push notifications available both on mobile and desktop operating systems.\r\n *\r\n * @since 5.0.0\r\n */\r\nexport declare class NgbToast implements AfterContentInit, OnChanges {\r\n    ariaLive: string;\r\n    private _zone;\r\n    private _element;\r\n    /**\r\n     * If `true`, toast opening and closing will be animated.\r\n     *\r\n     * Animation is triggered only when the `.hide()` or `.show()` functions are called\r\n     *\r\n     * @since 8.0.0\r\n     */\r\n    animation: boolean;\r\n    private _timeoutID;\r\n    /**\r\n     * Delay after which the toast will hide (ms).\r\n     * default: `500` (ms) (inherited from NgbToastConfig)\r\n     */\r\n    delay: number;\r\n    /**\r\n     * Auto hide the toast after a delay in ms.\r\n     * default: `true` (inherited from NgbToastConfig)\r\n     */\r\n    autohide: boolean;\r\n    /**\r\n     * Text to be used as toast's header.\r\n     * Ignored if a ContentChild template is specified at the same time.\r\n     */\r\n    header: string;\r\n    /**\r\n     * A template like `<ng-template ngbToastHeader></ng-template>` can be\r\n     * used in the projected content to allow markup usage.\r\n     */\r\n    contentHeaderTpl: TemplateRef<any> | null;\r\n    /**\r\n     * An event fired after the animation triggered by calling `.show()` method has finished.\r\n     *\r\n     * @since 8.0.0\r\n     */\r\n    shown: EventEmitter<void>;\r\n    /**\r\n     * An event fired after the animation triggered by calling `.hide()` method has finished.\r\n     *\r\n     * It can only occur in 2 different scenarios:\r\n     * - `autohide` timeout fires\r\n     * - user clicks on a closing cross\r\n     *\r\n     * Additionally this output is purely informative. The toast won't be removed from DOM automatically, it's up\r\n     * to the user to take care of that.\r\n     *\r\n     * @since 8.0.0\r\n     */\r\n    hidden: EventEmitter<void>;\r\n    constructor(ariaLive: string, config: NgbToastConfig, _zone: NgZone, _element: ElementRef);\r\n    ngAfterContentInit(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    /**\r\n     * Triggers toast closing programmatically.\r\n     *\r\n     * The returned observable will emit and be completed once the closing transition has finished.\r\n     * If the animations are turned off this happens synchronously.\r\n     *\r\n     * Alternatively you could listen or subscribe to the `(hidden)` output\r\n     *\r\n     * @since 8.0.0\r\n     */\r\n    hide(): Observable<void>;\r\n    /**\r\n     * Triggers toast opening programmatically.\r\n     *\r\n     * The returned observable will emit and be completed once the opening transition has finished.\r\n     * If the animations are turned off this happens synchronously.\r\n     *\r\n     * Alternatively you could listen or subscribe to the `(shown)` output\r\n     *\r\n     * @since 8.0.0\r\n     */\r\n    show(): Observable<void>;\r\n    private _init;\r\n    private _clearTimeout;\r\n}\r\n"]}