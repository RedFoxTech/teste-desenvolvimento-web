{"version":3,"file":"toast-config.d.ts","sources":["toast-config.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { NgbConfig } from '../ngb-config';\r\n/**\r\n * Interface used to type all toast config options. See `NgbToastConfig`.\r\n *\r\n * @since 5.0.0\r\n */\r\nexport interface NgbToastOptions {\r\n    /**\r\n     * Specify if the toast component should emit the `hide()` output\r\n     * after a certain `delay` in ms.\r\n     */\r\n    autohide?: boolean;\r\n    /**\r\n     * Delay in ms after which the `hide()` output should be emitted.\r\n     */\r\n    delay?: number;\r\n    /**\r\n     * Type of aria-live attribute to be used.\r\n     *\r\n     * Could be one of these 2 values (as string):\r\n     * - `polite` (default)\r\n     * - `alert`\r\n     */\r\n    ariaLive?: 'polite' | 'alert';\r\n}\r\n/**\r\n * Configuration service for the NgbToast component. You can inject this service, typically in your root component,\r\n * and customize the values of its properties in order to provide default values for all the toasts used in the\r\n * application.\r\n *\r\n * @since 5.0.0\r\n */\r\nexport declare class NgbToastConfig implements NgbToastOptions {\r\n    private _ngbConfig;\r\n    autohide: boolean;\r\n    delay: number;\r\n    ariaLive: 'polite' | 'alert';\r\n    private _animation;\r\n    constructor(_ngbConfig: NgbConfig);\r\n    get animation(): boolean;\r\n    set animation(animation: boolean);\r\n}\r\n"]}