export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"api.js","sourceRoot":"","sources":["../../../../../../../../packages/compiler/src/render3/partial/api.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ChangeDetectionStrategy, ViewEncapsulation} from '../../core';\nimport * as o from '../../output/output_ast';\n\nexport interface R3PartialDeclaration {\n  /**\n   * Version number of the Angular compiler that was used to compile this declaration. The linker\n   * will be able to detect which version a library is using and interpret its metadata accordingly.\n   */\n  version: string;\n\n  /**\n   * A reference to the `@angular/core` ES module, which allows access\n   * to all Angular exports, including Ivy instructions.\n   */\n  ngImport: o.Expression;\n}\n\n/**\n * Describes the shape of the object that the `ɵɵngDeclareDirective() function accepts.\n *\n * This interface serves primarily as documentation, as conformance to this interface is not\n * enforced during linking.\n */\nexport interface R3DeclareDirectiveMetadata extends R3PartialDeclaration {\n  /**\n   * Unparsed selector of the directive.\n   */\n  selector?: string;\n\n  /**\n   * Reference to the directive class itself.\n   */\n  type: o.Expression;\n\n  /**\n   * A mapping of inputs from class property names to binding property names, or to a tuple of\n   * binding property name and class property name if the names are different.\n   */\n  inputs?: {[classPropertyName: string]: string|[string, string]};\n\n  /**\n   * A mapping of outputs from class property names to binding property names.\n   */\n  outputs?: {[classPropertyName: string]: string};\n\n  /**\n   * Information about host bindings present on the component.\n   */\n  host?: {\n    /**\n     * A mapping of attribute names to their value expression.\n     */\n    attributes?: {[key: string]: o.Expression};\n\n    /**\n     * A mapping of event names to their unparsed event handler expression.\n     */\n    listeners: {[key: string]: string};\n\n    /**\n     * A mapping of bound properties to their unparsed binding expression.\n     */\n    properties?: {[key: string]: string};\n\n    /**\n     * The value of the class attribute, if present. This is stored outside of `attributes` as its\n     * string value must be known statically.\n     */\n    classAttribute?: string;\n\n    /**\n     * The value of the style attribute, if present. This is stored outside of `attributes` as its\n     * string value must be known statically.\n     */\n    styleAttribute?: string;\n  };\n\n  /**\n   * Information about the content queries made by the directive.\n   */\n  queries?: R3DeclareQueryMetadata[];\n\n  /**\n   * Information about the view queries made by the directive.\n   */\n  viewQueries?: R3DeclareQueryMetadata[];\n\n  /**\n   * The list of providers provided by the directive.\n   */\n  providers?: o.Expression;\n\n  /**\n   * The names by which the directive is exported.\n   */\n  exportAs?: string[];\n\n  /**\n   * Whether the directive has an inheritance clause. Defaults to false.\n   */\n  usesInheritance?: boolean;\n\n  /**\n   * Whether the directive implements the `ngOnChanges` hook. Defaults to false.\n   */\n  usesOnChanges?: boolean;\n}\n\n/**\n * Describes the shape of the object that the `ɵɵngDeclareComponent()` function accepts.\n *\n * This interface serves primarily as documentation, as conformance to this interface is not\n * enforced during linking.\n */\nexport interface R3DeclareComponentMetadata extends R3DeclareDirectiveMetadata {\n  /**\n   * The component's unparsed template string as opaque expression. The template is represented\n   * using either a string literal or template literal without substitutions, but its value is\n   * not read directly. Instead, the template parser is given the full source file's text and\n   * the range of this expression to parse directly from source.\n   */\n  template: o.Expression;\n\n  /**\n   * Whether the template was inline (using `template`) or external (using `templateUrl`).\n   * Defaults to false.\n   */\n  isInline?: boolean;\n\n  /**\n   * CSS from inline styles and included styleUrls.\n   */\n  styles?: string[];\n\n  /**\n   * List of directives which matched in the template, including sufficient\n   * metadata for each directive to attribute bindings and references within\n   * the template to each directive specifically, if the runtime instructions\n   * support this.\n   */\n  directives?: {\n    /**\n     * Selector of the directive.\n     */\n    selector: string;\n\n    /**\n     * Reference to the directive class (possibly a forward reference wrapped in a `forwardRef`\n     * invocation).\n     */\n    type: o.Expression | (() => o.Expression);\n\n    /**\n     * Property names of the directive's inputs.\n     */\n    inputs?: string[];\n\n    /**\n     * Event names of the directive's outputs.\n     */\n    outputs?: string[];\n\n    /**\n     * Names by which this directive exports itself for references.\n     */\n    exportAs?: string[];\n  }[];\n\n  /**\n   * A map of pipe names to an expression referencing the pipe type (possibly a forward reference\n   * wrapped in a `forwardRef` invocation) which are used in the template.\n   */\n  pipes?: {[pipeName: string]: o.Expression|(() => o.Expression)};\n\n  /**\n   * The list of view providers defined in the component.\n   */\n  viewProviders?: o.Expression;\n\n  /**\n   * A collection of animation triggers that will be used in the component template.\n   */\n  animations?: o.Expression;\n\n  /**\n   * Strategy used for detecting changes in the component.\n   * Defaults to `ChangeDetectionStrategy.Default`.\n   */\n  changeDetection?: ChangeDetectionStrategy;\n\n  /**\n   * An encapsulation policy for the template and CSS styles.\n   * Defaults to `ViewEncapsulation.Emulated`.\n   */\n  encapsulation?: ViewEncapsulation;\n\n  /**\n   * Overrides the default interpolation start and end delimiters. Defaults to {{ and }}.\n   */\n  interpolation?: [string, string];\n\n  /**\n   * Whether whitespace in the template should be preserved. Defaults to false.\n   */\n  preserveWhitespaces?: boolean;\n}\n\nexport interface R3DeclareQueryMetadata {\n  /**\n   * Name of the property on the class to update with query results.\n   */\n  propertyName: string;\n\n  /**\n   * Whether to read only the first matching result, or an array of results. Defaults to false.\n   */\n  first?: boolean;\n\n  /**\n   * Either an expression representing a type or `InjectionToken` for the query\n   * predicate, or a set of string selectors.\n   */\n  predicate: o.Expression|string[];\n\n  /**\n   * Whether to include only direct children or all descendants. Defaults to false.\n   */\n  descendants?: boolean;\n\n  /**\n   * True to only fire changes if there are underlying changes to the query.\n   */\n  // TODO(misko):  This will become `true` be default in v12. `QueryList.changes` would fire even if\n  // no changes to the query list were detected. This is not ideal, as changes should only fire if\n  // the `QueryList` actually materially changed.\n  emitDistinctChangesOnly?: boolean;\n\n  /**\n   * An expression representing a type to read from each matched node, or null if the default value\n   * for a given node is to be returned.\n   */\n  read?: o.Expression;\n\n  /**\n   * Whether or not this query should collect only static results. Defaults to false.\n   *\n   * If static is true, the query's results will be set on the component after nodes are created,\n   * but before change detection runs. This means that any results that relied upon change detection\n   * to run (e.g. results inside *ngIf or *ngFor views) will not be collected. Query results are\n   * available in the ngOnInit hook.\n   *\n   * If static is false, the query's results will be set on the component after change detection\n   * runs. This means that the query results can contain nodes inside *ngIf or *ngFor views, but\n   * the results will not be available in the ngOnInit hook (only in the ngAfterContentInit for\n   * content hooks and ngAfterViewInit for view hooks).\n   */\n  static?: boolean;\n}\n\n/**\n * Describes the shape of the object that the `ɵɵngDeclarePipe()` function accepts.\n *\n * This interface serves primarily as documentation, as conformance to this interface is not\n * enforced during linking.\n */\nexport interface R3DeclarePipeMetadata extends R3PartialDeclaration {\n  /**\n   * Reference to the pipe class itself.\n   */\n  type: o.Expression;\n\n  /**\n   * The name to use in templates to refer to this pipe.\n   */\n  name: string;\n\n  /**\n   * Whether this pipe is \"pure\".\n   *\n   * A pure pipe's `transform()` method is only invoked when its input arguments change.\n   *\n   * Default: true.\n   */\n  pure?: boolean;\n}\n"]}