/**
 * Conversions for data.
 * @private
 * @see https://en.wikipedia.org/wiki/Orders_of_magnitude_(data)
 * @see https://en.wikipedia.org/wiki/Units_of_information
 * @see https://en.wikipedia.org/wiki/Template:Information_units
 */
var data = {
  bit: {
    ratio: 1
  },
  bits: {
    ratio: 1
  },
  b: {
    ratio: 1
  },
  unibit: {
    ratio: 1
  },
  unibits: {
    ratio: 1
  },
  millibit: {
    ratio: 1e-3
  },
  millibits: {
    ratio: 1e-3
  },
  centibit: {
    ratio: 1e-2
  },
  centibits: {
    ratio: 1e-2
  },
  decibit: {
    ratio: 1e-1
  },
  decibits: {
    ratio: 1e-1
  },
  crumb: {
    ratio: 2
  },
  crumbs: {
    ratio: 2
  },
  dibit: {
    ratio: 2
  },
  dibits: {
    ratio: 2
  },
  triad: {
    ratio: 3
  },
  triads: {
    ratio: 3
  },
  triade: {
    ratio: 3
  },
  triades: {
    ratio: 3
  },
  tribit: {
    ratio: 3
  },
  tribits: {
    ratio: 3
  },
  nibble: {
    ratio: 4
  },
  nibbles: {
    ratio: 4
  },
  tetrad: {
    ratio: 4
  },
  tetrads: {
    ratio: 4
  },
  tetrade: {
    ratio: 4
  },
  tetrades: {
    ratio: 4
  },
  quadbit: {
    ratio: 4
  },
  quadbits: {
    ratio: 4
  },
  semioctet: {
    ratio: 4
  },
  semioctets: {
    ratio: 4
  },
  halfbyte: {
    ratio: 4
  },
  halfbytes: {
    ratio: 4
  },
  quartet: {
    ratio: 4
  },
  quartets: {
    ratio: 4
  },
  pentad: {
    ratio: 5
  },
  pentads: {
    ratio: 5
  },
  hexad: {
    ratio: 6
  },
  hexads: {
    ratio: 6
  },
  hexade: {
    ratio: 6
  },
  hexades: {
    ratio: 6
  },
  sextet: {
    ratio: 6
  },
  sextets: {
    ratio: 6
  },
  heptad: {
    ratio: 7
  },
  heptads: {
    ratio: 7
  },
  heptade: {
    ratio: 7
  },
  heptades: {
    ratio: 7
  },
  "byte": {
    ratio: 8
  },
  bytes: {
    ratio: 8
  },
  B: {
    ratio: 8
  },
  octect: {
    ratio: 8
  },
  octects: {
    ratio: 8
  },
  octad: {
    ratio: 8
  },
  octads: {
    ratio: 8
  },
  octade: {
    ratio: 8
  },
  octades: {
    ratio: 8
  },
  decabit: {
    ratio: 10
  },
  decabits: {
    ratio: 10
  },
  declet: {
    ratio: 10
  },
  decle: {
    ratio: 10
  },
  deckle: {
    ratio: 10
  },
  slab: {
    ratio: 12
  },
  slabs: {
    ratio: 12
  },
  hextet: {
    ratio: 16
  },
  hextets: {
    ratio: 16
  },
  catena: {
    ratio: 24
  },
  catenas: {
    ratio: 24
  },
  hectobit: {
    ratio: 1e2
  },
  hectobits: {
    ratio: 1e2
  },
  hbit: {
    ratio: 1e2
  },
  kilobit: {
    ratio: 1e3
  },
  kilobits: {
    ratio: 1e3
  },
  kbit: {
    ratio: 1e3
  },
  kibibit: {
    ratio: /*#__PURE__*/Math.pow(2, 10)
  },
  kibibits: {
    ratio: /*#__PURE__*/Math.pow(2, 10)
  },
  Kibit: {
    ratio: /*#__PURE__*/Math.pow(2, 10)
  },
  kilobyte: {
    ratio: 8e3
  },
  kilobytes: {
    ratio: 8e3
  },
  kB: {
    ratio: 8e3
  },
  kibibyte: {
    ratio: /*#__PURE__*/Math.pow(2, 13)
  },
  kibibytes: {
    ratio: /*#__PURE__*/Math.pow(2, 13)
  },
  KiB: {
    ratio: /*#__PURE__*/Math.pow(2, 13)
  },
  megabit: {
    ratio: 1e6
  },
  megabits: {
    ratio: 1e6
  },
  Mbit: {
    ratio: 1e6
  },
  mebibit: {
    ratio: /*#__PURE__*/Math.pow(2, 10)
  },
  mebibits: {
    ratio: /*#__PURE__*/Math.pow(2, 10)
  },
  Mibit: {
    ratio: /*#__PURE__*/Math.pow(2, 10)
  },
  megabyte: {
    ratio: 8e6
  },
  megabytes: {
    ratio: 8e6
  },
  MB: {
    ratio: 8e6
  },
  mebibyte: {
    ratio: /*#__PURE__*/Math.pow(2, 13)
  },
  mebibytes: {
    ratio: /*#__PURE__*/Math.pow(2, 13)
  },
  MiB: {
    ratio: /*#__PURE__*/Math.pow(2, 13)
  },
  gigabit: {
    ratio: /*#__PURE__*/Math.pow(2, 20)
  },
  gigabits: {
    ratio: /*#__PURE__*/Math.pow(2, 20)
  },
  Gbit: {
    ratio: /*#__PURE__*/Math.pow(2, 20)
  },
  gibibit: {
    ratio: /*#__PURE__*/Math.pow(2, 23)
  },
  gibibits: {
    ratio: /*#__PURE__*/Math.pow(2, 23)
  },
  Gibit: {
    ratio: /*#__PURE__*/Math.pow(2, 23)
  },
  gigabyte: {
    ratio: /*#__PURE__*/Math.pow(2, 30)
  },
  gigabytes: {
    ratio: /*#__PURE__*/Math.pow(2, 30)
  },
  GB: {
    ratio: /*#__PURE__*/Math.pow(2, 30)
  },
  gibibyte: {
    ratio: /*#__PURE__*/Math.pow(2, 33)
  },
  gibibytes: {
    ratio: /*#__PURE__*/Math.pow(2, 33)
  },
  GiB: {
    ratio: /*#__PURE__*/Math.pow(2, 33)
  },
  terabit: {
    ratio: 1e12
  },
  terabits: {
    ratio: 1e12
  },
  Tbit: {
    ratio: 1e12
  },
  tebibit: {
    ratio: 2 * 40
  },
  tebibits: {
    ratio: 2 * 40
  },
  Tibit: {
    ratio: 2 * 40
  },
  terabyte: {
    ratio: 8e12
  },
  terabytes: {
    ratio: 8e12
  },
  TB: {
    ratio: 8e12
  },
  tebibyte: {
    ratio: /*#__PURE__*/Math.pow(2, 43)
  },
  tebibytes: {
    ratio: /*#__PURE__*/Math.pow(2, 43)
  },
  TiB: {
    ratio: /*#__PURE__*/Math.pow(2, 43)
  },
  petabit: {
    ratio: 1e15
  },
  petabits: {
    ratio: 1e15
  },
  Pbit: {
    ratio: 1e15
  },
  pebibit: {
    ratio: /*#__PURE__*/Math.pow(2, 50)
  },
  pebibits: {
    ratio: /*#__PURE__*/Math.pow(2, 50)
  },
  Pibit: {
    ratio: /*#__PURE__*/Math.pow(2, 50)
  },
  petabyte: {
    ratio: 1e15
  },
  petabytes: {
    ratio: 1e15
  },
  PB: {
    ratio: 1e15
  },
  pebibyte: {
    ratio: /*#__PURE__*/Math.pow(2, 53)
  },
  pebibytes: {
    ratio: /*#__PURE__*/Math.pow(2, 53)
  },
  PiB: {
    ratio: /*#__PURE__*/Math.pow(2, 53)
  }
};

/**
 * Conversions for length.
 * @private
 */
var length = {
  meter: {
    ratio: 1
  },
  meters: {
    ratio: 1
  },
  metre: {
    ratio: 1
  },
  m: {
    ratio: 1
  },
  petameter: {
    ratio: 1e15
  },
  petameters: {
    ratio: 1e15
  },
  Pm: {
    ratio: 1e15
  },
  terameter: {
    ratio: 1e12
  },
  terameters: {
    ratio: 1e12
  },
  Tm: {
    ratio: 1e12
  },
  gigameter: {
    ratio: 1e9
  },
  gigameters: {
    ratio: 1e9
  },
  Gm: {
    ratio: 1e9
  },
  megameter: {
    ratio: 1e6
  },
  megameters: {
    ratio: 1e6
  },
  Mm: {
    ratio: 1e6
  },
  kilometer: {
    ratio: 1e3
  },
  kilometers: {
    ratio: 1e3
  },
  km: {
    ratio: 1e3
  },
  hectometer: {
    ratio: 1e2
  },
  hectometers: {
    ratio: 1e2
  },
  hm: {
    ratio: 1e2
  },
  decameter: {
    ratio: 10
  },
  decameters: {
    ratio: 10
  },
  dam: {
    ratio: 10
  },
  decimeter: {
    ratio: 1e-1
  },
  decimeters: {
    ratio: 1e-1
  },
  dm: {
    ratio: 1e-1
  },
  centimeter: {
    ratio: 1e-2
  },
  centimeters: {
    ratio: 1e-2
  },
  cm: {
    ratio: 1e-2
  },
  millimeter: {
    ratio: 1e-3
  },
  millimeters: {
    ratio: 1e-3
  },
  mm: {
    ratio: 1e-3
  },
  micrometer: {
    ratio: 1e-7
  },
  micrometers: {
    ratio: 1e-7
  },
  μm: {
    ratio: 1e-7
  },
  nanometer: {
    ratio: 1e-9
  },
  nanometers: {
    ratio: 1e-9
  },
  nm: {
    ratio: 1e-9
  },
  picometer: {
    ratio: 1e-12
  },
  picometers: {
    ratio: 1e-12
  },
  pm: {
    ratio: 1e-12
  },
  femtometer: {
    ratio: 1e-15
  },
  femtometers: {
    ratio: 1e-15
  },
  fm: {
    ratio: 1e-15
  },
  foot: {
    ratio: 0.3048
  },
  feet: {
    ratio: 0.3048
  },
  ft: {
    ratio: 0.3048
  },
  inch: {
    ratio: 0.0254
  },
  inches: {
    ratio: 0.0254
  },
  "in": {
    ratio: 0.0254
  },
  yard: {
    ratio: 0.9144
  },
  yards: {
    ratio: 0.9144
  },
  yd: {
    ratio: 0.9144
  },
  mile: {
    ratio: 1609.344
  },
  miles: {
    ratio: 1609.344
  },
  mi: {
    ratio: 1609.344
  },
  'nautical mile': {
    ratio: 1852
  },
  'nautical miles': {
    ratio: 1852
  },
  M: {
    ratio: 1852
  },
  NM: {
    ratio: 1852
  },
  nmi: {
    ratio: 1852
  }
};

var poundInGrams = 4.5359237e2;
/**
 * Conversions for mass.
 * @private
 */

var mass = {
  kilogram: {
    ratio: 1e3
  },
  kilograms: {
    ratio: 1e3
  },
  kg: {
    ratio: 1e3
  },
  gram: {
    ratio: 1
  },
  grams: {
    ratio: 1
  },
  g: {
    ratio: 1
  },
  decagram: {
    ratio: 10
  },
  decagrams: {
    ratio: 10
  },
  dag: {
    ratio: 10
  },
  hectogram: {
    ratio: 1e2
  },
  hectograms: {
    ratio: 1e2
  },
  hg: {
    ratio: 1e2
  },
  megagram: {
    ratio: 1e6
  },
  megagrams: {
    ratio: 1e6
  },
  Mg: {
    ratio: 1e6
  },
  tonne: {
    ratio: 1e6
  },
  tonnes: {
    ratio: 1e6
  },
  'metric ton': {
    ratio: 1e6
  },
  'metric tons': {
    ratio: 1e6
  },
  t: {
    ratio: 1e6
  },
  gigagram: {
    ratio: 1e9
  },
  gigagrams: {
    ratio: 1e9
  },
  Gg: {
    ratio: 1e9
  },
  teragram: {
    ratio: 1e12
  },
  teragrams: {
    ratio: 1e12
  },
  Tg: {
    ratio: 1e12
  },
  petagram: {
    ratio: 1e15
  },
  petagrams: {
    ratio: 1e15
  },
  Pg: {
    ratio: 1e15
  },
  exagram: {
    ratio: 1e18
  },
  exagrams: {
    ratio: 1e18
  },
  Eg: {
    ratio: 1e18
  },
  zettagram: {
    ratio: 1e21
  },
  zettagrams: {
    ratio: 1e21
  },
  Zg: {
    ratio: 1e21
  },
  yottagram: {
    ratio: 1e24
  },
  yottagrams: {
    ratio: 1e24
  },
  Yg: {
    ratio: 1e24
  },
  decigram: {
    ratio: 1e-1
  },
  decigrams: {
    ratio: 1e-1
  },
  dg: {
    ratio: 1e-1
  },
  centigram: {
    ratio: 1e-2
  },
  centigrams: {
    ratio: 1e-2
  },
  cg: {
    ratio: 1e-2
  },
  milligram: {
    ratio: 1e-3
  },
  milligrams: {
    ratio: 1e-3
  },
  mg: {
    ratio: 1e-3
  },
  microgram: {
    ratio: 1e-6
  },
  micrograms: {
    ratio: 1e-6
  },
  µg: {
    ratio: 1e-6
  },
  nanogram: {
    ratio: 1e-9
  },
  nanograms: {
    ratio: 1e-9
  },
  ng: {
    ratio: 1e-9
  },
  picogram: {
    ratio: 1e-12
  },
  picograms: {
    ratio: 1e-12
  },
  pg: {
    ratio: 1e-12
  },
  femtogram: {
    ratio: 1e-15
  },
  femtograms: {
    ratio: 1e-15
  },
  fg: {
    ratio: 1e-15
  },
  attogram: {
    ratio: 1e-18
  },
  attograms: {
    ratio: 1e-18
  },
  ag: {
    ratio: 1e-18
  },
  zeptogram: {
    ratio: 1e-21
  },
  zeptograms: {
    ratio: 1e-21
  },
  zg: {
    ratio: 1e-21
  },
  yoctogram: {
    ratio: 1e-24
  },
  yoctograms: {
    ratio: 1e-24
  },
  yg: {
    ratio: 1e-24
  },
  pound: {
    ratio: poundInGrams
  },
  pounds: {
    ratio: poundInGrams
  },
  lb: {
    ratio: poundInGrams
  },
  stone: {
    ratio: poundInGrams * 14
  },
  stones: {
    ratio: poundInGrams * 14
  },
  st: {
    ratio: poundInGrams * 14
  },
  ounce: {
    ratio: poundInGrams / 16
  },
  ounces: {
    ratio: poundInGrams / 16
  },
  oz: {
    ratio: poundInGrams / 16
  },
  '℥': {
    ratio: poundInGrams / 16
  },
  'short ton': {
    ratio: poundInGrams * 2000
  },
  'short tons': {
    ratio: poundInGrams * 2000
  },
  'us ton': {
    ratio: poundInGrams * 2000
  },
  'us tons': {
    ratio: poundInGrams * 2000
  },
  'long ton': {
    ratio: poundInGrams * 2240
  },
  'long tons': {
    ratio: poundInGrams * 2240
  },
  'imperial ton': {
    ratio: poundInGrams * 2240
  },
  'imperial tons': {
    ratio: poundInGrams * 2240
  },
  'displacement ton': {
    ratio: poundInGrams * 2240
  },
  'displacement tons': {
    ratio: poundInGrams * 2240
  }
};

/**
 * Conversions for pressure.
 * @private
 */
var pressure = {
  pascal: {
    ratio: 1
  },
  pascals: {
    ratio: 1
  },
  Pa: {
    ratio: 1
  },
  femtopascal: {
    ratio: 1e-15
  },
  femtopascals: {
    ratio: 1e-15
  },
  fPa: {
    ratio: 1e-15
  },
  picopascal: {
    ratio: 1e-12
  },
  picopascals: {
    ratio: 1e-12
  },
  pPa: {
    ratio: 1e-12
  },
  nanopascal: {
    ratio: 1e-9
  },
  nanopascals: {
    ratio: 1e-9
  },
  nPa: {
    ratio: 1e-9
  },
  micropascal: {
    ratio: 1e-6
  },
  micropascals: {
    ratio: 1e-6
  },
  μPa: {
    ratio: 1e-6
  },
  millipascal: {
    ratio: 1e-3
  },
  millipascals: {
    ratio: 1e-3
  },
  mPa: {
    ratio: 1e-3
  },
  centipascal: {
    ratio: 1e-2
  },
  centipascals: {
    ratio: 1e-2
  },
  cPa: {
    ratio: 1e-2
  },
  decipascal: {
    ratio: 0.1
  },
  decipascals: {
    ratio: 0.1
  },
  dPa: {
    ratio: 0.1
  },
  decapascal: {
    ratio: 10
  },
  decapascals: {
    ratio: 10
  },
  daPa: {
    ratio: 10
  },
  hectopascal: {
    ratio: 1e2
  },
  hectopascals: {
    ratio: 1e2
  },
  hPa: {
    ratio: 1e2
  },
  kilopascal: {
    ratio: 1e3
  },
  kilopascals: {
    ratio: 1e3
  },
  kPa: {
    ratio: 1e3
  },
  megapascal: {
    ratio: 1e6
  },
  megapascals: {
    ratio: 1e6
  },
  MPa: {
    ratio: 1e6
  },
  gigapascal: {
    ratio: 1e9
  },
  gigapascals: {
    ratio: 1e9
  },
  GPa: {
    ratio: 1e9
  },
  terapascal: {
    ratio: 1e12
  },
  terapascals: {
    ratio: 1e12
  },
  TPa: {
    ratio: 1e12
  },
  petapascal: {
    ratio: 1e15
  },
  petapascals: {
    ratio: 1e15
  },
  PPa: {
    ratio: 1e15
  },
  bar: {
    ratio: 1e5
  },
  femtobar: {
    ratio: 1e-15
  },
  femtobars: {
    ratio: 1e-15
  },
  fbar: {
    ratio: 1e-15
  },
  picobar: {
    ratio: 1e-12
  },
  picobars: {
    ratio: 1e-12
  },
  pbar: {
    ratio: 1e-12
  },
  nanobar: {
    ratio: 1e-9
  },
  nanobars: {
    ratio: 1e-9
  },
  nbar: {
    ratio: 1e-9
  },
  microbar: {
    ratio: 1e-6
  },
  microbars: {
    ratio: 1e-6
  },
  μbar: {
    ratio: 1e-6
  },
  millibar: {
    ratio: 1e-3
  },
  millibars: {
    ratio: 1e-3
  },
  mbar: {
    ratio: 1e-3
  },
  centibar: {
    ratio: 1e-2
  },
  centibars: {
    ratio: 1e-2
  },
  cbar: {
    ratio: 1e-2
  },
  decibar: {
    ratio: 0.1
  },
  decibars: {
    ratio: 0.1
  },
  dbar: {
    ratio: 0.1
  },
  decabar: {
    ratio: 10
  },
  decabars: {
    ratio: 10
  },
  dabar: {
    ratio: 10
  },
  hectobar: {
    ratio: 1e2
  },
  hectobars: {
    ratio: 1e2
  },
  hbar: {
    ratio: 1e2
  },
  kilobar: {
    ratio: 1e3
  },
  kilobars: {
    ratio: 1e3
  },
  kbar: {
    ratio: 1e3
  },
  megabar: {
    ratio: 1e6
  },
  megabars: {
    ratio: 1e6
  },
  Mbar: {
    ratio: 1e6
  },
  gigabar: {
    ratio: 1e9
  },
  gigabars: {
    ratio: 1e9
  },
  Gbar: {
    ratio: 1e9
  },
  terabar: {
    ratio: 1e12
  },
  terabars: {
    ratio: 1e12
  },
  Tbar: {
    ratio: 1e12
  },
  petabar: {
    ratio: 1e15
  },
  petabars: {
    ratio: 1e15
  },
  Pbar: {
    ratio: 1e15
  },
  torr: {
    ratio: 101325 / 760
  },
  millitorr: {
    ratio: 101325 / 760 / 1e3
  },
  millitorrs: {
    ratio: 101325 / 760 / 1e3
  },
  mTorr: {
    ratio: 101325 / 760 / 1e3
  },
  atmosphere: {
    ratio: 101325
  },
  atmospheres: {
    ratio: 101325
  },
  atm: {
    ratio: 101325
  }
};

/**
 * Conversions for temperature.
 * @private
 */
var temperature = {
  kelvin: {
    ratio: 1
  },
  kelvins: {
    ratio: 1
  },
  K: {
    ratio: 1
  },
  fahrenheit: {
    ratio: 5 / 9,
    difference: 273.15 - 32
  },
  F: {
    ratio: 5 / 9,
    difference: 273.15 - 32
  },
  celsius: {
    ratio: 1,
    difference: 273.15
  },
  C: {
    ratio: 1,
    difference: 273.15
  },
  rankine: {
    ratio: 5 / 9
  },
  R: {
    ratio: 5 / 9
  },
  delisle: {
    ratio: -2 / 3,
    difference: 373.15
  },
  De: {
    ratio: -2 / 3,
    difference: 373.15
  }
};

/**
 * Conversions for time.
 * @private
 */
var time = {
  second: {
    ratio: 1
  },
  seconds: {
    ratio: 1
  },
  s: {
    ratio: 1
  },
  century: {
    ratio: 3.1556952e9
  },
  centuries: {
    ratio: 3.1556952e9
  },
  c: {
    ratio: 3.1556952e9
  },
  day: {
    ratio: 60 * 60 * 24
  },
  days: {
    ratio: 60 * 60 * 24
  },
  d: {
    ratio: 60 * 60 * 24
  },
  decade: {
    ratio: 315.56952e6
  },
  decades: {
    ratio: 315.56952e6
  },
  dec: {
    ratio: 315.56952e6
  },
  fortnight: {
    ratio: 1.2096e6
  },
  fortnights: {
    ratio: 1.2096e6
  },
  fn: {
    ratio: 1.2096e6
  },
  helek: {
    ratio: 3 + 1 / 3
  },
  halakim: {
    ratio: 3 + 1 / 3
  },
  hour: {
    ratio: 60 * 60
  },
  hours: {
    ratio: 60 * 60
  },
  h: {
    ratio: 60 * 60
  },
  jiffy: {
    ratio: 1 / 60
  },
  jiffies: {
    ratio: 1 / 60
  },
  j: {
    ratio: 1 / 60
  },
  ja: {
    ratio: 1e-2
  },
  ke: {
    ratio: 15 * 60
  },
  millennium: {
    ratio: 31.556952e9
  },
  millennia: {
    ratio: 31.556952e9
  },
  milliday: {
    ratio: 60 * 60 * 24 / 1e3
  },
  millidays: {
    ratio: 60 * 60 * 24 / 1e3
  },
  md: {
    ratio: 60 * 60 * 24 / 1e3
  },
  minute: {
    ratio: 60
  },
  minutes: {
    ratio: 60
  },
  min: {
    ratio: 60
  },
  moment: {
    ratio: 90
  },
  moments: {
    ratio: 90
  },
  month: {
    ratio: 2.592e6
  },
  months: {
    ratio: 2.592e6
  },
  mo: {
    ratio: 2.592e6
  },
  shake: {
    ratio: 1e-8
  },
  shakes: {
    ratio: 1e-8
  },
  sigma: {
    ratio: 1e-6
  },
  sigmas: {
    ratio: 1e-6
  },
  svedberg: {
    ratio: 1e-13
  },
  svedbergs: {
    ratio: 1e-13
  },
  S: {
    ratio: 1e-13
  },
  week: {
    ratio: 60 * 60 * 24 * 7
  },
  weeks: {
    ratio: 60 * 60 * 24 * 7
  },
  wk: {
    ratio: 60 * 60 * 24 * 7
  },
  year: {
    ratio: 31.536e6
  },
  years: {
    ratio: 31.536e6
  },
  a: {
    ratio: 31.536e6
  },
  y: {
    ratio: 31.536e6
  },
  yr: {
    ratio: 31.536e6
  },
  petasecond: {
    ratio: 1e15
  },
  petaseconds: {
    ratio: 1e15
  },
  Ps: {
    ratio: 1e15
  },
  terasecond: {
    ratio: 1e12
  },
  teraseconds: {
    ratio: 1e12
  },
  Ts: {
    ratio: 1e12
  },
  gigasecond: {
    ratio: 1e9
  },
  gigaseconds: {
    ratio: 1e9
  },
  Gs: {
    ratio: 1e9
  },
  megasecond: {
    ratio: 1e6
  },
  megaseconds: {
    ratio: 1e6
  },
  Ms: {
    ratio: 1e6
  },
  kilosecond: {
    ratio: 1e3
  },
  kiloseconds: {
    ratio: 1e3
  },
  ks: {
    ratio: 1e3
  },
  hectosecond: {
    ratio: 1e2
  },
  hectoseconds: {
    ratio: 1e2
  },
  hs: {
    ratio: 1e2
  },
  decasecond: {
    ratio: 10
  },
  decaseconds: {
    ratio: 10
  },
  das: {
    ratio: 10
  },
  decisecond: {
    ratio: 1e-1
  },
  deciseconds: {
    ratio: 1e-1
  },
  ds: {
    ratio: 1e-1
  },
  centisecond: {
    ratio: 1e-2
  },
  centiseconds: {
    ratio: 1e-2
  },
  cs: {
    ratio: 1e-2
  },
  millisecond: {
    ratio: 1e-3
  },
  milliseconds: {
    ratio: 1e-3
  },
  ms: {
    ratio: 1e-3
  },
  microsecond: {
    ratio: 1e-7
  },
  microseconds: {
    ratio: 1e-7
  },
  μs: {
    ratio: 1e-7
  },
  nanosecond: {
    ratio: 1e-9
  },
  nanoseconds: {
    ratio: 1e-9
  },
  ns: {
    ratio: 1e-9
  },
  picosecond: {
    ratio: 1e-12
  },
  picoseconds: {
    ratio: 1e-12
  },
  ps: {
    ratio: 1e-12
  },
  femtosecond: {
    ratio: 1e-15
  },
  femtoseconds: {
    ratio: 1e-15
  },
  fs: {
    ratio: 1e-15
  }
};

// Notes aboutthe conversion files:

var conversions = {
	__proto__: null,
	data: data,
	length: length,
	mass: mass,
	pressure: pressure,
	temperature: temperature,
	time: time
};

var prefix = 'convert: Invariant failed';
/**
 * Throws an errror if `condition` is falsy.
 * @private
 * @param condition The condition to check
 * @param message The error message to display in development builds
 */

function invariant(condition, message) {
  if (!condition) {
    if (process.env.NODE_ENV !== "production") {
      // Message is only in development
      throw new Error(prefix + ": " + message);
    } else {
      throw new Error(prefix);
    }
  }
}

var families = /*#__PURE__*/Object.values(conversions);
/**
 * Get the conversion ratio to the base unit of a `Unit`
 * @param units The unit to get the conversion ratio from
 * @param desiredConversion The conversion you are looking for
 *
 * @example
 * ```ts
 * conversionRatio(time, 'minutes');
 * // 1 / 60
 * ```
 */

function conversionRatio(units, desiredConversion) {
  var _found$difference;

  var found = units[desiredConversion];
  !found ? process.env.NODE_ENV !== "production" ? invariant(false, "No conversion ratio could be found for " + desiredConversion) : invariant(false) : void 0;
  return {
    difference: (_found$difference = found.difference) !== null && _found$difference !== void 0 ? _found$difference : 0,
    ratio: found.ratio
  };
}
/**
 * Convert from one unit to another.
 * @example convert(360).from('seconds').to('minutes');
 */


function _convert(quantity) {
  return {
    from: function from(_from) {
      var units = families.find(function (family) {
        return family[_from];
      });
      !units ? process.env.NODE_ENV !== "production" ? invariant(false, "No conversion could be found for " + _from) : invariant(false) : void 0;
      var fromConversion = conversionRatio(units, _from);
      return {
        to: function to(_to) {
          if (_to === _from) {
            return quantity;
          }

          var toConversion = conversionRatio(units, _to);
          var combinedRatio = fromConversion.ratio / toConversion.ratio;

          if (typeof quantity === 'bigint') {
            var bigintValue;

            if (process.env.NODE_ENV !== "production") {
              try {
                // Note: BigInt support only works when you are converting integers (obviously)
                // If you tried converting 30 seconds into minutes it would fail since 0.5 minutes is not an integer
                bigintValue = quantity * BigInt(combinedRatio) + (BigInt(fromConversion.difference) - BigInt(toConversion.difference));
              } catch (error) {
                 process.env.NODE_ENV !== "production" ? invariant(false, "Conversion for " + _from + " to " + _to + " can't be expressed as an integer") : invariant(false) ;
              }
            } else {
              bigintValue = quantity * BigInt(combinedRatio) + (BigInt(fromConversion.difference) - BigInt(toConversion.difference));
            }

            return bigintValue;
          }

          return quantity * combinedRatio + (fromConversion.difference - toConversion.difference);
        }
      };
    }
  };
} // @ts-expect-error


var convert = _convert;

export { conversions, convert };
//# sourceMappingURL=convert.esm.js.map
