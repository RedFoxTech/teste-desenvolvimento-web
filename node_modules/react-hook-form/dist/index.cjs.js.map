{"version":3,"file":"index.cjs.js","sources":["../src/utils/isCheckBoxInput.ts","../src/utils/isDateObject.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/logic/getEventValue.ts","../src/logic/isNameInFieldArray.ts","../src/logic/getNodeParentName.ts","../src/utils/compact.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/constants.ts","../src/utils/omit.ts","../src/useFormContext.tsx","../src/logic/getProxyFormState.ts","../src/utils/isEmptyObject.ts","../src/logic/shouldRenderFormState.ts","../src/utils/convertToArrayPayload.ts","../src/logic/shouldSubscribeByName.ts","../src/useSubscribe.ts","../src/useFormState.ts","../src/utils/isString.ts","../src/logic/generateWatchOutput.ts","../src/utils/isFunction.ts","../src/utils/objectHasFunction.ts","../src/useWatch.ts","../src/useController.ts","../src/logic/appendErrors.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/focusFieldBy.ts","../src/logic/generateId.ts","../src/logic/getFocusFieldName.ts","../src/logic/isWatched.ts","../src/utils/append.ts","../src/utils/cloneObject.ts","../src/utils/fillEmptyArray.ts","../src/utils/insert.ts","../src/utils/move.ts","../src/utils/prepend.ts","../src/utils/remove.ts","../src/utils/swap.ts","../src/utils/update.ts","../src/utils/createSubject.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/utils/getValidationModes.ts","../src/utils/isBoolean.ts","../src/utils/isFileInput.ts","../src/utils/isHTMLElement.ts","../src/utils/isMultipleSelect.ts","../src/utils/isRadioInput.ts","../src/utils/isWeb.ts","../src/utils/live.ts","../src/utils/unset.ts","../src/logic/getDirtyFields.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValueAs.ts","../src/logic/getRadioValue.ts","../src/logic/getFieldValue.ts","../src/logic/getResolverOptions.ts","../src/utils/isRegex.ts","../src/logic/getRuleValue.ts","../src/logic/schemaErrorLookup.ts","../src/logic/skipValidation.ts","../src/utils/isMessage.ts","../src/logic/getValidateError.ts","../src/logic/getValueAndMessage.ts","../src/logic/validateField.ts","../src/logic/createFormControl.ts","../src/logic/hasValidation.ts","../src/utils/isRadioOrCheckbox.ts","../src/logic/unsetEmptyArray.ts","../src/controller.tsx","../src/useFieldArray.ts","../src/useForm.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is Date => value instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","export default <TValue>(value: TValue[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown): any => {\n  if (!path || !isObject(obj)) {\n    return defaultValue;\n  }\n\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) =>\n      isNullOrUndefined(result) ? result : result[key as keyof {}],\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path as keyof T])\n      ? defaultValue\n      : obj[path as keyof T]\n    : result;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  const result = {} as typeof formState;\n\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: () => {\n        const _key = key as keyof FormState<TFieldValues> & keyof ReadFormState;\n\n        if (_proxyFormState[_key] !== VALIDATION_MODE.all) {\n          _proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n        }\n\n        localProxyFormState && (localProxyFormState[_key] = true);\n        return formState[_key];\n      },\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T extends string | string[] | undefined>(\n  name?: T,\n  signalName?: string,\n  exact?: boolean,\n) =>\n  exact && signalName\n    ? name === signalName\n    : !name ||\n      !signalName ||\n      name === signalName ||\n      convertToArrayPayload(name).some(\n        (currentName) =>\n          currentName &&\n          (currentName.startsWith(signalName) ||\n            signalName.startsWith(currentName)),\n      );\n","import React from 'react';\n\nimport { Subject, Subscription } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  React.useEffect(() => {\n    const tearDown = (subscription: Subscription | false) => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n\n    const subscription =\n      !props.disabled &&\n      _props.current.subject.subscribe({\n        next: _props.current.callback,\n      });\n\n    return () => tearDown(subscription);\n  }, [props.disabled]);\n}\n","import React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport {\n  FieldValues,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name, exact } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n  const _mounted = React.useRef(true);\n\n  _name.current = name;\n\n  const callback = React.useCallback(\n    (value) =>\n      _mounted.current &&\n      shouldSubscribeByName(\n        _name.current as InternalFieldName,\n        value.name,\n        exact,\n      ) &&\n      shouldRenderFormState(value, _localProxyFormState.current) &&\n      updateFormState({\n        ...control._formState,\n        ...value,\n      }),\n    [control, exact],\n  );\n\n  useSubscribe({\n    disabled,\n    callback,\n    subject: control._subjects.state,\n  });\n\n  React.useEffect(\n    () => () => {\n      _mounted.current = false;\n    },\n    [],\n  );\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { FieldValues, InternalFieldName, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport default (\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n) => {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names as InternalFieldName);\n    return get(formValues, names as InternalFieldName);\n  }\n\n  if (isArray) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName as InternalFieldName),\n        get(formValues, fieldName as InternalFieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\n\nexport default <T>(data: T): boolean => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\n","import React from 'react';\n\nimport generateWatchOutput from './logic/generateWatchOutput';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport isObject from './utils/isObject';\nimport isUndefined from './utils/isUndefined';\nimport objectHasFunction from './utils/objectHasFunction';\nimport {\n  Control,\n  DeepPartialSkipArrayKey,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): FieldPathValue<TFieldValues, TFieldName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends readonly FieldPath<TFieldValues>[] = readonly FieldPath<TFieldValues>[],\n>(props: {\n  name: readonly [...TFieldNames];\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n    exact,\n  } = props || {};\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  const callback = React.useCallback(\n    (formState) => {\n      if (\n        shouldSubscribeByName(\n          _name.current as InternalFieldName,\n          formState.name,\n          exact,\n        )\n      ) {\n        const fieldValues = generateWatchOutput(\n          _name.current as InternalFieldName | InternalFieldName[],\n          control._names,\n          formState.values || control._formValues,\n        );\n\n        updateValue(\n          isUndefined(_name.current) ||\n            (isObject(fieldValues) && !objectHasFunction(fieldValues))\n            ? { ...fieldValues }\n            : Array.isArray(fieldValues)\n            ? [...fieldValues]\n            : isUndefined(fieldValues)\n            ? defaultValue\n            : fieldValues,\n        );\n      }\n    },\n    [control, exact, defaultValue],\n  );\n\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback,\n  });\n\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? control._getWatch(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    control._removeUnmounted();\n  });\n\n  return value;\n}\n","import React from 'react';\n\nimport getEventValue from './logic/getEventValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldPathValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useWatch } from './useWatch';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const isArrayField = isNameInFieldArray(control._names.array, name);\n  const value = useWatch({\n    control,\n    name,\n    defaultValue: get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n    exact: !isArrayField,\n  }) as UnpackNestedValue<FieldPathValue<TFieldValues, TName>>;\n  const formState = useFormState({\n    control,\n    name,\n  });\n\n  const _registerProps = React.useRef(\n    control.register(name, {\n      ...props.rules,\n      value,\n    }),\n  );\n\n  React.useEffect(() => {\n    const updateMounted = (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    };\n\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._options.shouldUnregister || shouldUnregister;\n\n      (\n        isArrayField\n          ? _shouldUnregisterField && !control._stateFlags.action\n          : _shouldUnregisterField\n      )\n        ? control.unregister(name)\n        : updateMounted(name, false);\n    };\n  }, [name, control, isArrayField, shouldUnregister]);\n\n  return {\n    field: {\n      name,\n      value,\n      onChange: React.useCallback(\n        (event) => {\n          _registerProps.current.onChange({\n            target: {\n              value: getEventValue(event),\n              name: name as InternalFieldName,\n            },\n            type: EVENTS.CHANGE,\n          });\n        },\n        [name],\n      ),\n      onBlur: React.useCallback(() => {\n        _registerProps.current.onBlur({\n          target: {\n            value: get(control._formValues, name),\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      }, [name, control]),\n      ref: React.useCallback(\n        (elm) => {\n          const field = get(control._fields, name);\n\n          if (elm && field && elm.focus) {\n            field._f.ref = {\n              focus: () => elm.focus(),\n              setCustomValidity: (message: string) =>\n                elm.setCustomValidity(message),\n              reportValidity: () => elm.reportValidity(),\n            };\n          }\n        },\n        [name, control._fields],\n      ),\n    },\n    formState,\n    fieldState: control.getFieldState(name, formState),\n  };\n}\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options: FieldArrayMethodProps = {},\n): string =>\n  options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n      `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n","import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...data, ...convertToArrayPayload(value)];\n}\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (!Array.isArray(data)) {\n    return [];\n  }\n\n  if (isUndefined(data[to])) {\n    data[to] = undefined;\n  }\n  data.splice(to, 0, data.splice(from, 1)[0]);\n\n  return data;\n};\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default <T>(fieldValues: T[], index: number, value: T) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: unknown): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && ref.isConnected;\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import deepEqual from '../utils/deepEqual';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isUndefined from '../utils/isUndefined';\nimport objectHasFunction from '../utils/objectHasFunction';\n\nfunction markFieldsDirty<U>(data: U, fields: Record<string, any> = {}) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues<T>(\n  data: T,\n  formValues: T,\n  dirtyFieldsFromValues: any,\n) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        if (\n          isUndefined(formValues) ||\n          isPrimitive(dirtyFieldsFromValues[key])\n        ) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key])\n            ? markFieldsDirty(data[key], [])\n            : { ...markFieldsDirty(data[key]) };\n        } else {\n          getDirtyFieldsFromDefaultValues(\n            data[key],\n            isNullOrUndefined(formValues) ? {} : formValues[key],\n            dirtyFieldsFromValues[key],\n          );\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nexport default <T>(defaultValues: T, formValues: T) =>\n  getDirtyFieldsFromDefaultValues(\n    defaultValues,\n    formValues,\n    markFieldsDirty(formValues),\n  );\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field, NativeFieldValue } from '../types';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends NativeFieldValue>(\n  value: T,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate && isString(value)\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import {\n  ValidationRule,\n  ValidationValue,\n  ValidationValueMessage,\n} from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends ValidationValue>(\n  rule?: ValidationRule<T> | ValidationValueMessage<T>,\n) =>\n  isUndefined(rule)\n    ? undefined\n    : isRegex(rule)\n    ? rule.source\n    : isObject(rule)\n    ? isRegex(rule.value)\n      ? rule.value.source\n      : rule.value\n    : rule;\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldError,\n  InternalFieldErrors,\n  Message,\n  NativeFieldValue,\n} from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async <T extends NativeFieldValue>(\n  field: Field,\n  inputValue: T,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidity = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue as number)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber ||\n        parseFloat(inputValue as string);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue as string);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  EventType,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetFieldState,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckbox from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport generateWatchOutput from './generateWatchOutput';\nimport getDirtyFields from './getDirtyFields';\nimport getEventValue from './getEventValue';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport getRuleValue from './getRuleValue';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    values = [],\n    method,\n    args,\n    shouldSetValues = true,\n    shouldUpdateFieldsAndErrors = true,\n  ) => {\n    if (args && method) {\n      _stateFlags.action = true;\n      if (shouldUpdateFieldsAndErrors && Array.isArray(get(_fields, name))) {\n        const fieldValues = method(get(_fields, name), args.argA, args.argB);\n        shouldSetValues && set(_fields, name, fieldValues);\n      }\n\n      if (\n        _proxyFormState.errors &&\n        shouldUpdateFieldsAndErrors &&\n        Array.isArray(get(_formState.errors, name))\n      ) {\n        const errors = method(\n          get(_formState.errors, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.errors, name, errors);\n        unsetEmptyArray(_formState.errors, name);\n      }\n\n      if (\n        _proxyFormState.touchedFields &&\n        Array.isArray(get(_formState.touchedFields, name))\n      ) {\n        const touchedFields = method(\n          get(_formState.touchedFields, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      }\n\n      if (_proxyFormState.dirtyFields) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n      }\n\n      _subjects.state.next({\n        isDirty: _getDirty(name, values),\n        dirtyFields: _formState.dirtyFields,\n        errors: _formState.errors,\n        isValid: _formState.isValid,\n      });\n    } else {\n      set(_formValues, name, values);\n    }\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs: boolean,\n    value?: unknown,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(\n        _formValues,\n        name,\n        isUndefined(value) ? get(_defaultValues, name) : value,\n      );\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n\n      _stateFlags.mount && _updateValid();\n    }\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isBlurEvent?: boolean,\n    shouldDirty?: boolean,\n    shouldRender?: boolean,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && (!isBlurEvent || shouldDirty)) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isBlurEvent && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isBlurEvent);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isBlurEvent);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = <TFieldArrayValues>(\n    name: InternalFieldName,\n  ): Partial<TFieldArrayValues>[] =>\n    compact(\n      get(\n        _stateFlags.mount ? _formValues : _defaultValues,\n        name,\n        props.shouldUnregister ? get(_defaultValues, name, []) : [],\n      ),\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        !fieldReference.disabled &&\n          set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : fieldReference.refs[0] &&\n                (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else if (isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = '';\n        } else {\n          fieldReference.ref.value = fieldValue;\n\n          if (!fieldReference.ref.type) {\n            _subjects.watch.next({\n              name,\n            });\n          }\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(\n        name,\n        fieldValue,\n        options.shouldTouch,\n        options.shouldDirty,\n        true,\n      );\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n    const cloneValue = cloneObject(value);\n\n    set(_formValues, name, cloneValue);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, cloneValue),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(cloneValue)\n        ? setValues(name, cloneValue, options)\n        : setFieldValue(name, cloneValue, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const onChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type\n        ? getFieldValue(field._f)\n        : getEventValue(event);\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      set(_formValues, name, fieldValue);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _subjects.state.next({\n        isValidating: true,\n      });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const getFieldState: UseFormGetFieldState<TFieldValues> = (\n    name,\n    formState,\n  ) => ({\n    invalid: !!get((formState || _formState).errors, name),\n    isDirty: !!get((formState || _formState).dirtyFields, name),\n    isTouched: !!get((formState || _formState).touchedFields, name),\n    error: get((formState || _formState).errors, name),\n  });\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info as {\n                name?: FieldPath<TFieldValues>;\n                type?: EventType;\n                value?: unknown;\n              },\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    let field = get(_fields, name);\n    const disabledIsDefined = isBoolean(options.disabled);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    field\n      ? disabledIsDefined &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true, options.value);\n\n    return {\n      ...(disabledIsDefined ? { disabled: options.disabled } : {}),\n      ...(_options.shouldUseNativeValidation\n        ? {\n            required: !!options.required,\n            min: getRuleValue(options.min),\n            max: getRuleValue(options.max),\n            minLength: getRuleValue<number>(options.minLength) as number,\n            maxLength: getRuleValue(options.maxLength) as number,\n            pattern: getRuleValue(options.pattern) as string,\n          }\n        : {}),\n      name,\n      onChange,\n      onBlur: onChange,\n      ref: (ref: HTMLInputElement | null): void => {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n\n          const fieldRef = isUndefined(ref.value)\n            ? ref.querySelectorAll\n              ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) || ref\n              : ref\n            : ref;\n          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n          const refs = field._f.refs || [];\n\n          if (\n            radioOrCheckbox\n              ? refs.find((option: Ref) => option === fieldRef)\n              : fieldRef === field._f.ref\n          ) {\n            return;\n          }\n\n          set(_fields, name, {\n            _f: {\n              ...field._f,\n              ...(radioOrCheckbox\n                ? {\n                    refs: refs.concat(fieldRef).filter(live),\n                    ref: { type: fieldRef.type, name },\n                  }\n                : { ref: fieldRef }),\n            },\n          });\n\n          updateValidAndValue(name, false, undefined, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          (_options.shouldUnregister || options.shouldUnregister) &&\n            !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\n            _names.unMount.add(name);\n        }\n      },\n    };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = _options.shouldUnregister\n        ? cloneObject(_formValues)\n        : { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (get(_fields, name)) {\n      if (isUndefined(options.defaultValue)) {\n        setValue(name, get(_defaultValues, name));\n      } else {\n        setValue(name, options.defaultValue);\n        set(_defaultValues, name, options.defaultValue);\n      }\n\n      if (!options.keepTouched) {\n        unset(_formState.touchedFields, name);\n      }\n\n      if (!options.keepDirty) {\n        unset(_formState.dirtyFields, name);\n        _formState.isDirty = options.defaultValue\n          ? _getDirty(name, get(_defaultValues, name))\n          : _getDirty();\n      }\n\n      if (!options.keepError) {\n        unset(_formState.errors, name);\n        _proxyFormState.isValid && _updateValid();\n      }\n\n      _subjects.state.next({ ..._formState });\n    }\n  };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values =\n      formValues && !isEmptyObject(formValues)\n        ? cloneUpdatedValues\n        : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb && isUndefined(formValues)) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n\n      _fields = {};\n\n      _subjects.array.next({\n        values,\n      });\n\n      _subjects.watch.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n\n    _stateFlags.watch = !!props.shouldUnregister;\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      getFieldState,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n    getFieldState,\n  };\n}\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name)).length && unset(ref, name);\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport generateId from './logic/generateId';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport isWatched from './logic/isWatched';\nimport appendAt from './utils/append';\nimport cloneObject from './utils/cloneObject';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport moveArrayAt from './utils/move';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport updateAt from './utils/update';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldPath,\n  FieldValues,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>(\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id' as TKeyName,\n    shouldUnregister,\n  } = props;\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(control._getFieldArray(name));\n  const ids = React.useRef<string[]>(\n    control._getFieldArray(name).map(generateId),\n  );\n  const _fieldIds = React.useRef(fields);\n  const _name = React.useRef(name);\n  const _actioned = React.useRef(false);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  const callback = React.useCallback(({ values, name: fieldArrayName }) => {\n    if (fieldArrayName === _name.current || !fieldArrayName) {\n      const fieldValues = get(values, _name.current, []);\n      setFields(fieldValues);\n      ids.current = fieldValues.map(generateId);\n    }\n  }, []);\n\n  useSubscribe({\n    callback,\n    subject: control._subjects.array,\n  });\n\n  const updateValues = React.useCallback(\n    <\n      T extends Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    >(\n      updatedFieldArrayValues: T,\n    ) => {\n      _actioned.current = true;\n      control._updateFieldArray(name, updatedFieldArrayValues);\n    },\n    [control, name],\n  );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = appendAt(\n      control._getFieldArray(name),\n      appendValue,\n    );\n    control._names.focus = getFocusFieldName(\n      name,\n      updatedFieldArrayValues.length - 1,\n      options,\n    );\n    ids.current = appendAt(ids.current, appendValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, appendAt, {\n      argA: fillEmptyArray(value),\n    });\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const prependValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = prependAt(\n      control._getFieldArray(name),\n      prependValue,\n    );\n    control._names.focus = getFocusFieldName(name, 0, options);\n    ids.current = prependAt(ids.current, prependValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, prependAt, {\n      argA: fillEmptyArray(value),\n    });\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(control._getFieldArray(name), index);\n    ids.current = removeArrayAt(ids.current, index);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n      argA: index,\n    });\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const insertValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = insertAt(\n      control._getFieldArray(name),\n      index,\n      insertValue,\n    );\n    control._names.focus = getFocusFieldName(name, index, options);\n    ids.current = insertAt(ids.current, index, insertValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, insertAt, {\n      argA: index,\n      argB: fillEmptyArray(value),\n    });\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValues = control._getFieldArray(name);\n    swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n    swapArrayAt(ids.current, indexA, indexB);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(\n      name,\n      updatedFieldArrayValues,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValues = control._getFieldArray(name);\n    moveArrayAt(updatedFieldArrayValues, from, to);\n    moveArrayAt(ids.current, from, to);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(\n      name,\n      updatedFieldArrayValues,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      false,\n    );\n  };\n\n  const update = (\n    index: number,\n    value: Partial<FieldArray<TFieldValues, TFieldArrayName>>,\n  ) => {\n    const updatedFieldArrayValues = updateAt(\n      control._getFieldArray(name),\n      index,\n      value,\n    );\n    ids.current = [...updatedFieldArrayValues].map((item, i) =>\n      !item || i === index ? generateId() : ids.current[i],\n    );\n    updateValues(updatedFieldArrayValues);\n    setFields([...updatedFieldArrayValues]);\n    control._updateFieldArray(\n      name,\n      updatedFieldArrayValues,\n      updateAt,\n      {\n        argA: index,\n        argB: value,\n      },\n      true,\n      false,\n    );\n  };\n\n  const replace = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n  ) => {\n    const updatedFieldArrayValues = convertToArrayPayload(value);\n    ids.current = updatedFieldArrayValues.map(generateId);\n    updateValues([...updatedFieldArrayValues]);\n    setFields([...updatedFieldArrayValues]);\n    control._updateFieldArray(\n      name,\n      [...updatedFieldArrayValues],\n      () => updatedFieldArrayValues,\n      {},\n      true,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n\n    isWatched(name, control._names) && control._subjects.state.next({});\n\n    if (_actioned.current) {\n      control._executeSchema([name]).then((result) => {\n        const error = get(result.errors, name);\n\n        if (error && error.type && !get(control._formState.errors, name)) {\n          set(control._formState.errors, name, error);\n          control._subjects.state.next({\n            errors: control._formState.errors as FieldErrors<TFieldValues>,\n          });\n        }\n      });\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues,\n    });\n\n    control._names.focus &&\n      focusFieldBy(control._fields, (key: string) =>\n        key.startsWith(control._names.focus),\n      );\n\n    control._names.focus = '';\n\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control]);\n\n  React.useEffect(() => {\n    !get(control._formValues, name) && control._updateFieldArray(name);\n\n    return () => {\n      (control._options.shouldUnregister || shouldUnregister) &&\n        control.unregister(name as FieldPath<TFieldValues>);\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control]),\n    move: React.useCallback(move, [updateValues, name, control]),\n    prepend: React.useCallback(prepend, [updateValues, name, control]),\n    append: React.useCallback(append, [updateValues, name, control]),\n    remove: React.useCallback(remove, [updateValues, name, control]),\n    insert: React.useCallback(insert, [updateValues, name, control]),\n    update: React.useCallback(update, [updateValues, name, control]),\n    replace: React.useCallback(replace, [updateValues, name, control]),\n    fields: React.useMemo(\n      () =>\n        fields.map((field, index) => ({\n          ...field,\n          [keyName]: ids.current[index] || generateId(),\n        })) as FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>[],\n      [fields, keyName],\n    ),\n  };\n};\n","import React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  const callback = React.useCallback(\n    (value) => {\n      if (shouldRenderFormState(value, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...value,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n    [control],\n  );\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback,\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"],"names":["element","type","value","Date","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","event","isObject","target","isCheckBoxInput","checked","names","name","some","current","substring","search","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","HookFormContext","React","createContext","useFormContext","useContext","formState","_proxyFormState","localProxyFormState","isRoot","Object","defineProperty","get","_key","keys","length","formStateData","omit","isEmptyObject","find","signalName","exact","convertToArrayPayload","currentName","startsWith","useSubscribe","props","_props","useRef","useEffect","subscription","disabled","subject","subscribe","next","callback","unsubscribe","tearDown","useFormState","methods","control","updateFormState","useState","_formState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","_name","_mounted","useCallback","shouldSubscribeByName","shouldRenderFormState","_subjects","state","getProxyFormState","_names","formValues","isGlobal","isString","watch","add","map","fieldName","watchAll","data","isFunction","useWatch","fieldValues","generateWatchOutput","values","_formValues","updateValue","objectHasFunction","_getWatch","_removeUnmounted","useController","shouldUnregister","isArrayField","isNameInFieldArray","array","_defaultValues","_registerProps","register","rules","updateMounted","field","_fields","_f","mount","_shouldUnregisterField","_options","_stateFlags","action","unregister","onChange","getEventValue","onBlur","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","getFieldState","validateAllFieldCriteria","types","[object Object]","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","refs","d","performance","now","c","r","Math","random","toString","options","shouldFocus","focusName","focusIndex","isBlurEvent","has","watchName","slice","append","cloneObject","Set","insert","from","to","splice","prepend","indexes","i","temp","removeAtIndexes","sort","a","b","indexA","indexB","createSubject","_observers","observers","observer","push","o","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","window","document","isHTMLElement","isConnected","unset","updatePath","childObject","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","markFieldsDirty","isParentNodeArray","defaultValues","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","defaultResult","validResult","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selectedOptions","isCheckBox","getCheckboxValue","getFieldValueAs","RegExp","rule","isRegex","schemaErrorLookup","error","join","foundError","pop","isValidElement","getValidateError","isMessage","validationData","async","inputValue","shouldUseNativeValidation","required","maxLength","minLength","min","max","pattern","validate","inputRef","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","exceedMin","maxOutput","minOutput","valueDate","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","reValidateMode","shouldFocusError","createFormControl","delayErrorCallback","isSubmitted","submitCount","isSubmitting","isSubmitSuccessful","unMount","timer","validateFields","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","criteriaMode","_updateValid","shouldSkipRender","resolver","_executeSchema","executeBuildInValidation","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","_getDirty","isPreviousFieldDirty","shouldRenderByError","previousFieldError","shouldUpdateValid","wait","delayError","args","clearTimeout","setTimeout","updatedFormState","context","getResolverOptions","shouldOnlyCheckValid","valid","fieldReference","fieldError","validateField","getValues","isWeb","forEach","selectRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","cloneValue","getDirtyFields","isWatched","shouldSkipValidation","deps","isTouched","skipValidation","watched","previousErrorLookupResult","errorLookupResult","fieldNames","executeSchemaAndUpdateState","Promise","all","invalid","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","disabledIsDefined","getRuleValue","fieldRef","querySelectorAll","radioOrCheckbox","concat","live","_updateFieldArray","method","shouldSetValues","shouldUpdateFieldsAndErrors","argA","argB","unsetEmptyArray","_getFieldArray","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","info","reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","entries","keepErrors","resetField","clearErrors","inputName","setError","setFocus","render","Provider","children","keyName","setFields","ids","generateId","_fieldIds","_actioned","fieldArrayName","updateValues","updatedFieldArrayValues","then","swap","swapArrayAt","move","moveArrayAt","prependValue","prependAt","getFocusFieldName","fillEmptyArray","appendValue","appendAt","remove","removeArrayAt","insertValue","insertAt","update","updateAt","useMemo","_formControl"],"mappings":"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"}