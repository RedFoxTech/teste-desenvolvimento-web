{"version":3,"sources":["../source/readXlsx.js"],"names":["parseDate","namespaces","a","r","rr","letters","readXlsx","contents","xml","options","sheet","fileNames","parseFileNames","values","parseValues","sharedStrings","styles","parseStyles","properties","parseProperties","getSheets","sheets","map","name","sheetRelationId","_sheet","relationId","createSheetNotFoundError","parseSheet","cells","length","data","dimensions","leftTop","rightBottom","colsCount","column","rowsCount","row","Array","i","j","cell","value","rowMap","dropEmptyRows","dropEmptyColumns","onlyTrimAtTheEnd","transformData","calculateDimensions","comparator","b","allRows","sort","allCols","minRow","maxRow","minCol","maxCol","colToInt","col","n","indexOf","CellCoords","coords","split","parseInt","trim","Cell","cellNode","getAttribute","select","textContent","undefined","parseFloat","style","numberFormat","id","dateFormat","template","smartDateParser","isDateTemplate","accessor","_","empty","splice","content","createDocument","node","strings","string","join","doc","baseStyles","parseCellStyle","numFmts","parseNumberFormatStyle","reduce","formats","format","xf","hasAttribute","xfId","numFmt","numberFormatId","book","workbookProperties","epoch1904","push","document","relationship","filePath","Error","tokens","token","sheetsList"],"mappings":"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","file":"readXlsx.js","sourcesContent":["import parseDate from './parseDate'\r\n\r\nconst namespaces = {\r\n  a: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',\r\n  // This one seems to be for `r:id` attributes on `<sheet>`s.\r\n  r: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',\r\n  // This one seems to be for `<Relationships/>` file.\r\n  rr: 'http://schemas.openxmlformats.org/package/2006/relationships'\r\n}\r\n\r\n// Maps \"A1\"-like coordinates to `{ row, column }` numeric coordinates.\r\nconst letters = [\"\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]\r\n\r\n/**\r\n * Reads an (unzipped) XLSX file structure into a 2D array of cells.\r\n * @param  {object} contents - A list of XML files inside XLSX file (which is a zipped directory).\r\n * @param  {number?} options.sheet - Workbook sheet id (`1` by default).\r\n * @param  {string?} options.dateFormat - Date format, e.g. \"MM/DD/YY\". Values having this format template set will be parsed as dates.\r\n * @param  {object} contents - A list of XML files inside XLSX file (which is a zipped directory).\r\n * @return {object} An object of shape `{ data, cells, properties }`. `data: string[][]` is an array of rows, each row being an array of cell values. `cells: string[][]` is an array of rows, each row being an array of cells. `properties: object` is the spreadsheet properties (e.g. whether date epoch is 1904 instead of 1900).\r\n */\r\nexport default function readXlsx(contents, xml, options = {}) {\r\n  if (!options.sheet) {\r\n    options = {\r\n      sheet: 1,\r\n      ...options\r\n    }\r\n  }\r\n\r\n  // Some Excel editors don't want to use standard naming scheme for sheet files.\r\n  // https://github.com/tidyverse/readxl/issues/104\r\n  const fileNames = parseFileNames(contents['xl/_rels/workbook.xml.rels'], xml)\r\n  // Default file path for \"shared strings\": \"xl/sharedStrings.xml\".\r\n  const values = parseValues(contents[`xl/${fileNames.sharedStrings}`], xml)\r\n  // Default file path for \"styles\": \"xl/styles.xml\".\r\n  const styles = parseStyles(contents[`xl/${fileNames.styles}`], xml)\r\n  const properties = parseProperties(contents['xl/workbook.xml'], xml)\r\n\r\n  // A feature for getting the list of sheets in an Excel file.\r\n  // https://github.com/catamphetamine/read-excel-file/issues/14\r\n  if (options.getSheets) {\r\n    return properties.sheets.map(({ name }) => ({\r\n      name\r\n    }))\r\n  }\r\n\r\n  // Find the sheet by name, or take the first one.\r\n  let sheetRelationId\r\n  if (typeof options.sheet === 'number') {\r\n    const _sheet = properties.sheets[options.sheet - 1]\r\n    sheetRelationId = _sheet && _sheet.relationId\r\n  } else {\r\n    for (const sheet of properties.sheets) {\r\n      if (sheet.name === options.sheet) {\r\n        sheetRelationId = sheet.relationId\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  // If the sheet wasn't found then throw an error.\r\n  // Example: \"xl/worksheets/sheet1.xml\".\r\n  if (!sheetRelationId || !fileNames.sheets[sheetRelationId]) {\r\n    throw createSheetNotFoundError(options.sheet, properties.sheets)\r\n  }\r\n\r\n  // Parse sheet data.\r\n  const sheet = parseSheet(\r\n    contents[`xl/${fileNames.sheets[sheetRelationId]}`],\r\n    xml,\r\n    values,\r\n    styles,\r\n    properties,\r\n    options\r\n  )\r\n\r\n  // If the sheet is empty.\r\n  if (sheet.cells.length === 0) {\r\n    if (options.properties) {\r\n      return {\r\n        data: [],\r\n        properties\r\n      }\r\n    }\r\n    return []\r\n  }\r\n\r\n  const [ leftTop, rightBottom ] = sheet.dimensions\r\n\r\n  const colsCount = (rightBottom.column - leftTop.column) + 1\r\n  const rowsCount = (rightBottom.row - leftTop.row) + 1\r\n\r\n  // `sheet.cells` seem to not necessarily be sorted by row and column.\r\n  let data = new Array(rowsCount)\r\n  let i = 0\r\n  while (i < rowsCount) {\r\n    data[i] = new Array(colsCount)\r\n    let j = 0\r\n    while (j < colsCount) {\r\n      data[i][j] = null\r\n      j++\r\n    }\r\n    i++\r\n  }\r\n  for (const cell of sheet.cells) {\r\n    const row = cell.row - leftTop.row\r\n    const column = cell.column - leftTop.column\r\n    data[row][column] = cell.value\r\n  }\r\n\r\n  // Fill in the row map.\r\n  const { rowMap } = options\r\n  if (rowMap) {\r\n    let i = 0\r\n    while (i < data.length) {\r\n      rowMap[i] = i\r\n      i++\r\n    }\r\n  }\r\n\r\n  data = dropEmptyRows(\r\n    dropEmptyColumns(data, { onlyTrimAtTheEnd: true }),\r\n    { onlyTrimAtTheEnd: true, rowMap }\r\n  )\r\n\r\n  if (options.transformData) {\r\n    data = options.transformData(data)\r\n    // data = options.transformData(data, {\r\n    //   dropEmptyRowsAndColumns(data) {\r\n    //     return dropEmptyRows(dropEmptyColumns(data), { rowMap })\r\n    //   }\r\n    // })\r\n  }\r\n\r\n  if (options.properties) {\r\n    return {\r\n      data,\r\n      properties\r\n    }\r\n  }\r\n\r\n  return data\r\n}\r\n\r\nfunction calculateDimensions (cells) {\r\n  const comparator = (a, b) => a - b\r\n  const allRows = cells.map(cell => cell.row).sort(comparator)\r\n  const allCols = cells.map(cell => cell.column).sort(comparator)\r\n  const minRow = allRows[0]\r\n  const maxRow = allRows[allRows.length - 1]\r\n  const minCol = allCols[0]\r\n  const maxCol = allCols[allCols.length - 1]\r\n\r\n  return [\r\n    { row: minRow, column: minCol },\r\n    { row: maxRow, column: maxCol }\r\n  ]\r\n}\r\n\r\nfunction colToInt(col) {\r\n  // `for ... of ...` would require Babel polyfill for iterating a string.\r\n  let n = 0\r\n  let i = 0\r\n  while (i < col.length) {\r\n    n *= 26\r\n    n += letters.indexOf(col[i])\r\n    i++\r\n  }\r\n  return n\r\n}\r\n\r\nfunction CellCoords(coords) {\r\n  // Examples: \"AA2091\", \"R988\", \"B1\"\r\n  coords = coords.split(/(\\d+)/)\r\n  return [\r\n    // Row.\r\n    parseInt(coords[1]),\r\n    // Column.\r\n    colToInt(coords[0].trim())\r\n  ]\r\n}\r\n\r\nfunction Cell(cellNode, sheet, xml, values, styles, properties, options) {\r\n  const coords = CellCoords(cellNode.getAttribute('r'))\r\n\r\n  let value = xml.select(sheet, cellNode, 'a:v', namespaces)[0]\r\n  // For `xpath` `value` can be `undefined` while for native `DOMParser` it's `null`.\r\n  // So using `value && ...` instead of `if (value !== undefined) { ... }` here.\r\n  value = value && value.textContent\r\n\r\n  // http://webapp.docx4java.org/OnlineDemo/ecma376/SpreadsheetML/ST_CellType.html\r\n  switch (cellNode.getAttribute('t')) {\r\n    // If the cell contains formula string.\r\n    case 'str':\r\n      value = value.trim()\r\n      if (value === '') {\r\n        value = undefined\r\n      }\r\n      break\r\n\r\n    // If the cell contains a \"shared\" string.\r\n    case 's':\r\n      // If a cell has no value then there's no `<c/>` element for it.\r\n      // If a `<c/>` element exists then it's not empty.\r\n      // The `<v/>`alue is a key in the \"shared strings\" dictionary of the\r\n      // XLSX file, so look it up in the `values` dictionary by the numeric key.\r\n      value = values[parseInt(value)].trim()\r\n      if (value === '') {\r\n        value = undefined\r\n      }\r\n      break\r\n\r\n    case 'b':\r\n      value = value === '1' ? true : false\r\n      break\r\n\r\n    case 'n':\r\n    // Default type is \"n\".\r\n    // http://www.datypic.com/sc/ooxml/t-ssml_CT_Cell.html\r\n    default:\r\n      if (value === undefined) {\r\n        break\r\n      }\r\n      value = parseFloat(value)\r\n      // XLSX has no specific format for dates.\r\n      // Sometimes a date can be heuristically detected.\r\n      // https://github.com/catamphetamine/read-excel-file/issues/3#issuecomment-395770777\r\n      const style = styles[parseInt(cellNode.getAttribute('s') || 0)]\r\n      if ((style.numberFormat.id >= 14 && style.numberFormat.id <= 22) ||\r\n        (style.numberFormat.id >= 45 && style.numberFormat.id <= 47) ||\r\n        (options.dateFormat && style.numberFormat.template === options.dateFormat) ||\r\n        (options.smartDateParser !== false && style.numberFormat.template && isDateTemplate(style.numberFormat.template))) {\r\n        value = parseDate(value, properties)\r\n      }\r\n      break\r\n  }\r\n\r\n  // Convert empty values to `null`.\r\n  if (value === undefined) {\r\n    value = null\r\n  }\r\n\r\n  return {\r\n    row    : coords[0],\r\n    column : coords[1],\r\n    value\r\n  }\r\n}\r\n\r\nexport function dropEmptyRows(data, {\r\n  rowMap,\r\n  accessor = _ => _,\r\n  onlyTrimAtTheEnd\r\n} = {}) {\r\n  // Drop empty rows.\r\n  let i = data.length - 1\r\n  while (i >= 0) {\r\n    // Check if the row is empty.\r\n    let empty = true\r\n    for (const cell of data[i]) {\r\n      if (accessor(cell) !== null) {\r\n        empty = false\r\n        break\r\n      }\r\n    }\r\n    // Remove the empty row.\r\n    if (empty) {\r\n      data.splice(i, 1)\r\n      if (rowMap) {\r\n        rowMap.splice(i, 1)\r\n      }\r\n    } else if (onlyTrimAtTheEnd) {\r\n      break\r\n    }\r\n    i--\r\n  }\r\n  return data\r\n}\r\n\r\nexport function dropEmptyColumns(data, {\r\n  accessor = _ => _,\r\n  onlyTrimAtTheEnd\r\n} = {}) {\r\n  let i = data[0].length - 1\r\n  while (i >= 0) {\r\n    let empty = true\r\n    for (const row of data) {\r\n      if (accessor(row[i]) !== null) {\r\n        empty = false\r\n        break\r\n      }\r\n    }\r\n    if (empty) {\r\n      let j = 0;\r\n      while (j < data.length) {\r\n        data[j].splice(i, 1)\r\n        j++\r\n      }\r\n    } else if (onlyTrimAtTheEnd) {\r\n      break\r\n    }\r\n    i--\r\n  }\r\n  return data\r\n}\r\n\r\nfunction parseSheet(content, xml, values, styles, properties, options) {\r\n  const sheet = xml.createDocument(content)\r\n\r\n  const cells = xml.select(sheet, null, '/a:worksheet/a:sheetData/a:row/a:c', namespaces).map(node => Cell(node, sheet, xml, values, styles, properties, options))\r\n\r\n  if (cells.length === 0) {\r\n    return { cells }\r\n  }\r\n\r\n  // \"//a:dimension/@ref\" causes \"RangeError: Maximum call stack size exceeded\" error.\r\n  // That selector was in the legacy code I copy-pasted and no one knows why it was there.\r\n  // let dimensions = xml.select(sheet, null, '//a:dimension/@ref', namespaces)[0]\r\n  let dimensions = xml.select(sheet, null, '/a:worksheet/a:dimension/@ref', namespaces)[0]\r\n\r\n  if (dimensions) {\r\n    dimensions = dimensions.textContent.split(':').map(CellCoords).map(([row, column]) => ({\r\n      row,\r\n      column\r\n    }))\r\n    // When there's only a single cell on a sheet\r\n    // there can sometimes be just \"A1\" for the dimensions string.\r\n    if (dimensions.length === 1) {\r\n      dimensions = [dimensions[0], dimensions[0]]\r\n    }\r\n  } else {\r\n    dimensions = calculateDimensions(cells)\r\n  }\r\n\r\n  return { cells, dimensions }\r\n}\r\n\r\nfunction parseValues(content, xml) {\r\n  if (!content) {\r\n    return []\r\n  }\r\n  const strings = xml.createDocument(content)\r\n  return xml.select(strings, null, '//a:si', namespaces)\r\n    .map(string => xml.select(strings, string, './/a:t[not(ancestor::a:rPh)]', namespaces).map(_ => _.textContent).join(''))\r\n}\r\n\r\n// http://officeopenxml.com/SSstyles.php\r\nfunction parseStyles(content, xml) {\r\n  if (!content) {\r\n    return {}\r\n  }\r\n  // https://social.msdn.microsoft.com/Forums/sqlserver/en-US/708978af-b598-45c4-a598-d3518a5a09f0/howwhen-is-cellstylexfs-vs-cellxfs-applied-to-a-cell?forum=os_binaryfile\r\n  // https://www.office-forums.com/threads/cellxfs-cellstylexfs.2163519/\r\n  const doc = xml.createDocument(content)\r\n  const baseStyles = xml.select(doc, null, '//a:styleSheet/a:cellStyleXfs/a:xf', namespaces).map(parseCellStyle);\r\n  const numFmts = xml.select(doc, null, '//a:styleSheet/a:numFmts/a:numFmt', namespaces)\r\n    .map(parseNumberFormatStyle)\r\n    .reduce((formats, format) => {\r\n      formats[format.id] = format\r\n      return formats\r\n    }, [])\r\n\r\n  return xml.select(doc, null, '//a:styleSheet/a:cellXfs/a:xf', namespaces).map((xf) => {\r\n    if (xf.hasAttribute('xfId')) {\r\n      return {\r\n        ...baseStyles[xf.xfId],\r\n        ...parseCellStyle(xf, numFmts)\r\n      }\r\n    }\r\n    return parseCellStyle(xf, numFmts)\r\n  })\r\n}\r\n\r\nfunction parseNumberFormatStyle(numFmt) {\r\n  return {\r\n    id: numFmt.getAttribute('numFmtId'),\r\n    template: numFmt.getAttribute('formatCode')\r\n  }\r\n}\r\n\r\n// http://www.datypic.com/sc/ooxml/e-ssml_xf-2.html\r\nfunction parseCellStyle(xf, numFmts) {\r\n  const style = {}\r\n  if (xf.hasAttribute('numFmtId')) {\r\n    const numberFormatId = xf.getAttribute('numFmtId')\r\n    if (numFmts[numberFormatId]) {\r\n      style.numberFormat = numFmts[numberFormatId]\r\n    } else {\r\n      style.numberFormat = { id: numberFormatId }\r\n    }\r\n  }\r\n  return style\r\n}\r\n\r\n// I guess `xl/workbook.xml` file should always be present inside the *.xlsx archive.\r\nfunction parseProperties(content, xml) {\r\n  const book = xml.createDocument(content)\r\n  // http://webapp.docx4java.org/OnlineDemo/ecma376/SpreadsheetML/workbookPr.html\r\n  const properties = {};\r\n  // https://support.microsoft.com/en-gb/help/214330/differences-between-the-1900-and-the-1904-date-system-in-excel\r\n  const workbookProperties = xml.select(book, null, '//a:workbookPr', namespaces)[0]\r\n  if (workbookProperties && workbookProperties.getAttribute('date1904') === '1') {\r\n    properties.epoch1904 = true\r\n  }\r\n  // Get sheets info (indexes, names, if they're available).\r\n  // Example:\r\n  // <sheets>\r\n  //   <sheet\r\n  //     xmlns:ns=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"\r\n  //     name=\"Sheet1\"\r\n  //     sheetId=\"1\"\r\n  //     ns:id=\"rId3\"/>\r\n  // </sheets>\r\n  // http://www.datypic.com/sc/ooxml/e-ssml_sheet-1.html\r\n  properties.sheets = []\r\n  let i = 0\r\n  for (const sheet of xml.select(book, null, '//a:sheets/a:sheet', namespaces)) {\r\n    if (sheet.getAttribute('name')) {\r\n      properties.sheets.push({\r\n        id: sheet.getAttribute('sheetId'),\r\n        name: sheet.getAttribute('name'),\r\n        relationId: sheet.getAttribute('r:id')\r\n      })\r\n    }\r\n    i++\r\n  }\r\n  return properties;\r\n}\r\n\r\n/**\r\n * Returns sheet file paths.\r\n * Seems that the correct place to look for the\r\n * `sheetId` -> `filename` mapping seems to be in the\r\n * `xl/_rels/workbook.xml.rels` file.\r\n * https://github.com/tidyverse/readxl/issues/104\r\n * @param  {string} content — `xl/_rels/workbook.xml.rels` file contents.\r\n * @param  {object} xml\r\n * @return {object}\r\n */\r\nfunction parseFileNames(content, xml) {\r\n  // Example:\r\n  // <Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">\r\n  //   ...\r\n  //   <Relationship\r\n  //     Id=\"rId3\"\r\n  //     Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\"\r\n  //     Target=\"worksheets/sheet1.xml\"/>\r\n  // </Relationships>\r\n  const document = xml.createDocument(content)\r\n  const fileNames = {\r\n    sheets: {},\r\n    sharedStrings: undefined,\r\n    styles: undefined\r\n  }\r\n  for (const relationship of xml.select(document, null, '/rr:Relationships/rr:Relationship', namespaces)) {\r\n    const filePath = relationship.getAttribute('Target')\r\n    switch (relationship.getAttribute('Type')) {\r\n      case 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles':\r\n        fileNames.styles = filePath\r\n        break\r\n      case 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings':\r\n        fileNames.sharedStrings = filePath\r\n        break\r\n      case 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet':\r\n        fileNames.sheets[relationship.getAttribute('Id')] = filePath\r\n        break\r\n    }\r\n  }\r\n  if (!fileNames.styles) {\r\n    throw new Error('\"styles.xml\" file not found in the *.xlsx file')\r\n  }\r\n  // Seems like \"sharedStrings.xml\" is not required to exist.\r\n  // For example, when the spreadsheet doesn't contain any strings.\r\n  // https://github.com/catamphetamine/read-excel-file/issues/85\r\n  // if (!fileNames.sharedStrings) {\r\n  //   throw new Error('\"sharedStrings.xml\" file not found in the *.xlsx file')\r\n  // }\r\n  return fileNames\r\n}\r\n\r\nfunction isDateTemplate(template) {\r\n  const tokens = template.split(/\\W+/)\r\n  for (const token of tokens) {\r\n    if (['MM', 'DD', 'YY', 'YYYY'].indexOf(token) < 0) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\nfunction createSheetNotFoundError(sheet, sheets) {\r\n  const sheetsList = sheets && sheets.map((sheet, i) => `\"${sheet.name}\" (#${i + 1})`).join(', ')\r\n  return new Error(`Sheet ${typeof sheet === 'number' ? '#' + sheet : '\"' + sheet + '\"'} not found in the *.xlsx file.${sheets ? ' Available sheets: ' + sheetsList + '.' : ''}`)\r\n}"]}