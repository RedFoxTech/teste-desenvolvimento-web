{"version":3,"sources":["../source/readXlsxFileNode.test.js"],"names":["path","readXlsxFileNode","describe","it","schema","prop","type","Date","template","Number","required","Boolean","String","parse","value","rowMap","resolve","__dirname","then","rows","date","getTime","should","deep","equal","convertToUTCTimezone","numberOfStudents","course","isFree","cost","title","contact","map","errors","getTimezoneOffset"],"mappings":"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","file":"readXlsxFileNode.test.js","sourcesContent":["import path from 'path'\r\n\r\nimport readXlsxFileNode from './readXlsxFileNode'\r\n\r\ndescribe('readXlsxFileNode', () => {\r\n\tit('should read *.xlsx file on Node.js and parse it to JSON', () => {\r\n\t\tconst schema = {\r\n\t\t\t'START DATE': {\r\n\t\t\t\tprop: 'date',\r\n\t\t\t\ttype: Date,\r\n\t\t\t\ttemplate: 'MM/DD/YYYY',\r\n\t\t\t},\r\n\t\t\t'NUMBER OF STUDENTS': {\r\n\t\t\t\tprop: 'numberOfStudents',\r\n\t\t\t\ttype: Number,\r\n\t\t\t\trequired: true\r\n\t\t\t},\r\n\t\t\t'COURSE': {\r\n\t\t\t\tprop: 'course',\r\n\t\t\t\ttype: {\r\n\t\t\t\t\t'IS FREE': {\r\n\t\t\t\t\t\tprop: 'isFree',\r\n\t\t\t\t\t\ttype: Boolean\r\n\t\t\t\t\t\t// Excel stored booleans as numbers:\r\n\t\t\t\t\t\t// `1` is `true` and `0` is `false`.\r\n\t\t\t\t\t\t// Such numbers are parsed to booleans.\r\n\t\t\t\t\t},\r\n\t\t\t\t\t'COST': {\r\n\t\t\t\t\t\tprop: 'cost',\r\n\t\t\t\t\t\ttype: Number\r\n\t\t\t\t\t},\r\n\t\t\t\t\t'COURSE TITLE': {\r\n\t\t\t\t\t\tprop: 'title',\r\n\t\t\t\t\t\ttype: String\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'CONTACT': {\r\n\t\t\t\tprop: 'contact',\r\n\t\t\t\trequired: true,\r\n\t\t\t\tparse(value) {\r\n\t\t\t\t\treturn '+11234567890'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst rowMap = []\r\n\r\n\t\treturn readXlsxFileNode(path.resolve(__dirname, '../test/spreadsheets/course.xlsx'), { schema, rowMap }).then(({ rows }) => {\r\n\t\t\trows[0].date = rows[0].date.getTime()\r\n\t\t\trows.should.deep.equal([{\r\n\t\t\t\tdate: convertToUTCTimezone(new Date(2018, 2, 24, 12)).getTime(),\r\n\t\t\t\tnumberOfStudents: 123,\r\n\t\t\t\tcourse: {\r\n\t\t\t\t\tisFree: false,\r\n\t\t\t\t\tcost: 210.45,\r\n\t\t\t\t\ttitle: 'Chemistry'\r\n\t\t\t\t},\r\n\t\t\t\tcontact: '+11234567890'\r\n\t\t\t}])\r\n\t\t\trowMap.should.deep.equal([0, 1])\r\n\t\t})\r\n\t})\r\n\r\n\tit('should read *.xlsx file on Node.js and map it to JSON', () => {\r\n\t\tconst map = {\r\n\t\t\t'START DATE': 'date',\r\n\t\t\t'NUMBER OF STUDENTS': 'numberOfStudents',\r\n\t\t\t'COURSE': {\r\n\t\t\t\t'course': {\r\n\t\t\t\t\t'IS FREE': 'isFree',\r\n\t\t\t\t\t'COST': 'cost',\r\n\t\t\t\t\t'COURSE TITLE': 'title'\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'CONTACT': 'contact'\r\n\t\t}\r\n\r\n\t\tconst rowMap = []\r\n\r\n\t\treturn readXlsxFileNode(path.resolve(__dirname, '../test/spreadsheets/course.xlsx'), { map, rowMap }).then(({ rows, errors }) => {\r\n\t\t\terrors.should.deep.equal([])\r\n\t\t\trows[0].date = rows[0].date.getTime()\r\n\t\t\trows.should.deep.equal([{\r\n\t\t\t\tdate: convertToUTCTimezone(new Date(2018, 2, 24, 12)).getTime(),\r\n\t\t\t\tnumberOfStudents: 123,\r\n\t\t\t\tcourse: {\r\n\t\t\t\t\tisFree: false,\r\n\t\t\t\t\tcost: 210.45,\r\n\t\t\t\t\ttitle: 'Chemistry'\r\n\t\t\t\t},\r\n\t\t\t\tcontact: '(123) 456-7890'\r\n\t\t\t}])\r\n\t\t\trowMap.should.deep.equal([0, 1])\r\n\t\t})\r\n\t})\r\n})\r\n\r\n// Converts timezone to UTC while preserving the same time\r\nfunction convertToUTCTimezone(date) {\r\n\t// Doesn't account for leap seconds but I guess that's ok\r\n\t// given that javascript's own `Date()` does not either.\r\n\t// https://www.timeanddate.com/time/leap-seconds-background.html\r\n\t//\r\n\t// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset\r\n\t//\r\n\treturn new Date(date.getTime() - date.getTimezoneOffset() * 60 * 1000)\r\n}\r\n"]}